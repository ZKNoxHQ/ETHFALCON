// code generated using pythonref/generate_hashtopoint_test_vectors.py.
pragma solidity ^0.8.25;

import {Test, console} from "forge-std/Test.sol";
import "../src/ZKNOX_HashToPoint.sol";

contract HashToPointTest is Test {
    function testVector0() public pure {
        bytes memory salt =
            "\xe6\x1b\x64\xc0\xa4\xcc\x29\xa6\xf7\x20\x6f\x5a\x46\xbe\x1c\x37\x9c\xb0\x8b\x1d\x60\xbc\x67\xb9\xf4\xaa\xbf\xcd\x58\x76\xf8\x0c\xc2\x35\x28\xe2\x59\xd6\xa9\x32";
        bytes memory message = "My name is Renaud";
        // forgefmt: disable-next-line
        uint256[512] memory expected_hash = [uint256(7089), 1757,2685,6515,9590,9365,5274,9663,11428,9746,5898,7920,3286,2470,2328,386,5661,5013,3475,3346,7741,6274,6141,1352,5010,3039,10601,5197,10045,506,10377,11026,1573,1357,12251,8612,5933,1087,7173,11790,858,847,747,7040,8083,5457,25,442,6797,5943,11012,6745,5087,3896,11793,4637,5305,3679,7748,8390,9373,6267,5402,5164,12103,7636,10171,3899,237,1661,7999,4141,3477,10740,3825,10288,9598,1278,746,2243,3587,10030,4719,12209,11209,11619,11318,11217,8826,2766,4589,4841,4556,4208,8577,12156,1149,4422,9356,11228,2137,8492,4691,593,9172,11540,5702,7151,5170,11452,5868,9825,2836,342,5257,11271,6992,9688,7323,3308,11328,6995,1730,7078,1624,2789,5996,1138,7611,1453,738,8942,2722,9463,6155,9990,6810,6327,2064,11608,6705,2819,10356,2242,3345,3732,3425,5303,1015,432,5506,3718,10438,6073,7713,3696,6850,4927,272,8490,3124,11440,5255,3819,9035,621,12188,10701,10448,1011,11792,11244,2509,9855,11617,6638,769,5203,10561,865,2032,4301,8843,5722,3245,10343,7299,4708,12267,7005,7914,11986,11229,5350,7361,5023,9591,11201,9484,4164,806,2220,2294,8944,6952,3949,6582,9703,8997,6054,4970,11692,1655,11693,3864,1740,12192,7951,3209,676,8086,4058,6962,4283,4589,2276,12067,4986,8240,11432,11848,1879,2695,2439,12227,9605,3945,6908,2029,7841,7609,7333,8261,2112,10248,2316,5014,2883,9833,2237,3589,5806,6968,3326,11825,517,3533,5282,11911,4246,10159,7684,8597,11507,5847,4127,6535,4265,1775,488,1732,1070,6150,3314,11388,5837,4673,8194,11666,6803,432,4614,11774,6201,3736,8862,12138,6265,8474,2966,1984,4008,3793,6865,9748,3639,1104,8121,8624,10936,100,6471,6277,886,3122,10993,8315,7136,4963,2439,6628,9711,5668,5105,4653,2222,2722,3693,3043,393,9455,7300,9168,3867,10778,4528,7904,7197,504,7378,2313,4458,9849,10510,2044,4229,9964,11420,2376,4164,7204,7241,9191,11929,4598,749,1722,8522,4753,6847,5791,8028,27,9124,8479,1619,2557,1895,10581,9542,9827,4365,161,608,948,7779,3438,2713,8830,11833,2122,8800,3005,3446,1594,5041,9856,6888,8170,4744,3652,3541,7547,5779,2215,10367,7904,9925,4784,93,2818,7253,7304,4213,10760,9209,2336,10815,8120,10339,312,12086,11283,972,7708,10845,10760,11159,148,4669,3306,11072,711,1986,5664,3086,2122,732,5266,8722,12142,6441,4174,5748,4163,341,2639,3142,7994,8117,2312,8344,9044,9885,10022,2955,9547,9777,3515,7576,12287,778,609,9004,2627,430,38,9931,2207,4748,8840,10719,7566,3257,5935,5440,10250,5901,5186,12157,11220,6966,4074,7465,7432,7679,7899,9214,131,12285,6242,7910,3415,1712,6963,7782,725,10512,6782,4555,5032,10826,9006,4975,3153,5559,10959,5853,11929,11193,9499,10483,4123,3811,7831,10832,11497,2682,5588,2321,7610,12057,9687,11900,2322,4555,7979,5746,10467,10544,11009,7474];
        uint256 q = 12289;
        uint256 n = 512;
        uint256[] memory hash = hashToPointRIP(salt, message);
        for (uint256 i = 0; i < n; i++) {
            assertEq(hash[i], expected_hash[i]);
        }
    }

    function testVector1() public pure {
        bytes memory salt =
            "\xc7\x9f\x11\x3f\x7f\xee\xf9\x92\x7c\x11\x99\x8e\x95\xb9\x3e\xdb\x3d\x29\xd7\xa6\x72\x43\xeb\x25\xa2\xf7\x0d\x45\x1a\xcf\xd8\x07\x88\xed\x3d\x93\x04\xdb\xed\x3d";
        bytes memory message = "My name is Simon";
        // forgefmt: disable-next-line
        uint256[512] memory expected_hash = [uint256(8283), 9321,7120,4242,10762,6114,8027,5094,2849,5733,3663,1855,3897,11656,11897,4074,3418,2522,10281,113,10243,7134,7805,9096,4832,2901,1515,4905,11902,4975,1058,3771,10295,9761,5732,9748,4178,3828,4426,9365,2256,10757,2557,5462,6297,7654,1129,2823,1870,9186,2947,5846,10610,9394,11164,4181,172,3638,8359,4791,11797,1498,966,6037,2128,8852,8169,7735,5134,40,478,1796,6072,8168,6481,10583,2457,8291,7878,7494,9952,2720,8057,3907,9365,8936,10643,5093,6908,2271,868,4676,10815,6095,10916,10728,114,8339,1879,7174,10551,12210,1019,140,624,11549,325,9704,4344,2971,2905,7452,1934,11595,9591,8625,11861,6558,8838,8789,6470,10801,8652,8758,2629,1524,5738,7230,7281,6962,4145,5666,4913,6877,1713,2661,11392,1977,5281,3555,11611,1620,6570,3472,8047,10798,7867,4943,9775,1744,6895,5667,740,8565,9919,10011,4736,6725,11185,7551,7240,10579,5633,10210,4490,3280,473,521,5823,7548,1740,3695,1960,2427,6802,1741,512,8316,4480,3040,569,8986,9154,1090,2345,3913,10876,8627,3182,4625,6817,6384,8146,2309,9258,3658,6807,8777,8348,5502,2380,15,1950,3082,2256,2373,4649,3169,1551,10345,6489,10797,11338,7677,7889,427,172,2468,1727,12136,9264,10961,9670,2068,9396,6163,6513,3862,8200,3667,11331,8648,3556,2175,4786,11807,260,173,3274,577,9427,12010,4638,9742,5931,806,4760,6502,9348,12280,1572,512,2454,7459,4767,1105,7434,4375,12107,5805,2541,3619,10483,2920,7702,2146,9337,5409,3238,11682,5349,2459,1269,7431,938,12177,6979,8232,9226,6537,3960,1766,11378,1828,1977,8583,7546,10337,11055,1949,83,4864,5079,9158,4913,5116,8690,2411,11684,1293,8534,11221,2991,10913,8293,6487,3446,8573,7509,12231,11441,9106,6031,9808,5878,9661,3331,3722,2231,10812,11772,7431,4483,1526,197,6897,9118,6573,8305,3050,10295,2184,843,4933,11476,10154,2649,5251,2181,11588,11004,2968,11422,10994,2744,8475,12144,8876,8587,5929,6247,8949,7104,958,5277,6839,6981,6115,11647,9072,1300,4182,8132,11752,6815,7117,11229,11119,1455,12218,9268,12193,6982,6935,5897,515,3709,728,10774,6668,4917,1812,484,5425,11117,5652,12205,9336,8185,4243,7269,1272,5932,6666,1360,8193,3317,9233,4548,3653,7004,11835,8194,6606,10154,3982,7929,7978,3325,11874,5866,11445,3864,10949,3822,1607,6834,12176,11468,8878,6910,10774,11152,2816,10082,11620,11329,4146,152,8891,10849,6434,9809,8960,243,11877,10098,10598,11486,4093,430,10096,2578,1503,5676,2486,8165,1419,6587,8242,4841,7049,9561,2865,2325,4928,4997,6143,2992,3654,2185,12125,1663,10837,1839,5649,4625,10846,2971,1246,2754,9657,6699,11686,1386,3569,4348,1055,6473,5372,11484,10457,4665,3901,11371,9368,893,3033,2958,3904,6782,8388,10020,5882,8750,4775,5823,5662,4178,9408,2175,3515,6230,4627,9703,650,11328,4526,4855,9618,1375,10587];
        uint256 q = 12289;
        uint256 n = 512;
        uint256[] memory hash = hashToPointRIP(salt, message);
        for (uint256 i = 0; i < n; i++) {
            assertEq(hash[i], expected_hash[i]);
        }
    }

    function testVector2() public pure {
        bytes memory salt =
            "\xd7\xcf\x74\x9e\xf8\xb7\x6f\x1a\x94\xe9\x72\xd8\x09\x68\x99\xd0\x31\xea\x62\xad\x20\x17\xbc\xf7\x35\x61\xf3\xa0\x40\x7d\x4b\xf3\x38\x4c\x9d\x8e\xfc\x76\x4b\x65";
        bytes memory message = "My name is Nicolas";
        // forgefmt: disable-next-line
        uint256[512] memory expected_hash = [uint256(10103), 344,9531,2473,6615,8929,1893,8133,2593,4894,5934,6424,8001,3771,12192,6023,4094,6875,330,2575,9122,2966,8922,7731,1840,11683,349,5236,11696,9352,3656,5462,3809,562,7147,2742,5567,8765,10968,3998,8312,11113,8281,8796,4060,11214,10814,4945,10875,10336,776,10268,10942,12011,600,4689,11305,3400,12264,3810,5184,3783,6215,8174,7830,7599,845,11235,2205,5486,7531,7088,5607,9861,10338,7805,6563,5204,7520,11186,11267,5955,7989,5840,2383,5286,11271,5336,10206,1755,255,7131,4356,1713,3930,7729,810,8821,4829,5240,5102,12058,2858,1394,2061,2050,11050,11042,6216,9644,3548,6438,4136,4821,10971,7563,3033,7741,9165,3217,197,2544,4012,8413,7592,6076,1616,466,6257,6845,3804,5532,3310,1674,11440,9600,10460,3337,3330,566,9241,2598,474,4647,5086,8080,2356,9620,3566,7511,6552,4636,11391,1442,11290,7004,9297,8921,3239,885,11745,754,8224,9616,2042,6572,7879,3392,4333,6259,12148,4513,2560,7542,8397,4970,1348,3071,2155,5010,10331,1587,1277,461,11107,1637,12195,8424,4058,10773,9904,11562,4471,8908,11477,9072,5512,9498,7009,10624,7412,2561,1384,3159,1783,9205,1480,3980,11498,4818,2012,4037,6138,6344,6314,976,6745,3390,11042,9556,3068,9927,3576,424,5117,18,5252,9256,5796,6172,11761,9559,5758,11585,4437,11928,11254,1736,1279,10324,10181,2048,6833,6128,11275,6182,6417,9843,6050,3786,9150,7021,683,9331,6874,105,2372,1255,777,5424,11074,11381,8377,1573,205,3844,2504,88,10666,1162,7304,2543,3899,249,10594,5378,6515,2646,6709,4250,8298,88,3112,6368,8523,10318,7009,5514,7080,10306,8441,3454,8063,2110,6739,10712,772,8446,9897,11688,9739,5004,243,10253,4357,4057,4962,5787,6066,2242,9522,10445,4871,10638,11240,4553,8807,5356,4761,4419,4545,10217,9328,5699,11449,2735,10068,1841,4866,8448,1692,857,9909,7534,3453,2313,4111,1523,3500,3395,9339,1610,11765,11112,9138,3280,8084,3764,5215,12085,424,10700,11413,10459,1940,5636,10432,4421,10829,8080,4641,8061,12191,4721,5717,10701,10365,7397,2767,11284,11555,8444,5117,11281,3571,4408,695,1378,10313,1650,2090,1437,3248,6252,10780,7922,11579,1940,11872,4595,8478,10661,1693,8263,4493,7433,393,7005,10405,7543,7741,3052,6945,7564,4606,10003,3100,7799,11202,2572,2709,10944,5969,4891,10933,1916,6513,8046,3926,11250,2665,284,3755,4973,1839,7197,9674,8855,3665,1946,2023,9932,4065,11360,4424,12121,9395,6260,2512,7062,11557,11559,8177,7695,3272,7851,3995,9284,4973,930,3015,692,11856,6178,4895,3881,6187,9516,9542,120,90,4540,10657,7943,4455,2845,11972,7238,10651,7074,4489,7262,2752,7451,5672,7823,10063,4689,2229,8070,11747,4031,5744,586,7847,3974,7893,2767,10490,5665,9799,1900,10932,185,10343,509,3239,7341,10687,10173,2200,10654,8903,714,1707,7629,708,693,4176,9876,12147,218];
        uint256 q = 12289;
        uint256 n = 512;
        uint256[] memory hash = hashToPointRIP(salt, message);
        for (uint256 i = 0; i < n; i++) {
            assertEq(hash[i], expected_hash[i]);
        }
    }

    function testVector3() public pure {
        bytes memory salt =
            "\xd8\xc0\x59\xc5\x45\xfa\xdc\x3e\x0c\xa7\xae\xaa\x8b\x78\x33\xfd\xfe\x66\xc6\xda\x64\xa5\x5e\x21\x3e\x9b\x99\x2d\x38\x51\x9a\x49\xa2\xa7\x3b\x41\x44\x9d\x09\xb0";
        bytes memory message = "We are ZKNox";
        // forgefmt: disable-next-line
        uint256[512] memory expected_hash = [uint256(10107), 11490,4491,2758,8704,4190,5337,2445,8539,10765,5696,2919,9992,11414,4984,10805,11010,2514,3138,1496,3363,1392,9662,9869,566,2876,2846,2481,7550,12244,6945,4170,9988,5168,12195,7873,8938,6202,8082,8073,10283,3883,8155,11344,6939,5465,230,311,3763,11724,4760,300,6330,7165,10106,3952,3576,4477,1134,5169,3118,6470,8581,7577,7978,2844,10180,5785,1072,1777,3530,11097,2564,2712,3834,141,5123,3902,194,11536,4057,3960,4860,3584,7050,11559,5491,2502,8999,10641,11104,12199,6760,11618,3266,8698,5454,8319,1435,10593,10163,7821,3695,5762,7426,1957,1933,1542,330,2797,2602,7689,3840,4013,5999,7706,8697,4515,3765,6138,5069,7114,2812,5936,8273,7901,6680,9124,4675,6905,10512,8121,10460,5268,1776,2883,11963,6607,11656,5789,2246,11276,7059,11304,9596,1259,1174,12219,7857,2297,3359,5455,5188,4824,8323,4887,6761,10134,411,9454,5134,9092,4217,6436,10309,6966,5506,10221,10814,561,6410,9601,2261,4470,7283,8914,9843,7422,8954,5610,2621,8608,6604,10335,8247,6448,8262,3489,7729,10651,5243,10764,10174,7498,9826,54,1440,11612,9318,1292,10001,3087,1660,2821,5806,4620,4977,6094,511,4056,10949,11989,10515,9703,9371,367,5174,3296,10901,632,10144,11170,9948,9447,10177,6271,5074,6838,7871,3685,12174,4642,11087,10407,5284,5150,11423,3936,2943,1298,579,5497,6040,7302,10011,4061,9104,2611,1136,7620,7684,3367,7256,6047,6927,11481,10880,4307,8384,857,5894,12222,11805,10957,5204,3837,1730,2107,9340,2416,7683,11143,3086,1195,688,4965,10789,9392,2513,1848,205,7051,8943,9469,467,7315,11786,612,1079,7311,7475,4756,1226,10861,8752,109,10033,8656,8792,2579,11308,8857,11635,8636,443,2062,10674,1388,5852,2461,5854,7922,8187,4933,5238,4007,7063,8195,7696,2406,6069,5449,4387,10673,11044,3040,11650,3236,7931,11801,2850,2022,86,10362,6641,8443,9701,2276,638,5053,7439,6580,7346,12189,9682,10743,47,10865,2108,5884,408,4187,10612,11207,11957,9258,8047,11589,6394,10782,4672,2400,693,2653,6431,9043,3092,1112,3994,3482,2373,9768,6380,7794,214,803,11620,9817,291,283,1866,11621,6181,2841,5985,10355,371,10892,11090,8884,1445,11014,9601,8603,11808,11973,2609,8662,11708,9069,6151,9042,9576,6178,8081,5928,8776,11026,1457,11172,10306,1332,3177,2814,7152,2004,8004,10621,3353,2833,3025,11590,4527,4408,1507,884,11044,11961,6513,3645,5279,8709,2830,3540,9713,8018,11977,9906,6421,4520,2230,4549,11070,3895,9634,779,12195,3677,9229,8937,4396,4001,11387,1107,3989,6326,1653,2740,6570,284,231,7598,6459,11997,753,2802,5770,1213,7944,1979,10444,9156,9617,6842,2799,5380,7610,8952,8906,3619,3554,7066,2378,3294,11397,8635,11470,8058,1326,11379,12236,12053,6323,2812,10353,7698,7759,2407,2248,1600,2361,2640,6902,9783,4132,416,6152,1081,8167,2018,9773,6376];
        uint256 q = 12289;
        uint256 n = 512;
        uint256[] memory hash = hashToPointRIP(salt, message);
        for (uint256 i = 0; i < n; i++) {
            assertEq(hash[i], expected_hash[i]);
        }
    }
}
