// code generated using pythonref/generate_falcon_test_vectors.py.
pragma solidity ^0.8.25;

import {Test, console} from "forge-std/Test.sol";
import "../src/ZKNOX_NTT.sol";
import "../src/ZKNOX_falcon_utils.sol";
import "../src/ZKNOX_falcon.sol";
import "../src/ZKNOX_falcon_core.sol";
import "../src/ZKNOX_falcon_deploy.sol";

contract ZKNOX_FalconTest is Test {
    ZKNOX_falcon falcon;

    //stateful initialisation
    function setUp() public {
        bytes32 salt = keccak256(abi.encodePacked("ZKnox"));

        falcon = new ZKNOX_falcon();
    }

    function testVector0() public view {
        // public key
        // forgefmt: disable-next-line
        uint256[32] memory tmp_pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];
        uint256[] memory pkc = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            pkc[i] = tmp_pkc[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [21649177790571192151286347015496942774998047093443469911824293759971769921428, 268561837228003295750097962055377173144230591962156166013405983500166901722, 373131625068829243878329325423678131041649088938736656507320119997555081235, 21486956906798985719744375447418457093904022330284178432016463274856548335792, 21046685012579207363779083391328077072214150550607548013536002123977240477986, 21624441549379106406854913087313490894795813631028932379313967382686196510643, 21269307451108998178385520109334456835115990194191195737525785771781959909565, 21502531263687643325340175878774636041406187334634592429142727315400727670519, 21645644447053892427347704348572035349652711108703358737702992269605067960232, 21642434488002171509128269223391903377510003992725863045650229316731768864833, 143119470082566254482735508500984469699860060818744295831990820277956915152, 21329707513272854740751761229950211571450422559001525308753079369050633482098, 21274936790822894191602613586986915689519661452929637034834680332795904471016, 323334360936185288001981502514033468909440677622868552612107777952939454224, 123679299536821298309830082798375208376610949331800767508152351976155721432, 21491932279213207751766589616948004610084312966776105784769653908907333255233, 21555542660741624619295241800731825770453854520453475890665283178064948298017, 21221927933047296480928267470961179332618989116613413084747202280410795475009, 21640345869013883370330016229125346816596850570010888955143002957579576672404, 447342652619835196009820811808904031226531727490450346028265756926131110099, 48035216006736122407389636281329469805748676305369281203171327493607718987, 21518434450972238337302563984051994092825336572101022453461300155810011086937, 333938521709614508411251346141738162769014840087489168548614530158677590118, 21322638943617910190789463252175561671279485636811843560369873363276365299985, 67147494647851671533097211665243328708469268023218856658099323225006878424, 116612876865130439291083919507652316067243925780313881626436539371081498829, 21676008001193555476662926248472147257885449589381323941811680418544747741313, 127542681867544440369323810542605531185295482507825078859650437370710524036, 21474589727324966696397422730377349856660942504908738086594141842221836664953, 204955823209712158529229531556743920712069026834325166406926177293848227824, 55101682679218165125147635923326063419450638759116465378302788679604895838, 198216003314064520968126849996156841255555215727010889276036638293899030319];
        uint256[] memory s2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            s2[i] = tmp_s2[i];
        }
        // message = "My name is Renaud"
        // salt = "\xab\x0b\xae\x31\x63\x39\x89\x43\x04\xe3\x58\x77\xb0\xc2\x8a\x9b\x1f\xd1\x66\xc7\x96\xb9\xcc\x25\x8a\x06\x4a\x8f\x57\xe2\x7f\x2a\x5b\x8d\x54\x8a\x72\x8c\x94\x44"
        // hash to point
        // forgefmt: disable-next-line
        uint256[512] memory _hashed = [uint256(7539), 11940, 8834, 9594, 5826, 12186, 6171, 11630, 1289, 9603, 5039, 7645, 11590, 11503, 1161, 11384, 9170, 11412, 149, 6843, 10901, 6181, 2940, 9155, 4121, 3896, 10480, 10890, 5541, 2728, 10823, 3698, 387, 311, 3200, 11590, 2690, 3305, 3414, 7398, 311, 3043, 11724, 3760, 390, 8035, 11820, 5512, 2943, 1439, 2836, 1069, 2151, 8833, 4258, 6465, 5204, 3127, 6586, 8068, 691, 5463, 9007, 5920, 329, 3825, 11776, 5163, 1979, 2021, 11899, 4161, 5883, 9302, 12052, 10555, 3961, 4864, 11410, 10134, 3247, 7562, 7525, 4415, 9881, 5179, 7327, 10377, 711, 1070, 5519, 1001, 10768, 693, 7439, 12148, 10847, 7940, 11735, 5915, 8130, 9744, 11836, 6306, 7929, 1394, 4240, 6455, 7577, 12285, 3978, 9863, 3575, 75, 2949, 1647, 3515, 2698, 441, 8088, 8550, 4021, 154, 4832, 7861, 9262, 9628, 1896, 9312, 1031, 7364, 9365, 7746, 6124, 9054, 4865, 10519, 10019, 6994, 10189, 9220, 2161, 7088, 1052, 4460, 6514, 11807, 9169, 10959, 7952, 7094, 379, 2850, 3741, 7918, 6446, 4219, 11640, 9800, 11879, 1361, 765, 2314, 11263, 6780, 3488, 8839, 1709, 104, 8811, 2744, 3027, 11824, 6404, 7904, 9322, 58, 760, 4129, 4545, 1595, 10008, 5313, 4041, 2307, 10875, 10463, 10247, 5875, 2524, 5568, 12237, 12274, 10247, 10175, 1612, 8219, 6035, 4254, 3414, 7350, 11485, 2219, 2645, 30, 9429, 11271, 3762, 1710, 2395, 11925, 8023, 3283, 6019, 7367, 244, 5726, 2852, 5383, 10788, 6376, 8529, 1443, 12222, 10672, 1527, 566, 11620, 1214, 5876, 4346, 8069, 6758, 4970, 1858, 368, 6049, 532, 1452, 8354, 5096, 9316, 7673, 2004, 11505, 6219, 9408, 7768, 10068, 9614, 4205, 12021, 12035, 6455, 9879, 8942, 10568, 5314, 2317, 891, 12251, 6289, 5573, 8082, 7951, 11903, 734, 4643, 3516, 8740, 2434, 4731, 5532, 10181, 716, 9250, 3029, 9385, 7627, 7121, 6022, 313, 8255, 116, 6385, 8183, 4681, 11579, 2678, 10650, 9890, 8828, 7965, 11620, 7818, 5739, 2630, 4803, 8578, 3981, 1782, 8618, 2277, 8545, 8087, 6886, 4253, 4878, 807, 10119, 7140, 2024, 8699, 8914, 8444, 5131, 2500, 10072, 5056, 5241, 4179, 6947, 12032, 8390, 3384, 11533, 6111, 195, 12225, 9180, 7859, 7750, 11542, 5800, 4133, 2811, 3288, 2825, 7284, 11315, 389, 9543, 5327, 3441, 9824, 5215, 9911, 1565, 1321, 3590, 5691, 8085, 9718, 5710, 10133, 3487, 66, 6000, 678, 8446, 8771, 11197, 963, 145, 7716, 1517, 8583, 4113, 3655, 4757, 6013, 6607, 11369, 4282, 2091, 7032, 9838, 7737, 7017, 7824, 9043, 5973, 7848, 11820, 7408, 10550, 11900, 4397, 9078, 6830, 79, 991, 5728, 4465, 3138, 10729, 8086, 5329, 12095, 2729, 7444, 1886, 6820, 9809, 10735, 90, 223, 1846, 2460, 3967, 8517, 9827, 12069, 225, 8034, 10712, 8000, 5657, 5532, 4881, 6389, 3615, 2369, 10102, 2976, 573, 1168, 9044, 5889, 3098, 1278, 5181, 10700, 4965, 6893, 10422, 4883, 5401, 4706, 11273, 3311, 8972, 971, 7992, 11867, 894, 10828, 699, 4951, 7380, 5294, 5750, 10360, 1545, 9647, 5037, 2285, 374, 1237, 9648, 11773, 9737, 7652, 9345, 4866, 4130, 12173, 6952, 8691, 9424, 6124, 8249, 7261, 8882, 5316, 10341, 8906, 5080, 5478, 5080, 1948, 10536, 10119, 8969, 4203, 7445, 3539, 11625, 1430, 1444, 4224, 4630, 412, 2491, 9870, 7258, 11818, 5748, 4263, 4269, 10807, 7102, 5502, 3945, 7016, 2245, 7029, 9124, 11360, 3608, 5419, 6847];
        uint256[] memory hashed = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            hashed[i] = _hashed[i];
        }
        bool result = falcon_core(s2, pkc, hashed);
        assertEq(true, result);
    }

    function testVector1() public view {
        // public key
        // forgefmt: disable-next-line
        uint256[32] memory tmp_pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];
        uint256[] memory pkc = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            pkc[i] = tmp_pkc[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [194682686577610227246794695790715774126944874938428808986542410689990230135, 21209578797232041709286278565353757389708021321244238293915949802285695044, 21546703545696180855681069975918364541250822957120857472490640683003863957701, 108107261259864131647640314879209136401220200481432262235088649804704657342, 21278466953220005277143488220296682264666514238642259014027042528002340892575, 21356210062360815728479234982603977588355313360474497173479485111652984881228, 28600167887805239548180466269769444397148101494273412969588445637293899880, 21373553283207204848640764270744320634713030558788244955341093174867868844108, 187286759473542881013576550970547849203367076170543633199274462815663238984, 60401549871109243896928853540737834993354618518134892921660777037918580606, 95732160517032057921925508485491761636601354631527318630385656666669920224, 21207469605214262683320661946857337645668320236778396279280173490279165734874, 21460455414142077064495604464593687296831794405111486628929870506891858673755, 5631668306887557050738494558619849146545757022917648253048896176919490406, 63930472044930065098192495828103724454479173831074445973909762468460625926, 7395981111584989711043970861311579896839398611611897377580501422996074344, 14458188131905473014631970539328817583903503039603445810250206317962199091, 47708110970044448321413739320727634051394143775801958882647561653199372524, 21695119179420030207088390014818971321051832965749095039316269331789351104509, 21596496221609714947242360606041609205955645180558924037830182175085078523726, 21103550603542902924851553372701121327442172391783259240989921079025583063193, 21700415654645830251846677077602552557948858800574869254354992268239749054624, 362531723894909670115203445621122542563648112070875341719204299042632302813, 512397349459355985850600546641917543052807609594473422614121390394526859303, 222950675969320959868148959667226049295692074114584663424378885879099371392, 104245864054057079326974862843064049808915620551997214427772035469701033736, 21550557362206209354206290369581073342571981668216140867660132300165473513435, 21623004206828566858889248265475832231414896189265833848347282522444344524844, 174920398624128739911197446561742917144717286645578866601687611454642651271, 408469186433220486059854700233846396289332066861950535963850596883314114568, 433206415358416069256686675196271782522173307238240827950474013955889049588, 256517211524099221464913041288946341925530632579246662806331665088535658538];
        uint256[] memory s2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            s2[i] = tmp_s2[i];
        }
        // message = "My name is Simon"
        // salt = "\x91\x89\x90\xff\x93\xe0\x65\x6b\x5f\x75\xb0\x87\x29\xc6\x0e\x6a\x9d\x73\x52\xb9\xef\xd2\xe3\x3e\x3d\x1b\xa6\xe6\xd8\x9e\xdf\xa6\x71\x26\x6e\xce\x6b\xe7\xbb\x5a"
        // hash to point
        // forgefmt: disable-next-line
        uint256[512] memory _hashed = [uint256(1365), 4240, 6572, 7092, 5849, 11715, 11662, 5561, 4667, 8929, 6096, 11449, 12285, 3556, 3302, 10402, 538, 3241, 3002, 7812, 3222, 4798, 10383, 7774, 5068, 1646, 8316, 10075, 8387, 4838, 9254, 8808, 323, 205, 6322, 6957, 12019, 6331, 6017, 1704, 1161, 10582, 2860, 12215, 8193, 9078, 2196, 9563, 4302, 457, 6563, 4152, 4855, 8226, 6592, 8564, 3512, 10139, 4924, 1177, 2898, 7273, 11676, 7241, 5894, 2146, 4884, 5784, 3922, 9334, 3773, 4064, 5519, 1075, 1378, 2990, 9098, 1891, 4303, 10647, 5009, 10978, 9205, 1471, 6310, 2943, 1336, 5664, 6212, 3423, 7449, 11170, 11396, 9196, 8896, 5522, 9573, 4595, 10359, 10023, 11378, 2445, 1596, 4040, 1255, 7979, 6216, 3758, 6115, 6971, 1120, 6481, 6386, 6872, 7670, 9572, 3100, 11257, 2278, 9143, 10517, 7991, 6638, 10378, 6268, 1804, 9480, 5852, 9986, 2066, 822, 3821, 8492, 10837, 2531, 10205, 6456, 8543, 12019, 3763, 8976, 6455, 8754, 7261, 6069, 5531, 10383, 8240, 10826, 11555, 9357, 5339, 10125, 4030, 12070, 1015, 1125, 7154, 7398, 5327, 7944, 10914, 9856, 471, 2752, 10667, 8465, 12241, 12287, 3304, 10956, 7935, 10178, 3395, 11129, 2721, 4404, 5582, 5460, 11526, 2225, 8285, 5524, 4372, 6807, 3701, 4828, 8167, 90, 1808, 818, 10660, 1892, 6038, 6237, 5361, 4914, 782, 6578, 8423, 7285, 1244, 5479, 422, 4816, 11709, 11640, 7084, 9146, 10601, 2908, 482, 10097, 8817, 10431, 4, 3103, 11159, 7361, 607, 9999, 10924, 422, 1066, 227, 10003, 11443, 7496, 1213, 10327, 3395, 2130, 4764, 3435, 4846, 4565, 4620, 6502, 523, 7796, 4446, 463, 11510, 9414, 1659, 5354, 7512, 6762, 12169, 9264, 3168, 7105, 7104, 404, 7415, 11105, 1524, 8599, 10121, 7139, 5355, 3332, 2449, 3617, 489, 85, 10901, 10492, 7061, 9656, 1064, 11816, 6965, 9105, 1072, 10898, 11269, 5092, 10841, 4950, 54, 6027, 7012, 10127, 10880, 6870, 3596, 4339, 3015, 4915, 12022, 9468, 6484, 6796, 11437, 3599, 2842, 10060, 262, 4633, 8727, 6682, 1239, 6233, 1338, 7364, 1178, 7375, 5472, 1044, 422, 10132, 11040, 6702, 4812, 4339, 7483, 9213, 5714, 3044, 10475, 5171, 2436, 9929, 10625, 3109, 8233, 11411, 3665, 1945, 748, 948, 5266, 608, 1072, 3839, 5532, 1045, 3118, 10098, 9234, 8892, 7778, 9521, 4124, 2124, 11740, 9994, 9455, 984, 10608, 5051, 5617, 11176, 3610, 8631, 3971, 2637, 3486, 2892, 10255, 985, 5653, 2315, 298, 2238, 1218, 5508, 6637, 9256, 9527, 11656, 4874, 2014, 11801, 6312, 4919, 8999, 11296, 11391, 11746, 3985, 9717, 4752, 11203, 9824, 4604, 3520, 11945, 8665, 8546, 4043, 670, 2067, 11412, 8484, 9889, 5104, 1220, 7058, 12194, 8082, 8200, 1815, 10818, 420, 9019, 2147, 11447, 1384, 3127, 6921, 9193, 2145, 6961, 10756, 10778, 8251, 4845, 9668, 11167, 8516, 5169, 9549, 11213, 11130, 7422, 10613, 615, 11087, 9564, 3817, 2635, 7208, 1233, 9963, 11656, 10044, 7466, 7344, 3095, 9692, 2918, 1457, 11146, 2574, 3651, 8710, 8121, 4964, 6405, 4369, 4685, 7548, 839, 3845, 7929, 6745, 1354, 7789, 1172, 3953, 3882, 9452, 8786, 1618, 7069, 5201, 8756, 11376, 5188, 10698, 3715, 2951, 2310, 4743, 6988, 7437, 5091, 1479, 9402, 4070, 2506, 158, 1955, 3145, 4830, 9273, 5879, 1623, 3275, 3099, 5684, 11585, 6940, 10249, 3927, 10379, 7592, 6890, 7675, 5658, 7046, 11663, 2683, 3552, 10661, 8781, 3556, 109, 7512, 6242];
        uint256[] memory hashed = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            hashed[i] = _hashed[i];
        }
        bool result = falcon_core(s2, pkc, hashed);
        assertEq(true, result);
    }

    function testVector2() public view {
        // public key
        // forgefmt: disable-next-line
        uint256[32] memory tmp_pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];
        uint256[] memory pkc = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            pkc[i] = tmp_pkc[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [83368463789534418773637917004411568927501911403895260829890950549917085510, 433204964410165772229288582996469014456189653196716054825558692668499701689, 21688378788326145424938921071855435819016802944263471693535254173686258008162, 146653078386307804090039222208390332928510107395024111740198918716498051188, 192913359185061762802723790788884584228224807132989579462123563036071559185, 174923844694821791934365346412698913579997006764233948403642131135873679453, 177005206335748389376011005549313189090625290449510339466352320906119938093, 134282376976841906304938012574764364392167368186650194440790850273608019721, 295386229280433231287760567181087228975995579731381654901195811143075704672, 125451425776786298050543208073374739504665461692398687750671224607865831604, 21204348602132740190454090220489702379894369405497208055988054938560954422, 21057290839861310575833430112239923949020599492746791990902359662767911600223, 21484865920369066350256879276212371710827087624812849324775341498238497980441, 21543494557077558157767139946612620445400114578116864246357529792722748714980, 21228997365271203934918701785407403377043740508677831614375438979973128335250, 254431643828719943363168790691202159618291128031672447457003103177179594883, 21643879050837399616959950329030766017889155043775699632286442235493895372917, 21366811279551276117929169765191613701197955319974913266267441812636237037646, 21589104505247657328126595328170057135533112356673392641224703632147718221626, 21705720585392722922288119193182230817709356227197695933122955562258419363817, 210582256254245321230944899365900783046047268312358467224286161015892410553, 67467298468928378461709160894009562422323667429353836471288647257142526174, 401405545565146236768414759625815235079482201871887647902854199710089019426, 242058295543645364469603196285533617537305765945903478771539828377630277659, 242387179954915486414898552751845909136723666599166526775187251675298475847, 21508158208971909325311841028614649671720264483265842805765096044974779478011, 272424195205399826356002498265657484966970152204117152351437673127721185027, 44171850718503119557848757064326318010157160096131887405350875276358201213, 21532895383888841644640511827815131680228562870491659771784274985001802608363, 21559395291054650916613143018010240154905698005554200926602924124594631749617, 305666056903143792691495556729812265352071316857396745224349351784979890241, 53006576207760733614742769062179569974763497460833291287471961013096885895];
        uint256[] memory s2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            s2[i] = tmp_s2[i];
        }
        // message = "My name is Nicolas"
        // salt = "\x13\x57\x9b\x4e\xf5\xf6\xb6\x42\x65\x63\xd7\x19\x5b\x8c\x5b\x84\x73\x6b\x14\x26\x61\x60\x34\x2c\x40\x93\xf8\xab\xea\x48\x37\x1b\xa9\x4c\xc0\x6d\xcb\x6b\x8a\x8e"
        // hash to point
        // forgefmt: disable-next-line
        uint256[512] memory _hashed = [uint256(3042), 9294, 7444, 6157, 4937, 10042, 10621, 5611, 5519, 7550, 9021, 4557, 9800, 7249, 10003, 212, 1459, 4589, 11091, 2033, 11866, 7595, 4505, 3926, 5703, 10140, 10996, 10312, 4667, 2294, 5292, 11002, 2121, 6950, 10491, 1616, 10303, 5756, 11272, 3014, 8799, 7550, 8299, 145, 10946, 3059, 6896, 9386, 10538, 4175, 3296, 355, 9700, 34, 4698, 7958, 2797, 11776, 3144, 331, 10441, 8906, 3022, 9811, 6147, 10366, 2840, 10573, 6683, 3261, 7878, 4770, 2497, 8183, 11496, 9021, 12275, 4667, 6119, 5579, 5970, 637, 6608, 1759, 6022, 7138, 1953, 3827, 4655, 4973, 9877, 9364, 894, 3777, 485, 3128, 1025, 8511, 2080, 769, 8702, 11600, 11907, 4967, 10388, 8810, 424, 4643, 9330, 4868, 2439, 9595, 8074, 2200, 6881, 6713, 806, 2123, 3595, 8393, 1194, 149, 12072, 11779, 5737, 2512, 8770, 9978, 9134, 6956, 2883, 11061, 7395, 8054, 3725, 3226, 7138, 11029, 5394, 9743, 3618, 5900, 8576, 6547, 9861, 393, 2458, 7566, 4217, 420, 6028, 9050, 7369, 6418, 11863, 7728, 10146, 3644, 4662, 9448, 4345, 7191, 6542, 4578, 7845, 6041, 584, 6790, 3582, 6690, 2942, 647, 11269, 4844, 11355, 2763, 441, 618, 11304, 11511, 7540, 11276, 2019, 9490, 2956, 5407, 3803, 5520, 6436, 11145, 5065, 8337, 4428, 7844, 2397, 8949, 9151, 7848, 9475, 7129, 5014, 11199, 11452, 506, 2278, 1049, 8346, 12241, 9159, 7943, 8728, 286, 9803, 10831, 7779, 7307, 8157, 1890, 10763, 12138, 7109, 7633, 6967, 978, 9646, 10797, 5549, 2668, 3824, 829, 4723, 8895, 9991, 4280, 4835, 6501, 4120, 7220, 2830, 9481, 3984, 10951, 1266, 7472, 2113, 5801, 10348, 11948, 695, 836, 11883, 9199, 203, 2024, 11326, 627, 3170, 2539, 1918, 10593, 5142, 4411, 7960, 843, 9432, 6319, 266, 8884, 689, 3485, 1906, 11524, 11162, 4580, 4580, 7866, 11196, 6690, 3021, 11328, 1039, 4774, 7425, 10127, 8005, 9379, 11293, 5710, 8874, 10682, 3123, 12105, 3122, 3387, 2136, 2227, 4280, 9014, 1414, 6930, 3568, 9422, 7034, 11149, 8185, 8322, 4647, 2994, 8741, 9943, 11723, 5408, 10187, 7389, 12000, 1422, 3940, 132, 6067, 11931, 477, 10668, 1720, 2840, 5149, 5994, 11616, 2772, 9848, 6570, 8755, 2065, 6907, 4144, 6317, 4618, 8953, 8733, 9967, 12196, 101, 10670, 11743, 8245, 8345, 9659, 3040, 8296, 10245, 118, 10841, 9715, 7324, 4006, 4928, 8169, 9235, 1551, 2149, 9777, 3945, 643, 8922, 5056, 2231, 10714, 6731, 3326, 5814, 7840, 5872, 2539, 2611, 9285, 4362, 8760, 5038, 10951, 11321, 8651, 3778, 5518, 9426, 11571, 330, 10803, 5160, 11821, 2373, 8031, 10218, 775, 8533, 888, 6775, 2312, 2169, 4925, 11579, 7446, 9610, 8011, 9095, 190, 6692, 10811, 780, 6464, 8264, 6657, 1222, 7164, 1040, 3741, 1498, 8115, 10983, 9216, 6939, 6771, 2049, 4403, 109, 2725, 1180, 10511, 3551, 1182, 3381, 12234, 7915, 1455, 10811, 9069, 7776, 76, 1505, 830, 667, 555, 6272, 10525, 7884, 9614, 6475, 1566, 8865, 1845, 6237, 5564, 7217, 3329, 3114, 12100, 537, 462, 3982, 2169, 4601, 1841, 11183, 4096, 9658, 868, 11689, 7787, 12212, 3117, 8602, 9901, 1161, 9277, 2933, 10918, 11992, 10401, 5587, 3761, 6548, 11760, 11074, 1552, 361, 10500, 193, 10538, 9840, 2509, 5814, 2171, 10609, 4011, 1413, 4846, 10757, 10554, 6177, 10703, 3711, 958, 6236, 1044, 2785, 4206, 9919, 10538, 5474, 3797, 2422, 3337, 2652, 10105];
        uint256[] memory hashed = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            hashed[i] = _hashed[i];
        }
        bool result = falcon_core(s2, pkc, hashed);
        assertEq(true, result);
    }

    function testVector3() public view {
        // public key
        // forgefmt: disable-next-line
        uint256[32] memory tmp_pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];
        uint256[] memory pkc = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            pkc[i] = tmp_pkc[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [222625215438031505579127074507852610564115689196496035210990191719705542738, 21676009079545422737713381060865179658839324459056031138701582900638377848741, 21700417110429881450355131003541671711179952764759253699004054421120697184193, 21543492562032043865556988121198738235882828821803141968153958109212761665386, 23299114424939793132040474886892366131501081418156330672410285025780707217, 125449080304696710954464720017230561119373994471678725889429678650124730405, 173152715719887884357233622899815337343513243853139905732911055915259461928, 21665079818564169437946849963212636168925651899610389893095113945195807899737, 21661548631868031173248617985665868846158924689859421817693929401876334325619, 21301439389021424916890219958724695162966167577527441422907326559101383540766, 309523162629360155094452927665364563602435265325015482861712315609432326284, 21601801098430467982221900867025858581149879524255805862571029829560022728801, 21670384506750038980053149935043926703834968309824011082764396306675766263826, 360763129391914414202176950632587338980831084812165678366320101041099571400, 21423347878365599531170235829174662691402110115816083024823055044286034030514, 21691583791813774388230199832002826365587893281688523377579582392926308729009, 418743185802538904212863652769337549090626410509663041026136534813908140123, 540982738239750295558347474552866423303719052512744685576196353100484259588, 199983820935202336583988510684659154281129697934677317429007977439445266073, 21491929529267791472688880803433246610199023008666486485969759322461364563921, 21538194253629759725804966535908579520128679626031365743577844565209948434382, 21697209685630014533396161982713806985264672891271207063851374154973236494410, 21660105083479219995264081016400316403735747205765836724563452342300452401034, 369275786542229138989075067259474722326889523203701806460946655893072260835, 268888505929953483372429122951880212817244027402066263419225789947243725135, 118381130843297671896321559177544654731744460290114377778579872451487793299, 415212457204585777723576537964859334224149108214525235330682225296636194787, 268891665256743650946589438675670257090726853990418597179111573867867942862, 422284428630847944775947050893371389737242366636072767769666921466003718352, 127540767705983051037607894464943101323558745436592134443382603104652898165, 180220724165554076907922847002820785242812837304081566553492921347865641110, 150502662188002183449048192742920861700750734053403302429511675122307235891];
        uint256[] memory s2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            s2[i] = tmp_s2[i];
        }
        // message = "We are ZKNox"
        // salt = "\x5a\x54\x83\x5f\x8b\x04\xd4\xc0\xb2\x96\x67\xba\xeb\x0c\x32\x58\x80\x9e\xe6\x98\xdb\xc0\x35\x36\xa1\xc9\x36\xc8\x11\xf6\xe6\xf6\x92\x10\xf5\x63\x20\x80\x06\x49"
        // hash to point
        // forgefmt: disable-next-line
        uint256[512] memory _hashed = [uint256(4497), 6017, 8650, 1525, 10141, 6523, 6218, 2967, 4931, 874, 11179, 8379, 8903, 6736, 11791, 2464, 42, 9292, 12160, 675, 1263, 10416, 2894, 11856, 9110, 4013, 9707, 6242, 8054, 8768, 4806, 11780, 3310, 9462, 7405, 8198, 4234, 4198, 11866, 9967, 539, 12093, 5011, 12010, 10752, 730, 482, 2246, 185, 2930, 3026, 5703, 3314, 6584, 9333, 680, 5816, 2878, 10701, 344, 6296, 8652, 2618, 4295, 3139, 11001, 1827, 1836, 8921, 5546, 10566, 2905, 11237, 8204, 6772, 347, 11055, 7785, 4025, 7055, 8758, 1889, 1325, 10306, 10600, 9958, 350, 6554, 11246, 5992, 12282, 7613, 2999, 5776, 4825, 1416, 2905, 9661, 3350, 2969, 11429, 9119, 4744, 11515, 3973, 3796, 3627, 11282, 10114, 4172, 8209, 9837, 9305, 6957, 7923, 3894, 330, 8318, 180, 3209, 3182, 290, 8253, 9414, 7441, 3595, 4824, 260, 3289, 819, 657, 4243, 3835, 6493, 875, 6640, 12204, 713, 418, 10071, 11405, 2694, 8152, 10787, 7924, 11652, 3711, 7975, 7787, 6511, 9774, 7457, 1335, 8698, 5735, 2127, 5404, 761, 2064, 5300, 4637, 723, 4243, 10770, 8895, 5393, 8853, 3796, 123, 5640, 9272, 2872, 2262, 6484, 2789, 11013, 2049, 744, 10310, 28, 1039, 2082, 3035, 6828, 8464, 11868, 11243, 11191, 10059, 218, 6587, 9578, 5540, 4267, 6889, 6401, 2098, 2303, 1446, 7819, 12250, 958, 9228, 6160, 11706, 4830, 1865, 10533, 11271, 119, 7916, 8142, 3287, 11479, 7917, 5709, 8745, 5801, 3119, 10302, 2792, 6382, 11383, 11739, 5571, 4974, 4532, 7194, 1882, 6248, 1674, 5947, 5052, 8322, 3159, 11069, 4557, 8714, 3613, 11211, 9284, 8301, 9832, 9893, 5763, 1749, 10230, 9397, 404, 2669, 5388, 2282, 9427, 2650, 4707, 5232, 1866, 3714, 10313, 12260, 11889, 3230, 3211, 3657, 8061, 2761, 4190, 8856, 2250, 7487, 2726, 9616, 11990, 3702, 2900, 1564, 7831, 5728, 6645, 5281, 2048, 9019, 6560, 9724, 9775, 9358, 9710, 1440, 11364, 9652, 3521, 3308, 7805, 9363, 7037, 10092, 2307, 7707, 3434, 6721, 4759, 10099, 7423, 11226, 12095, 3584, 6662, 9996, 7535, 3204, 4074, 3205, 2654, 10296, 7462, 11516, 953, 5818, 9802, 3694, 2449, 2604, 5663, 10146, 6587, 11478, 2896, 11876, 6385, 1101, 9345, 6383, 11245, 6028, 3309, 11324, 1055, 1534, 11476, 2350, 9502, 6107, 5763, 9753, 5445, 1714, 153, 9711, 8424, 6652, 5345, 11506, 6099, 615, 8229, 526, 11881, 9247, 10813, 8557, 1741, 180, 12133, 11702, 3297, 2654, 224, 7014, 3736, 3963, 1158, 3178, 3113, 2618, 8864, 10407, 10677, 8004, 7195, 7177, 1956, 947, 2156, 7481, 1259, 11272, 8331, 6714, 3200, 691, 1087, 3378, 240, 3381, 1368, 6198, 10507, 260, 12025, 4801, 8434, 1869, 670, 1337, 11673, 9097, 5400, 8083, 935, 12153, 9850, 5916, 222, 5235, 4576, 6062, 641, 6784, 10388, 8577, 9319, 10192, 9080, 7548, 2428, 9372, 5584, 4474, 3940, 4396, 7658, 8869, 2153, 2134, 188, 7644, 3728, 1640, 9273, 3868, 1979, 6967, 11359, 10449, 1285, 866, 1507, 5636, 12040, 8905, 6999, 984, 8173, 8076, 2315, 11337, 8711, 6471, 10755, 5154, 2143, 1961, 5403, 4065, 10327, 5210, 9502, 11780, 8211, 9755, 7448, 7841, 2661, 4631, 6168, 3732, 5668, 3152, 10949, 3018, 10382, 2759, 9284, 765, 4770, 10398, 6533, 6345, 1245, 7480, 3668, 1816, 11741, 11501, 8652, 9926, 8454, 9201, 3985, 11688, 10821, 11519, 8081, 10768, 10012, 6476, 10535, 11355, 6193, 7694, 7302, 8659];
        uint256[] memory hashed = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            hashed[i] = _hashed[i];
        }
        bool result = falcon_core(s2, pkc, hashed);
        assertEq(true, result);
    }

    function testVector4() public view {
        // public key
        // forgefmt: disable-next-line
        uint256[32] memory tmp_pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];
        uint256[] memory pkc = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            pkc[i] = tmp_pkc[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [21412424242127082749610191839594829392609335319990662478876364133294951759985, 938197166425361380710370353796599425511229962339559620164675044002097409939, 21647411321071212380761415897307069808958400586121678825154806791311314649193, 21462219969556675763555611051663129394279025351199249323826899476414370939245, 21532570112142586367213716456156282998882970169651536503256279162900785278707, 21601473486094596278097689415768313475766014769988104499793352491966770261860, 150193458487198855960172412486860950466445743917494382397285067450316226641, 63936079761480428901679655785343220182344262444313383981477033448091168724, 21391218793246810542894263058024234198425450067853564400670791803242390892366, 21494022974037990514034492875641587719272379241657474320245997058192701194336, 226157044397558708313848400855036171451956097324768575903477268262834876262, 21566138777573877099557493308809750273628886950442867571793324261757020483552, 773883953089600364097561083085227543243017227910536201641816112224598491361, 21557304056970610111204775034836942486808579572748898192758264058277730004744, 21223371934745051167914669435621300396040813795764848505121538289868127272995, 21557301285044470254816923161326995105145083344818767855254692732795701833612, 358670471364258104760714939225456754161095942466404070493513978650688159835, 328210437288473321774710936334930011045884507386554434481927591059194021, 21157996108003185944232451222500907214109530742953072012336327589114699513996, 21355880957270181049275784779783162902793112397695029577916382944137202905051, 408143289567265176959499044317175596826929427503599671510878281598475436203, 21168594930748873226772498811875707934017541796377192364540189468144969646241, 19435322766729971344933822343177832892069531222182584839246203044511100500, 150511019766944497768812530943806559859096445227616250146176978210900684798, 44499656755767137370694155539619425792158039142667017406186993499424227698, 21359420528678883772827468699927033449515682905127077855108096608968277110567, 21444223072869933784225684209838546304984593361719441611816857423601015521389, 21592968965942438078516618456421132386728252108832191235632804038799762784572, 127214067098599146044102912383538310785919339012842875166013412905288794426, 201747729362989241789380364419493806857510840486777789744138313435815936003, 521222342516545346869170296352098282898180697487366395837698420813812150132, 21384480877498030869454209405815772458304077720102573529957815727485943754618];
        uint256[] memory s2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            s2[i] = tmp_s2[i];
        }
        // message = "Practical security on the chain."
        // salt = "\xc3\xff\x24\xbc\x6b\x6d\x7a\x3d\x30\x7c\xe7\xb1\x73\x1e\x7d\xf5\x96\x90\xd0\x53\x0d\x7f\x2f\x5b\xb9\xed\x37\xd1\x80\x16\x9a\x6c\x1b\xb0\x22\x25\x2a\xb8\xcc\x68"
        // hash to point
        // forgefmt: disable-next-line
        uint256[512] memory _hashed = [uint256(12200), 10329, 2238, 942, 12237, 2418, 7434, 10100, 1779, 5977, 9333, 8600, 3374, 2148, 11791, 420, 6605, 4659, 1441, 2351, 8316, 7801, 3401, 9104, 1328, 3883, 4702, 4182, 3648, 4298, 3890, 3439, 10066, 9729, 3651, 10341, 8099, 4677, 6507, 9419, 6829, 11283, 10248, 4689, 2436, 7264, 7342, 9511, 2622, 8126, 7483, 3005, 9393, 7934, 9043, 5582, 5497, 768, 5874, 2441, 7857, 4033, 7022, 6395, 6168, 469, 5877, 9952, 9106, 1566, 5769, 8529, 1512, 6716, 5778, 6000, 6732, 399, 8052, 8587, 94, 10851, 3204, 11545, 408, 7579, 11092, 6020, 8482, 11440, 2050, 8774, 3038, 65, 4057, 5651, 9239, 5492, 1342, 5251, 12248, 4595, 4984, 8978, 4819, 11757, 7520, 9460, 4120, 3650, 6722, 4276, 3555, 5351, 4900, 6706, 6362, 4622, 10578, 6230, 11893, 2752, 3348, 2128, 475, 4174, 1332, 11763, 1475, 726, 4686, 12148, 7378, 1616, 11890, 10011, 9673, 4121, 4195, 7611, 6998, 11193, 473, 5408, 10361, 11361, 3707, 8317, 8876, 5384, 6545, 111, 5560, 1742, 9839, 5754, 429, 9640, 8971, 3196, 2543, 1280, 2432, 4573, 9459, 7560, 9746, 7561, 1349, 3454, 3066, 6674, 3393, 11214, 7502, 8612, 2402, 11117, 11104, 9359, 5436, 5159, 10605, 10467, 12049, 11220, 6327, 847, 6380, 3521, 5213, 9775, 3092, 5112, 5195, 4540, 9655, 6780, 1904, 1870, 3429, 10613, 8496, 2467, 7260, 9142, 867, 11787, 10064, 2152, 5547, 9229, 2038, 10, 5955, 11433, 7020, 3911, 4620, 6505, 8100, 1288, 2720, 11700, 8144, 2013, 10438, 2524, 6399, 10192, 5568, 10424, 635, 9077, 3195, 10019, 11016, 10714, 3276, 6498, 8402, 2325, 5193, 4300, 7954, 3361, 2161, 3576, 6739, 11674, 4205, 9192, 2318, 4867, 7641, 911, 3341, 1771, 4381, 3839, 1979, 826, 9270, 5549, 11472, 6382, 5577, 1641, 5433, 10137, 2081, 3538, 9455, 10967, 4200, 1785, 6283, 4034, 11883, 2505, 1304, 3282, 6623, 4974, 3495, 5315, 8021, 8105, 2839, 6339, 9170, 2042, 11795, 2557, 5845, 2892, 1629, 4064, 6902, 1125, 8899, 8445, 5659, 3352, 7070, 2038, 4449, 7700, 2532, 8129, 4466, 182, 660, 3660, 7782, 9047, 714, 3212, 3249, 10721, 1420, 10956, 10281, 3700, 1376, 6801, 2570, 1241, 3401, 7389, 7875, 11288, 8423, 7392, 5568, 1147, 1944, 3611, 1255, 10398, 10626, 8218, 1821, 2344, 1871, 7100, 9956, 3474, 1707, 9533, 7029, 7348, 10792, 6522, 7897, 4322, 9377, 1603, 3672, 7817, 5103, 3211, 11923, 6067, 1385, 10948, 6145, 10493, 11305, 8951, 6650, 2858, 10341, 10354, 8958, 7028, 1574, 6076, 10837, 8662, 1421, 7723, 423, 7169, 6448, 4144, 7603, 6956, 5565, 7928, 94, 12030, 6502, 10800, 10669, 10264, 7856, 3484, 1004, 10548, 3580, 9170, 1797, 2504, 12255, 1473, 4998, 11490, 9718, 2763, 952, 4003, 5842, 7028, 1729, 9929, 12205, 10210, 3564, 645, 2283, 9703, 6373, 11096, 10311, 11551, 6942, 9680, 6001, 9679, 7402, 9040, 424, 6060, 11138, 2895, 11066, 11379, 2085, 11405, 802, 5223, 7238, 413, 5094, 6428, 5420, 9017, 11168, 9489, 9440, 347, 2261, 3187, 10659, 1609, 12162, 1512, 4401, 3892, 3713, 8477, 8352, 3340, 8671, 7431, 4245, 2172, 3857, 11648, 11320, 11629, 7828, 8347, 76, 7540, 5628, 9451, 11912, 8694, 5881, 2516, 5517, 748, 9034, 1521, 9806, 1382, 2467, 6050, 10000, 1329, 2239, 10516, 8499, 9022, 1796, 11179, 3512, 163, 3055, 11981, 7211, 11750, 2778, 3403, 1023, 3795, 1751, 10386, 4008, 1035];
        uint256[] memory hashed = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            hashed[i] = _hashed[i];
        }
        bool result = falcon_core(s2, pkc, hashed);
        assertEq(true, result);
    }
}
