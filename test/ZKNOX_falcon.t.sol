// code generated using pythonref/generate_falcon_test_vectors.py.
pragma solidity ^0.8.25;

import {Test, console} from "forge-std/Test.sol";
import "../src/ZKNOX_NTT.sol";
import "../src/ZKNOX_falcon_utils.sol";
import "../src/ZKNOX_falcon.sol";
import "../src/ZKNOX_falcon_deploy.sol";

contract ZKNOX_FalconTest is Test {
    ZKNOX_falcon falcon;

    //stateful initialisation
    function setUp() public {
        bytes32 salt = keccak256(abi.encodePacked("ZKnox"));

        falcon = new ZKNOX_falcon();
    }

    function testVector0() public view {
        // public key
        // forgefmt: disable-next-line
        uint256[32] memory tmp_pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];
        uint256[] memory pkc = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            pkc[i] = tmp_pkc[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [21299671975787483454790402018496259712325154098698828370862796902048963440524, 226482644561092801897613003311591793491464477287443953390217386369311322015, 122241768215234212762829461233206915525091542269434133652196666067046117266, 17998600124730622827465990899026975431920967581729901424009026369714323515, 21156552726390114447912652470199481904643883857534790873521589824973084372941, 166414638319359694539675323431761741043307735201951903340794358417336827986, 21451614924126190838060080098931214529037792752475566277715416002725544210312, 21619468086225573149428575687681504604739876340506400383036250394919471022197, 21354444752013408991527203716041803392832851588841014790823564527783031812068, 40637590359720631756101950821212066384251755770640449468737583935557545897, 304228256065111465341595114396824176330096899003450390299007497041692078041, 21151253506241730037214008021307237001806313126801305624031661634239557730460, 120468666454760826934618408257990251737086348137219304739400371046851555278, 21432184616009917607269660114506949891222288898806366184877936761055983775547, 21518433259746648670717331844331216366351090502579212557941552317525499248692, 21647739391709647690802008982923383029008210205554608875280491239402655592366, 40964884159568868602122268505814142421304112730977685866577034491435560785, 134281644066644075952295235160147398920909894081157681132255108571974992066, 21691911382121948660240887888667851751942217725501296445477391473357788557231, 21696886004442863450261761150950129663128179474933041610268931151502459731982, 404610463137767168486106082172428680248662411074833208161405963809904656482, 91879772852911984237518509646383898093449686531778472006833239623202058238, 164644178638518845312982181671048221605431573972257798857853361098856857728, 21574973686812103371699961732701920024338479494313547651614704632000563981947, 175245562549033153724892418326575979114467271119590358939154166249244262574, 266796661751086246441058213427294247068745218289871840260809319750822854698, 97183598268319474873784359172567103256595448544293089836817574924407079179, 86576072396373326456075399840772528545065258380973319625452012942335356845, 208817323379001257158570910002768001779019792526753026636949068845966164023, 21082022843605336096552002185742069167530055866640863550830674291014571601566, 21458687219065978677109946072223714604125558224559441365838144304995083419665, 666423492797790993818496611161184796611027378170087972178025157084774543202];
        uint256[] memory s2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "My name is Renaud from ZKNOX!!!!";
        bytes memory salt =
            "\xab\x0b\xae\x31\x63\x39\x89\x43\x04\xe3\x58\x77\xb0\xc2\x8a\x9b\x1f\xd1\x66\xc7\x96\xb9\xcc\x25\x8a\x06\x4a\x8f\x57\xe2\x7f\x2a\x5b\x8d\x54\x8a\x72\x8c\x94\x44";
        bool result = falcon.verify(message, salt, s2, pkc);
        assertEq(true, result);
    }

    function testVector1() public view {
        // public key
        // forgefmt: disable-next-line
        uint256[32] memory tmp_pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];
        uint256[] memory pkc = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            pkc[i] = tmp_pkc[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [21241362652655976118052199738235297379325563254953854226625614987286433836928, 65375368373742722157214948405964137758857493268308077350612892612857888838, 102481097908329645066155600388496319418636965790880552454770268435699728586, 247688367958347251749337001357579512481367309409638275407838209986886643513, 90437200069429427158125921095192088302333716993587210639485685234093392184, 424047932776192299526560151220007938706815957277540503843124559375880695741, 203515600918493380796458559261420530038350127902910870552738821966457548479, 21544936154468057554472235014038110957842133360011428144959465728071147925493, 21633279774780377574883650596281968455988710509682201138221100532534706569223, 49472176253909231867607541964089578932099198737062887170875549484748320594, 196446886639740790448194920598584231368088948356772786367850759287685251231, 21652711884232620729870841695058715550814755646364260060029427447644326199428, 102478294072977625242866455938561081240915409755611054537591354703233626054, 21613844645784636943769898634608591714818373956639699433812510071175034121999, 432884653254941768391848914039078205182145686042362242005180489164058067099, 445575320271567241723645307060722568272703664212263426657696326372162678571, 558652696654923771226662552998569869429154917463958753161753922288706912287, 21559392428289741853787546523632316279010843902692564740108831950166325264518, 21426883405608288618915788387342588926353781352336830399197796994299383590654, 157580488805240532862876267216340492303932205674101754885598981813739520099, 300364081951405736215370224586136005544499828457697163782835287578010976330, 21577067023821837132598008687985064695490659146733394035889456955906746024173, 325106389251761834051311048554344431656621434269107927599198160367009672950, 314499478495748428795885977186008766550868094190669122231985676789937078592, 21647415387051267797314241493180087533922137770971668710580416218381840351453, 441713518655715946745608651902942524707662664110049614148065830299300147156, 37432538058685187264630883247500900822459919514017619833093053468466675835, 321568834888150370892269302975636918525760523818370138911536123960250281754, 21336446475381451033353688457872494954546813289576818032761776234254351216557, 21645645709179260160038781534411079709429751031465681914748658212864096022221, 687303567084482440378524283164525564580336229696693382039363140995221094454, 21617704128886473622812310158531905399220067085899824499312662204774429372385];
        uint256[] memory s2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "My name is Simon also from ZKNOX";
        bytes memory salt =
            "\x91\x89\x90\xff\x93\xe0\x65\x6b\x5f\x75\xb0\x87\x29\xc6\x0e\x6a\x9d\x73\x52\xb9\xef\xd2\xe3\x3e\x3d\x1b\xa6\xe6\xd8\x9e\xdf\xa6\x71\x26\x6e\xce\x6b\xe7\xbb\x5a";
        bool result = falcon.verify(message, salt, s2, pkc);
        assertEq(true, result);
    }

    function testVector2() public view {
        // public key
        // forgefmt: disable-next-line
        uint256[32] memory tmp_pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];
        uint256[] memory pkc = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            pkc[i] = tmp_pkc[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [438507824205089640972760134708744414131363728097035375280221786930953989871, 21285531003446832039593350956309507404085976633276150144249225140095877001190, 21654484209140035008701079162319714036350315974988936192439258742687414497055, 21493697756301234205602557722819002073332163434913530721422544674252713296063, 88345189084196441299202350312682907469442054353667466318248683090904023167, 131077346576497680175392531762192866255282984175791557170003612825933786953, 177006716102298952197215515631230931816430713019631598176121733059394207778, 21491931470392179361849185403183070056916891995365675302296865598533866434483, 86575996411086247850578638715646469170490957207456164809716582462443356214, 7398353581208179950435073878422066241340503694215074625095688495868424165, 21689815403056851679283929301754067295214816133186441796304032186346809470907, 21143863326532942848664576346776875000654350068162263188314303230970255835273, 21345284463049684349984287019173520463422360918611039194855655206364930244803, 21387685848998362512428851950109303451524118142198859295186751114531630743760, 79827377742993167492038892082717440190645404876377345389651954053190910002, 21006048963919857542599672603573653077137398723952501488716014217733555564434, 71004357681219425266644471709000361195628839513403616653375518986849890093, 164319742635801140536255290751507782101535469123595404086134158614306434947, 187287271722403714104755383936057917871433727111616801971907291637556772948, 261494147541663078951383973690473085947874121977953679057550398098029871258, 21246337598522166928773501728619367925035026120158260495005960491691459346562, 454084229946101496349967253456717555131110851464142760327341749176413978703, 611656841511559548937930402449138048059535223414169511081415155544404787391, 240303229999418465356777938309266894947834199388312950338715723097367785417, 35665561100581060717566596353455697854370455026470916878328177684907765659, 21667173280530150913708115996663455508682318479996563194373799457807756361785, 288321914479509591786553347721489190427807492267754991197069668241054051976, 330403474616589437510921568961998693717377268851210253236470113529092779663, 21626210634097993538828199159505421597095588352221066395609467058618145374246, 154040373349537912288959426491500243007795112158426691995424018007345791045, 24739525500446611412211982150199363983364193566776689684469048908890386391, 21384150591197993763280514712855187768498395264345193953194445250749291233610];
        uint256[] memory s2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "My name is Nicolas from ZKNOXtoo";
        bytes memory salt =
            "\x13\x57\x9b\x4e\xf5\xf6\xb6\x42\x65\x63\xd7\x19\x5b\x8c\x5b\x84\x73\x6b\x14\x26\x61\x60\x34\x2c\x40\x93\xf8\xab\xea\x48\x37\x1b\xa9\x4c\xc0\x6d\xcb\x6b\x8a\x8e";
        bool result = falcon.verify(message, salt, s2, pkc);
        assertEq(true, result);
    }

    function testVector3() public view {
        // public key
        // forgefmt: disable-next-line
        uint256[32] memory tmp_pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];
        uint256[] memory pkc = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            pkc[i] = tmp_pkc[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [21650948676788206408616676865061874369357514273323295703176449768972042645469, 21329707728860203642681203613816952039377654493716079924808629148818339868573, 21461896283508779059953341713944897004528682723865672884771780213166886825949, 21448085166106476428974929805984002999594957567360103306882207036040584232994, 21573530283204319440205758420650077351168028205304493779377694947305461591933, 208493161958338545583065282645586504005166413428643258840717522583163764841, 21336445235179810612169260987868823133046066823476118613080379587682576039987, 95418395753705944245569286927238146525615718792237204036978270498968186756, 21276702964070422585158097434604232149622259925288830978111726636009808724022, 222952369479417808052277785113554472621447742038333554651672165772181504093, 21509927374599992022922680669793048770814841703785930581932056358464155615489, 21230439452833164641030680499996212239947872632341540063727044860461860466599, 21391543305108933424208980586531051995211164976735071923121292205229461340199, 184082898268848539135932891312320241270412338676644588650265429376970469113, 21515221710039152440085383355600880574430863747751685829614006623395600269379, 194356093829012125771853365325808205879888760843233078638268147712504889556, 21386245459944567500602771668037512929887473472448225551972338259898784612366, 21260474321206196542825715619530346936076943170172662056288561295455898042681, 176696568891808890194631255202747177623385740378002378688646651043936546798, 21506390930546338503529443465044092526605359604047860638631507704352309837915, 272096038707752631423548632940154510336907236738043123488698761691006697514, 21448087075264057404932834971019133857903875259511892949204072443259297017856, 21555537991767732993204997538959611880667152345823531433193404481213195825041, 254428058285471908470785315102648538821372771242736974212324977590676684955, 155489012158866404720540155613581104913519785611383402870236565887650508718, 21407122487757773312733376952626316216628330683905159910122619191305250537651, 157252898580012441844510532357548576072847784483988654228119714920964161540, 219416873963777270882660375444488109734525576563827612903536788998465793993, 21371787595413627180649517941533775844730683329243424198224942945893884559388, 21437160020157431621225638786832639269381421126105348093148465760808523411252, 554791088752057085206811108615865335091020820847149332673424207379078524795, 56542238443530181087990626603246316151923418550936693168929100171328618607];
        uint256[] memory s2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "We are ZKNox, you already know!!";
        bytes memory salt =
            "\x5a\x54\x83\x5f\x8b\x04\xd4\xc0\xb2\x96\x67\xba\xeb\x0c\x32\x58\x80\x9e\xe6\x98\xdb\xc0\x35\x36\xa1\xc9\x36\xc8\x11\xf6\xe6\xf6\x92\x10\xf5\x63\x20\x80\x06\x49";
        bool result = falcon.verify(message, salt, s2, pkc);
        assertEq(true, result);
    }

    function testVector4() public view {
        // public key
        // forgefmt: disable-next-line
        uint256[32] memory tmp_pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];
        uint256[] memory pkc = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            pkc[i] = tmp_pkc[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [21412424242127082749610191839594829392609335319990662478876364133294951759985, 938197166425361380710370353796599425511229962339559620164675044002097409939, 21647411321071212380761415897307069808958400586121678825154806791311314649193, 21462219969556675763555611051663129394279025351199249323826899476414370939245, 21532570112142586367213716456156282998882970169651536503256279162900785278707, 21601473486094596278097689415768313475766014769988104499793352491966770261860, 150193458487198855960172412486860950466445743917494382397285067450316226641, 63936079761480428901679655785343220182344262444313383981477033448091168724, 21391218793246810542894263058024234198425450067853564400670791803242390892366, 21494022974037990514034492875641587719272379241657474320245997058192701194336, 226157044397558708313848400855036171451956097324768575903477268262834876262, 21566138777573877099557493308809750273628886950442867571793324261757020483552, 773883953089600364097561083085227543243017227910536201641816112224598491361, 21557304056970610111204775034836942486808579572748898192758264058277730004744, 21223371934745051167914669435621300396040813795764848505121538289868127272995, 21557301285044470254816923161326995105145083344818767855254692732795701833612, 358670471364258104760714939225456754161095942466404070493513978650688159835, 328210437288473321774710936334930011045884507386554434481927591059194021, 21157996108003185944232451222500907214109530742953072012336327589114699513996, 21355880957270181049275784779783162902793112397695029577916382944137202905051, 408143289567265176959499044317175596826929427503599671510878281598475436203, 21168594930748873226772498811875707934017541796377192364540189468144969646241, 19435322766729971344933822343177832892069531222182584839246203044511100500, 150511019766944497768812530943806559859096445227616250146176978210900684798, 44499656755767137370694155539619425792158039142667017406186993499424227698, 21359420528678883772827468699927033449515682905127077855108096608968277110567, 21444223072869933784225684209838546304984593361719441611816857423601015521389, 21592968965942438078516618456421132386728252108832191235632804038799762784572, 127214067098599146044102912383538310785919339012842875166013412905288794426, 201747729362989241789380364419493806857510840486777789744138313435815936003, 521222342516545346869170296352098282898180697487366395837698420813812150132, 21384480877498030869454209405815772458304077720102573529957815727485943754618];
        uint256[] memory s2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            s2[i] = tmp_s2[i];
        }
        // message
        bytes memory message = "Practical security on the chain.";
        bytes memory salt =
            "\xc3\xff\x24\xbc\x6b\x6d\x7a\x3d\x30\x7c\xe7\xb1\x73\x1e\x7d\xf5\x96\x90\xd0\x53\x0d\x7f\x2f\x5b\xb9\xed\x37\xd1\x80\x16\x9a\x6c\x1b\xb0\x22\x25\x2a\xb8\xcc\x68";
        bool result = falcon.verify(message, salt, s2, pkc);
        assertEq(true, result);
    }
}
