contract NTT_Iterative {

    //take w 512th root of unity
    uint[512] w = [1, 2401, 544, 7575, 1000, 3985, 3284, 4976, 4591, 3364, 2837, 11244, 7203, 9103, 10530, 11854, 1646, 9140, 10616, 7404, 11563, 9273, 10593, 6022, 11340, 7094, 12171, 390, 9542, 3247, 4890, 9041, 5736, 2704, 11267, 8585, 9326, 420, 10276, 7278, 10938, 2174, 2396, 2912, 790, 11136, 11934, 11796, 3504, 2166, 1381, 10849, 1635, 3136, 4632, 10102, 563, 2305, 11336, 442, 9995, 6957, 5542, 11885, 4043, 1426, 11950, 1537, 12208, 476, 5092, 875, 5023, 9018, 4354, 2481, 9088, 10163, 3694, 10911, 6429, 12286, 7300, 10657, 1853, 9289, 334, 2437, 9650, 10805, 2197, 3778, 3135, 2969, 9558, 5277, 1305, 7351, 9447, 5019, 2366, 2178, 9048, 5088, 6512, 2847, 3296, 354, 11119, 8241, 2548, 9908, 9744, 7370, 4177, 3066, 11112, 8889, 11029, 6039, 2744, 4053, 5767, 5101, 3553, 9919, 3459, 1065, 1479, 1777, 5791, 8146, 4320, 7384, 2881, 10682, 6561, 10600, 5374, 2859, 10963, 6882, 3707, 7952, 1212, 160, 8011, 1017, 7678, 243, 10861, 9302, 9664, 9509, 9813, 11516, 4846, 9603, 6378, 1207, 4134, 5291, 9, 2678, 4896, 6730, 9000, 11287, 4978, 7917, 4452, 5698, 955, 2884, 3382, 8193, 8747, 8374, 2525, 8526, 9521, 5191, 5755, 9723, 9314, 5042, 3748, 2401, 11227, 3510, 12144, 4645, 7143, 7635, 2468, 12047, 3091, 3531, 10200, 3780, 6461, 4057, 130, 7277, 9275, 1630, 7110, 1912, 9094, 7852, 6958, 7205, 140, 11618, 2426, 3646, 4821, 4895, 5067, 8456, 3712, 3978, 3932, 1168, 722, 8653, 11809, 545, 9238, 1544, 11560, 4284, 8961, 7875, 8340, 7428, 2319, 10040, 8058, 5444, 8668, 12176, 8705, 12262, 4255, 9890, 4388, 9867, 3006, 9644, 827, 11222, 7484, 9424, 3637, 2143, 12288, 10626, 11745, 4714, 11289, 8304, 9005, 7313, 7698, 8925, 9452, 1045, 5086, 3186, 1759, 435, 10643, 3149, 1673, 4885, 726, 3016, 1696, 6267, 949, 5195, 118, 11899, 2747, 9042, 7399, 3248, 6553, 9585, 1022, 3704, 2963, 11869, 2013, 5011, 1351, 10115, 9893, 9377, 11499, 1153, 355, 493, 8785, 10123, 10908, 1440, 10654, 9153, 7657, 2187, 11726, 9984, 953, 11847, 2294, 5332, 6747, 404, 8246, 10863, 339, 10752, 81, 11813, 7197, 11414, 7266, 3271, 7935, 9808, 3201, 2126, 8595, 1378, 5860, 3, 4989, 1632, 10436, 3000, 11955, 9852, 2639, 1484, 10092, 8511, 9154, 9320, 2731, 7012, 10984, 4938, 2842, 7270, 9923, 10111, 3241, 7201, 5777, 9442, 8993, 11935, 1170, 4048, 9741, 2381, 2545, 4919, 8112, 9223, 1177, 3400, 1260, 6250, 9545, 8236, 6522, 7188, 8736, 2370, 8830, 11224, 10810, 10512, 6498, 4143, 7969, 4905, 9408, 1607, 5728, 1689, 6915, 9430, 1326, 5407, 8582, 4337, 11077, 12129, 4278, 11272, 4611, 12046, 1428, 2987, 2625, 2780, 2476, 773, 7443, 2686, 5911, 11082, 8155, 6998, 12280, 9611, 7393, 5559, 3289, 1002, 7311, 4372, 7837, 6591, 11334, 9405, 8907, 4096, 3542, 3915, 9764, 3763, 2768, 7098, 6534, 2566, 2975, 7247, 8541, 9888, 1062, 8779, 145, 7644, 5146, 4654, 9821, 242, 9198, 8758, 2089, 8509, 5828, 8232, 12159, 5012, 3014, 10659, 5179, 10377, 3195, 4437, 5331, 5084, 12149, 671, 9863, 8643, 7468, 7394, 7222, 3833, 8577, 8311, 8357, 11121, 11567, 3636, 480, 11744, 3051, 10745, 729, 8005, 3328, 4414, 3949, 4861, 9970, 2249, 4231, 6845, 3621, 113, 3584, 27, 8034, 2399, 7901, 2422, 9283, 2645, 11462, 1067, 4805, 2865, 8652, 10146];
    //inverse power table
    uint[512] wm1=[1, 11813, 8652, 2865, 4805, 1067, 11462, 2645, 9283, 2422, 7901, 2399, 8034, 27, 3584, 113, 3621, 6845, 4231, 2249, 9970, 4861, 3949, 4414, 3328, 8005, 729, 10745, 3051, 11744, 480, 3636, 11567, 11121, 8357, 8311, 8577, 3833, 7222, 7394, 7468, 8643, 9863, 671, 12149, 5084, 5331, 4437, 3195, 10377, 5179, 10659, 3014, 5012, 12159, 8232, 5828, 8509, 2089, 8758, 9198, 242, 9821, 4654, 5146, 7644, 145, 8779, 1062, 9888, 8541, 7247, 2975, 2566, 6534, 7098, 2768, 3763, 9764, 3915, 3542, 4096, 8907, 9405, 11334, 6591, 7837, 4372, 7311, 1002, 3289, 5559, 7393, 9611, 12280, 6998, 8155, 11082, 5911, 2686, 7443, 773, 2476, 2780, 2625, 2987, 1428, 12046, 4611, 11272, 4278, 12129, 11077, 4337, 8582, 5407, 1326, 9430, 6915, 1689, 5728, 1607, 9408, 4905, 7969, 4143, 6498, 10512, 10810, 11224, 8830, 2370, 8736, 7188, 6522, 8236, 9545, 6250, 1260, 3400, 1177, 9223, 8112, 4919, 2545, 2381, 9741, 4048, 1170, 11935, 8993, 9442, 5777, 7201, 3241, 10111, 9923, 7270, 2842, 4938, 10984, 7012, 2731, 9320, 9154, 8511, 10092, 1484, 2639, 9852, 11955, 3000, 10436, 1632, 4989, 3, 5860, 1378, 8595, 2126, 3201, 9808, 7935, 3271, 7266, 11414, 7197, 11813, 81, 10752, 339, 10863, 8246, 404, 6747, 5332, 2294, 11847, 953, 9984, 11726, 2187, 7657, 9153, 10654, 1440, 10908, 10123, 8785, 493, 355, 1153, 11499, 9377, 9893, 10115, 1351, 5011, 2013, 11869, 2963, 3704, 1022, 9585, 6553, 3248, 7399, 9042, 2747, 11899, 118, 5195, 949, 6267, 1696, 3016, 726, 4885, 1673, 3149, 10643, 435, 1759, 3186, 5086, 1045, 9452, 8925, 7698, 7313, 9005, 8304, 11289, 4714, 11745, 10626, 12288, 2143, 3637, 9424, 7484, 11222, 827, 9644, 3006, 9867, 4388, 9890, 4255, 12262, 8705, 12176, 8668, 5444, 8058, 10040, 2319, 7428, 8340, 7875, 8961, 4284, 11560, 1544, 9238, 545, 11809, 8653, 722, 1168, 3932, 3978, 3712, 8456, 5067, 4895, 4821, 3646, 2426, 11618, 140, 7205, 6958, 7852, 9094, 1912, 7110, 1630, 9275, 7277, 130, 4057, 6461, 3780, 10200, 3531, 3091, 12047, 2468, 7635, 7143, 4645, 12144, 3510, 11227, 2401, 3748, 5042, 9314, 9723, 5755, 5191, 9521, 8526, 2525, 8374, 8747, 8193, 3382, 2884, 955, 5698, 4452, 7917, 4978, 11287, 9000, 6730, 4896, 2678, 9, 5291, 4134, 1207, 6378, 9603, 4846, 11516, 9813, 9509, 9664, 9302, 10861, 243, 7678, 1017, 8011, 160, 1212, 7952, 3707, 6882, 10963, 2859, 5374, 10600, 6561, 10682, 2881, 7384, 4320, 8146, 5791, 1777, 1479, 1065, 3459, 9919, 3553, 5101, 5767, 4053, 2744, 6039, 11029, 8889, 11112, 3066, 4177, 7370, 9744, 9908, 2548, 8241, 11119, 354, 3296, 2847, 6512, 5088, 9048, 2178, 2366, 5019, 9447, 7351, 1305, 5277, 9558, 2969, 3135, 3778, 2197, 10805, 9650, 2437, 334, 9289, 1853, 10657, 7300, 12286, 6429, 10911, 3694, 10163, 9088, 2481, 4354, 9018, 5023, 875, 5092, 476, 12208, 1537, 11950, 1426, 4043, 11885, 5542, 6957, 9995, 442, 11336, 2305, 563, 10102, 4632, 3136, 1635, 10849, 1381, 2166, 3504, 11796, 11934, 11136, 790, 2912, 2396, 2174, 10938, 7278, 10276, 420, 9326, 8585, 11267, 2704, 5736, 9041, 4890, 3247, 9542, 390, 12171, 7094, 11340, 6022, 10593, 9273, 11563, 7404, 10616, 9140, 1646, 11854, 10530, 9103, 7203, 11244, 2837, 3364, 4591, 4976, 3284, 3985, 1000, 7575, 544, 1663];

    uint256 constant q = 12289;
    uint256 nm1modq=12265;//512^-1 mod 12289

    // Iterative Radix-2 Decimation-in-Frequency (DIF) (GS) NTT - NR
    // A: input polynomial (standard order)
    // W: nth unity root factor
    // q: modulus
    // B: output polynomial (bit-reversed order)
    function iterativeNTT(uint[] memory A) public view returns(uint[] memory){
        uint256  m = 1;
        uint256 v = A.length;
        while(v>1){
             uint s=v>>1;
            for(uint k=0;k<m;k++)
            {
                uint jf=k*v;
                uint jl = jf + s - 1;
                uint jt = 0;
                for(uint j=jf;j<jl+1;j++){
                    uint TW=(uint)(w[jt]);//w^jt
                    uint temp=A[j];
                    A[j] = addmod(temp , A[j+s],q) ;
                    A[j+s] = addmod(temp, q-mulmod(A[j+s], TW,q),q);//(temp - A[j+s])*TW % q;
                    jt = jt + m;
                }
            }
        m = 2*m;
        v = s;
        }
      return A;
    }

    function yulNTT(uint[] memory A) public view returns(uint[] memory){
        uint256  m = 1;
        uint256 v = A.length;
        uint jf;
        uint jl;
        uint jt;

        while(v>1){
             uint s=v>>1;
            for(uint k=0;k<m;k++)
            {
                jf=k*v;
                jl = jf + s - 1;
                jt = 0;
                for(uint j=jf;j<jl+1;j++){
                    uint TW=(uint)(w[jt]);//w^jt
                    uint temp=A[j];
                    uint Ajpluss=A[j+s];//j+s

                    A[j] = addmod(temp , Ajpluss,q) ;
                    A[j+s] = addmod(temp, q-mulmod(Ajpluss, TW,q),q);//(temp - A[j+s])*TW % q;
                    jt = jt + m;
                }
            }
    }
    }
    /*
 def Radix2_DIT_Iterative_NTT_RN(self,A,W,q):
        N = len(A)
        B = [_ for _ in A]

        v = int(N/2)
        m = 1
        d = 1

        while m<N:
            np = 2*m
            lp = np*(v-1)
            for k in range(m):
                j = k
                jl = k + lp
                jt = k*v
                TW = pow(W,jt,q)
                while j < (jl+1):
                    temp = (TW*B[j+d]) % q
                    B[j+d] = (B[j] - temp) % q
                    B[j]   = (B[j] + temp) % q
                    j = j+np
            v = int(v/2)
            m = 2*m
            d = 2*d

        return B
    */
    //# Iterative Radix-2 Decimation-in-Time (DIT) (CT) NTT - RN
    //# A: input polynomial (bit-reversed order)
    //# W: twiddle factor
    //# q: modulus
    //# B: output polynomial (standard order)
    function iterativeINTT(uint[] memory A) public view returns(uint[] memory){
        uint256  m = 1;
        uint256  d = 1;
        
        uint256 v = A.length>>1;

        while(m<A.length){
            uint np=m<<1;
            uint lp=np*(v-1);
            for(uint k=0;k<m;k++){
                uint j=k;
                uint jl=k+lp;
                uint jt=k*v;
                uint TW=(uint)(wm1[jt]);
                while(j<(jl+1)){
                    uint temp=mulmod(TW,A[j+d],q);
                    A[j+d] = addmod(A[j],q - temp,q) ;
                    A[j]   = addmod(A[j] , temp,q) ;
                    j=j+np;
                }
            }
            v = v>>1;
            m = 2*m;
            d = 2*d;
        }

        for(uint i=0;i<A.length;i++){
            A[i]=mulmod(A[i],nm1modq, q);
        }
        return A;
    }


//Vectorized modular multiplication 
//Multiply chunk wise vectors of 512 chunks modulo 12289
function modmulx512(
        uint[] memory a,
        uint[] memory b
    ) public view returns (uint[] memory) {
        assert(a.length == b.length);
        uint[] memory res = new uint[](a.length);
        for (uint i = 0; i < a.length; i++) {
            res[i] = mulmod(a[i], b[i], q);
        }
        return res;
    }

//multiply two polynomials over Zq in standard canonical representation
function mul_NTTPoly(
       uint[] memory a,
       uint[] memory b
    ) public view returns (uint[] memory){
         return (iterativeINTT(modmulx512(iterativeNTT(a), iterativeNTT(b))));
    }

//multiply two polynomials over Zq a being in standard canonical representation, b in ntt representation
function mul_halfNTTPoly(
       uint[] memory a,
       uint[] memory b
    ) public view returns (uint[] memory){
         return (iterativeINTT(modmulx512(iterativeNTT(a), b)));
    }
 


}