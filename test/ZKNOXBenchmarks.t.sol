// code generated using pythonref/generate_hashtopoint_test_vectors.py.
pragma solidity ^0.8.25;

import {Test, console} from "forge-std/Test.sol";
import "../src/ZKNOX_HashToPoint.sol";
import "../src/ZKNOX_falcon.sol";
import "../src/ZKNOX_ethfalcon.sol";
import "../src/ZKNOX_NTT.sol";

contract Benchmark is Test {
    ZKNOX_falcon falcon;
    ZKNOX_ethfalcon ethfalcon;
    ZKNOX_NTT ntt;

    // forgefmt: disable-next-line
	uint256[]  f = [9999, 7085, 6820, 8778, 6376, 3654, 751, 8032, 9000, 7804, 1199, 698, 11321, 9441, 11590, 1244, 4515, 10616, 6860, 441, 6800, 11579, 4591, 5953, 10392, 4264, 2672, 10279, 1124, 2490, 3242, 6344, 5052, 1585, 4677, 3186, 4500, 6989, 439, 2822, 12191, 8937, 1146, 10412, 9422, 8183, 6233, 12110, 10972, 7139, 4359, 5441, 171, 7485, 579, 7478, 8148, 523, 8046, 11529, 5261, 11343, 478, 11537, 8707, 1510, 4800, 3705, 6474, 8752, 10907, 5380, 2680, 2901, 8837, 174, 7393, 11327, 3000, 2962, 10762, 7159, 8732, 7335, 11165, 6400, 12254, 437, 7048, 763, 4495, 1246, 6650, 5548, 3303, 2931, 4471, 5342, 1372, 3210, 11499, 8447, 2992, 1331, 9795, 4331, 11998, 10437, 256, 8575, 3680, 8881, 11551, 8194, 5884, 8706, 209, 6116, 8410, 1267, 12001, 12014, 3395, 10985, 9744, 4718, 2837, 253, 5994, 10098, 1209, 1776, 3579, 11570, 3584, 8590, 2377, 5086, 6065, 4455, 8477, 11240, 1822, 3409, 8505, 210, 753, 11201, 5575, 8074, 5896, 4296, 186, 9500, 1067, 7082, 373, 6179, 2421, 3628, 8590, 11689, 6489, 6551, 8331, 10160, 1585, 8286, 799, 10449, 8457, 11846, 5133, 10416, 11189, 8187, 8623, 10356, 11588, 2870, 5605, 6259, 1407, 2593, 6225, 7484, 9443, 6445, 3625, 9208, 2332, 431, 11337, 9534, 6147, 5040, 545, 11742, 6332, 6725, 6040, 3370, 7499, 4852, 2916, 808, 9664, 10995, 10026, 12143, 8422, 2811, 3387, 10, 2568, 5567, 7382, 2162, 8864, 11244, 3273, 6476, 4174, 12066, 2462, 1188, 4064, 4948, 4334, 3219, 9572, 9314, 672, 4486, 9624, 4458, 11150, 804, 7908, 1939, 6524, 3338, 4090, 11839, 3566, 4053, 5510, 1824, 3590, 4512, 7475, 6840, 6576, 3581, 4794, 1295, 5474, 7370, 10342, 11576, 6954, 9507, 6341, 7708, 8462, 623, 10455, 1541, 1594, 3792, 8428, 5141, 6225, 7364, 11122, 6508, 2612, 11177, 5824, 2083, 6083, 11117, 11272, 3482, 1941, 9261, 11511, 1737, 11921, 8655, 11129, 8438, 4302, 3417, 5024, 11466, 11899, 9353, 7791, 9025, 7296, 4018, 10424, 7731, 11727, 6659, 2313, 8413, 683, 65, 2686, 4672, 9454, 329, 8409, 4128, 6098, 8959, 483, 8285, 7679, 8206, 11528, 830, 9903, 4553, 1983, 2615, 5720, 7285, 5117, 11315, 6235, 9229, 5817, 8071, 8875, 7024, 8567, 6100, 10668, 205, 7304, 281, 12242, 9947, 1653, 9104, 3412, 6728, 4368, 1804, 6962, 10170, 7739, 3254, 10975, 12197, 1218, 1816, 5613, 313, 7621, 594, 5447, 12164, 8562, 10386, 6368, 9309, 8303, 7136, 7366, 5550, 8623, 4376, 6385, 4930, 3184, 10000, 8112, 8324, 3566, 6386, 10547, 108, 95, 3433, 757, 2675, 8604, 7700, 3169, 4135, 272, 10108, 3674, 4476, 3684, 2662, 12105, 4869, 4321, 10208, 5599, 4868, 9853, 7446, 7440, 4281, 7633, 10743, 5528, 11175, 1841, 1030, 6640, 3909, 274, 1231, 2112, 5318, 8734, 9417, 10719, 10515, 10507, 151, 9255, 5479, 7751, 9110, 10075, 712, 6244, 2837, 6071, 3809, 12200, 6716, 5507, 10742, 5016, 2999, 5379, 8065, 4024, 10958, 8328, 5454, 10131, 6814, 5121, 4739, 132, 11121, 6487, 8948, 3515, 8429, 3096, 3514, 11468, 7402, 3186, 7126, 6968, 9720, 6853, 8190, 7780, 7266, 3759, 6383, 3490, 1828, 4248, 5327, 4740, 9462, 8450, 10998, 6238, 11283, 6074, 8314, 11629, 11905, 10089, 12099, 3489, 2352, 8721, 416, 8068, 8319, 213, 5593, 4978, 2617, 3447, 11486, 5677, 10457, 4227, 209, 6519, 639, 5568, 7873, 11843, 11108];
    // forgefmt: disable-next-line
    uint256[] pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];

    function setUp() public {
        // bytes32 salt = keccak256(abi.encodePacked("ZKnox"));
        falcon = new ZKNOX_falcon();
        ethfalcon = new ZKNOX_ethfalcon();
        ntt = new ZKNOX_NTT(address(0), address(0), 12289, 12265);
    }

    function testBenchmarkNTT() public view {
        // a NTT of a polynomial of degree 512
        uint256[] memory g = ntt.ZKNOX_NTTFW(f, q);
        g[0] = 0; // warning removal
    }

    function testBenchFalconCore() public view {
        // verify the core algorithm of Falcon
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [21299671975787483454790402018496259712325154098698828370862796902048963440524, 226482644561092801897613003311591793491464477287443953390217386369311322015, 122241768215234212762829461233206915525091542269434133652196666067046117266, 17998600124730622827465990899026975431920967581729901424009026369714323515, 21156552726390114447912652470199481904643883857534790873521589824973084372941, 166414638319359694539675323431761741043307735201951903340794358417336827986, 21451614924126190838060080098931214529037792752475566277715416002725544210312, 21619468086225573149428575687681504604739876340506400383036250394919471022197, 21354444752013408991527203716041803392832851588841014790823564527783031812068, 40637590359720631756101950821212066384251755770640449468737583935557545897, 304228256065111465341595114396824176330096899003450390299007497041692078041, 21151253506241730037214008021307237001806313126801305624031661634239557730460, 120468666454760826934618408257990251737086348137219304739400371046851555278, 21432184616009917607269660114506949891222288898806366184877936761055983775547, 21518433259746648670717331844331216366351090502579212557941552317525499248692, 21647739391709647690802008982923383029008210205554608875280491239402655592366, 40964884159568868602122268505814142421304112730977685866577034491435560785, 134281644066644075952295235160147398920909894081157681132255108571974992066, 21691911382121948660240887888667851751942217725501296445477391473357788557231, 21696886004442863450261761150950129663128179474933041610268931151502459731982, 404610463137767168486106082172428680248662411074833208161405963809904656482, 91879772852911984237518509646383898093449686531778472006833239623202058238, 164644178638518845312982181671048221605431573972257798857853361098856857728, 21574973686812103371699961732701920024338479494313547651614704632000563981947, 175245562549033153724892418326575979114467271119590358939154166249244262574, 266796661751086246441058213427294247068745218289871840260809319750822854698, 97183598268319474873784359172567103256595448544293089836817574924407079179, 86576072396373326456075399840772528545065258380973319625452012942335356845, 208817323379001257158570910002768001779019792526753026636949068845966164023, 21082022843605336096552002185742069167530055866640863550830674291014571601566, 21458687219065978677109946072223714604125558224559441365838144304995083419665, 666423492797790993818496611161184796611027378170087972178025157084774543202];
        uint256[] memory s2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            s2[i] = tmp_s2[i];
        }
        // forgefmt: disable-next-line
        uint256[512] memory _hashed = [uint256(4643), 8890, 7599, 3818, 3920, 156, 1149, 8934, 2177, 8085, 3571, 5176, 6195, 2666, 3782, 1481, 9991, 1314, 6137, 9729, 10248, 1211, 7215, 6779, 4329, 285, 5149, 4641, 5853, 4677, 10238, 10810, 12061, 8024, 547, 9764, 11118, 4432, 1206, 9724, 12243, 3217, 1119, 9214, 9297, 9115, 5399, 2488, 159, 9702, 12203, 11928, 2696, 9069, 2892, 1436, 7397, 9593, 3074, 2929, 3722, 3847, 4011, 7200, 7563, 2968, 6857, 272, 10484, 7628, 3326, 2629, 5481, 4177, 2713, 6396, 2392, 5669, 6300, 11422, 4572, 4440, 3638, 562, 7443, 5049, 1336, 923, 6322, 9624, 7510, 5699, 10217, 11982, 2092, 1242, 8500, 3854, 6752, 4606, 2039, 8910, 8149, 11253, 1588, 4729, 9885, 2526, 3485, 2216, 6910, 2091, 10835, 6624, 1778, 1195, 9435, 3681, 11191, 10268, 195, 4677, 2600, 1128, 5404, 5380, 9977, 1839, 6141, 4549, 8937, 2473, 7771, 7985, 1914, 10772, 3445, 3364, 11784, 4657, 2323, 8788, 2472, 4769, 3011, 8595, 3074, 1892, 6376, 3904, 3446, 7516, 4415, 10366, 9636, 11954, 11878, 3180, 11109, 5140, 6362, 6127, 3822, 8578, 2859, 2387, 9325, 3062, 605, 10202, 8984, 2613, 3375, 5895, 6762, 192, 7622, 8228, 2938, 4234, 1018, 4259, 9378, 10922, 11652, 9530, 9314, 12124, 6133, 11593, 11858, 9038, 1367, 1436, 5660, 3774, 11685, 5890, 5036, 11295, 4455, 3855, 8347, 7870, 4321, 2915, 10110, 6989, 12087, 2667, 6395, 6842, 6468, 3482, 5386, 1876, 5795, 5000, 4194, 1668, 136, 11289, 8610, 4883, 11046, 9285, 3780, 10377, 4139, 4213, 4989, 6218, 908, 2395, 8042, 3832, 6410, 4365, 1574, 10695, 10425, 1778, 3156, 2475, 5593, 6396, 10559, 8645, 5170, 4844, 759, 6009, 7843, 5304, 8342, 8425, 11498, 5621, 10536, 11707, 11507, 1208, 11843, 6613, 9824, 1545, 5848, 917, 1781, 4129, 3054, 1140, 9875, 8446, 3651, 607, 10838, 5784, 5525, 5344, 2376, 8152, 7705, 5265, 6002, 8928, 2477, 201, 4861, 9317, 9587, 8528, 2301, 12104, 8797, 5737, 10792, 2983, 8754, 11072, 11951, 1319, 9808, 4398, 4209, 1498, 10667, 4630, 1844, 7433, 1903, 5552, 11065, 9401, 7713, 4533, 10525, 10555, 1364, 3297, 2995, 12002, 9199, 3805, 11585, 11133, 8717, 7370, 7154, 9828, 9518, 11217, 3095, 11110, 3330, 5230, 2807, 7888, 3313, 11804, 8944, 4971, 7036, 10781, 5117, 4554, 2957, 10934, 2954, 1881, 4816, 4556, 8442, 5080, 5897, 1248, 9823, 1271, 1577, 2341, 3133, 6588, 8798, 5466, 2465, 2429, 10531, 7561, 9941, 4334, 716, 5606, 8928, 9566, 4675, 533, 5409, 1384, 1624, 3916, 6110, 3631, 787, 9276, 644, 3279, 10623, 8724, 293, 12108, 5, 3878, 9924, 7676, 3866, 11394, 8104, 78, 1641, 10334, 4568, 984, 7328, 5142, 10013, 8221, 7457, 4188, 1112, 9472, 819, 6785, 1064, 5617, 10254, 1028, 4622, 5498, 9294, 3685, 2143, 5292, 4317, 11731, 5047, 6368, 158, 832, 1242, 6384, 6926, 2302, 5521, 2676, 11311, 7986, 3152, 2622, 7745, 7942, 3125, 10401, 4920, 3832, 6122, 10299, 2418, 7563, 7429, 3658, 818, 3972, 10763, 8486, 4864, 9401, 6514, 8531, 2133, 9360, 1175, 3871, 8258, 3723, 11227, 2871, 550, 7585, 7780, 1988, 6916, 3820, 1291, 8115, 4404, 11804, 10995, 200, 10546, 10324, 11567, 2950, 7969, 3232, 3366, 8458, 12075, 11551, 6115, 5759, 8152, 5996, 6451, 10922, 9977, 6001, 2342, 10608, 10661, 4679, 12055, 10269, 3864, 10006, 7852, 9161, 9654, 9147, 8081, 5935, 7014, 5112];
        uint256[] memory hashed = new uint256[](512);
        for (uint256 i = 0; i < 512; i++) {
            hashed[i] = _hashed[i];
        }
        bool result = falcon_core(s2, pkc, hashed);
        assertEq(true, result);
    }

    // function testBenchSHA256() public view {
    //     // todo
    // }

    // function testBenchKeccak() public view {
    //     // todo
    // }

    // function testBenchHashToPointNIST() public view {
    //     // todo
    // }

    // function testBenchHashToPointRIP() public view {
    //     // todo
    // }

    function testBenchVerifyNIST() public view {
        // a verificaiton of Falcon signature
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [21241362652655976118052199738235297379325563254953854226625614987286433836928,65375368373742722157214948405964137758857493268308077350612892612857888838,102481097908329645066155600388496319418636965790880552454770268435699728586,247688367958347251749337001357579512481367309409638275407838209986886643513,90437200069429427158125921095192088302333716993587210639485685234093392184,424047932776192299526560151220007938706815957277540503843124559375880695741,203515600918493380796458559261420530038350127902910870552738821966457548479,21544936154468057554472235014038110957842133360011428144959465728071147925493,21633279774780377574883650596281968455988710509682201138221100532534706569223,49472176253909231867607541964089578932099198737062887170875549484748320594,196446886639740790448194920598584231368088948356772786367850759287685251231,21652711884232620729870841695058715550814755646364260060029427447644326199428,102478294072977625242866455938561081240915409755611054537591354703233626054,21613844645784636943769898634608591714818373956639699433812510071175034121999,432884653254941768391848914039078205182145686042362242005180489164058067099,445575320271567241723645307060722568272703664212263426657696326372162678571,558652696654923771226662552998569869429154917463958753161753922288706912287,21559392428289741853787546523632316279010843902692564740108831950166325264518,21426883405608288618915788387342588926353781352336830399197796994299383590654,157580488805240532862876267216340492303932205674101754885598981813739520099,300364081951405736215370224586136005544499828457697163782835287578010976330,21577067023821837132598008687985064695490659146733394035889456955906746024173,325106389251761834051311048554344431656621434269107927599198160367009672950,314499478495748428795885977186008766550868094190669122231985676789937078592,21647415387051267797314241493180087533922137770971668710580416218381840351453,441713518655715946745608651902942524707662664110049614148065830299300147156,37432538058685187264630883247500900822459919514017619833093053468466675835,321568834888150370892269302975636918525760523818370138911536123960250281754,21336446475381451033353688457872494954546813289576818032761776234254351216557,21645645709179260160038781534411079709429751031465681914748658212864096022221,687303567084482440378524283164525564580336229696693382039363140995221094454,21617704128886473622812310158531905399220067085899824499312662204774429372385];
        uint256[] memory s2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            s2[i] = tmp_s2[i];
        }
        bytes memory message =
            "\x4d\x79\x20\x6e\x61\x6d\x65\x20\x69\x73\x20\x53\x69\x6d\x6f\x6e\x20\x61\x6c\x73\x6f\x20\x66\x72\x6f\x6d\x20\x5a\x4b\x4e\x4f\x58";
        bytes memory salt =
            "\x91\x89\x90\xff\x93\xe0\x65\x6b\x5f\x75\xb0\x87\x29\xc6\x0e\x6a\x9d\x73\x52\xb9\xef\xd2\xe3\x3e\x3d\x1b\xa6\xe6\xd8\x9e\xdf\xa6\x71\x26\x6e\xce\x6b\xe7\xbb\x5a";
        bool result = falcon.verify(message, salt, s2, pkc);
        assertEq(true, result);
    }

    function testBenchVerifyRIP() public view {
        // a verification of ETHFalcon signature
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [21299671975787483454790402018496259712325154098698828370862796902048963440524,226482644561092801897613003311591793491464477287443953390217386369311322015,122241768215234212762829461233206915525091542269434133652196666067046117266,17998600124730622827465990899026975431920967581729901424009026369714323515,21156552726390114447912652470199481904643883857534790873521589824973084372941,166414638319359694539675323431761741043307735201951903340794358417336827986,21451614924126190838060080098931214529037792752475566277715416002725544210312,21619468086225573149428575687681504604739876340506400383036250394919471022197,21354444752013408991527203716041803392832851588841014790823564527783031812068,40637590359720631756101950821212066384251755770640449468737583935557545897,304228256065111465341595114396824176330096899003450390299007497041692078041,21151253506241730037214008021307237001806313126801305624031661634239557730460,120468666454760826934618408257990251737086348137219304739400371046851555278,21432184616009917607269660114506949891222288898806366184877936761055983775547,21518433259746648670717331844331216366351090502579212557941552317525499248692,21647739391709647690802008982923383029008210205554608875280491239402655592366,40964884159568868602122268505814142421304112730977685866577034491435560785,134281644066644075952295235160147398920909894081157681132255108571974992066,21691911382121948660240887888667851751942217725501296445477391473357788557231,21696886004442863450261761150950129663128179474933041610268931151502459731982,404610463137767168486106082172428680248662411074833208161405963809904656482,91879772852911984237518509646383898093449686531778472006833239623202058238,164644178638518845312982181671048221605431573972257798857853361098856857728,21574973686812103371699961732701920024338479494313547651614704632000563981947,175245562549033153724892418326575979114467271119590358939154166249244262574,266796661751086246441058213427294247068745218289871840260809319750822854698,97183598268319474873784359172567103256595448544293089836817574924407079179,86576072396373326456075399840772528545065258380973319625452012942335356845,208817323379001257158570910002768001779019792526753026636949068845966164023,21082022843605336096552002185742069167530055866640863550830674291014571601566,21458687219065978677109946072223714604125558224559441365838144304995083419665,666423492797790993818496611161184796611027378170087972178025157084774543202
        ];
        uint256[] memory s2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            s2[i] = tmp_s2[i];
        }
        bytes memory message =
            "\x4d\x79\x20\x6e\x61\x6d\x65\x20\x69\x73\x20\x52\x65\x6e\x61\x75\x64\x20\x66\x72\x6f\x6d\x20\x5a\x4b\x4e\x4f\x58\x21\x21\x21\x21";
        bytes memory salt =
            "\xab\x0b\xae\x31\x63\x39\x89\x43\x04\xe3\x58\x77\xb0\xc2\x8a\x9b\x1f\xd1\x66\xc7\x96\xb9\xcc\x25\x8a\x06\x4a\x8f\x57\xe2\x7f\x2a\x5b\x8d\x54\x8a\x72\x8c\x94\x44";
        bool result = ethfalcon.verify(message, salt, s2, pkc);
        // assertEq(true, result);
        // ISSUE WITH PK???
    }
}
