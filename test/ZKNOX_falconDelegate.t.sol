// SPDX-License-Identifier: MIT
pragma solidity ^0.8.25;

import "../src/ZKNOX_IVerifier.sol";
import "../src/ZKNOX_delegate.sol";

import "../src/ZKNOX_falcon_compact.sol";
import "../src/ZKNOX_falcon_deploy.sol";

import {console, Test} from "forge-std/Test.sol";

import "forge-std/Vm.sol";

//simple ERC20 for the demonstration
contract ERC20 {
    address public minter;
    mapping(address => uint256) private _balances;

    constructor(address _minter) {
        minter = _minter;
    }

    function mint(uint256 amount, address to) public {
        _mint(to, amount);
    }

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    function _mint(address account, uint256 amount) internal {
        require(msg.sender == minter, "ERC20: msg.sender is not minter");
        require(account != address(0), "ERC20: mint to the zero address");
        unchecked {
            _balances[account] += amount;
        }
    }

    function _acknowledge(bytes memory data) public pure returns (string memory res) {
        return string(abi.encodePacked(data, "\n was successfully signed!"));
    }
}

contract SignDelegationTest is Test {
    // Alice's address and private key (EOA with no initial contract code).
    address payable ALICE_ADDRESS = payable(0x70997970C51812dc3A010C7d01b50e0d17dc79C8);
    uint256 constant ALICE_PK = 0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d;

    // Bob's address and private key (Bob will execute transactions on Alice's behalf).
    address constant BOB_ADDRESS = 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC;
    uint256 constant BOB_PK = 0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a;

    // The contract that Alice will delegate execution to.
    ZKNOX_Verifier public implementation;
    ZKNOX_falcon_compact public falcon;

    // ERC-20 token contract for minting test tokens.
    ERC20 public token;

    function setUp() public {
        // Deploy the delegation contract (Alice will delegate calls to this contract).
        implementation = new ZKNOX_Verifier();
        falcon = new ZKNOX_falcon_compact();
        // public key in ntt form
        // forgefmt: disable-next-line
        uint256[32] memory tmp_pkc=[uint256(9807818718891730533966615164509575764017151053524099258423976834772553965140),18340098138125467691447337077959785268149994316939452976998993957504853156265,5198133703327284157071422809205815024336408019642137871855761911766001193757,885309680723773951581445950479448442138188963959751701993810286786334563851,19751655564167833205324936936214418086799632798155386652828683172706408935156,13449342659324330278443856651216754520591114337785977560380735844903743330507,21412685081650650572110719760616900735599281269400856811705495088893808813464,7182455876228287393000419492025555097227813236263190704105821148459893329094,10346702731445215087289400465904665036614373649415073766421551882524955579599,2602661461191686318241399797978336432747493635009153906211421228123447493354,17460152192629988224191839342813524149690975760517934797656766276578763941977,8030501380784039896959436505501001505082538439109709855711095179607370313313,1869334252111587522914549075648788783845949858255579782083590402809098144636,17244605423862552671483849252199675991941590481856488840270787535924580718702,11336265795525104660827282529254071061160673084427642199020414766362588092858,7834392541464967164445071157396824232455621343468123833119795953667476294495,19320749074383776626289869794062002119037822327089474229301777373758894647631,15804769950401279065265498737970159234892108086909038079651927057616326110849,5524941774629792613265643604106102575196474389604272009945361978094039402215,7912189081096546922096985544357356245951107957167270713824777693799477413938,9251517013408700470756725384748473476160720415021619476382719063671064631329,980629886819687668154444089811786886341348988887074213615781934824155389444,5940413397816454703448409408340853562548545866597888595192275835122337254858,3477241430632946704913201778186656752154449432278581298631128816987460934160,19684655324690250642900619926419342622662744597902662173890575167707890264962,21136817025198787960771334147393601715672137869525072998232149469960570804861,715695489957163697708304262996430301414652155424663974257962371003055997411,779487062625276624243092988713096201766390140956957709636694708471170673149,18108615907818392958604720912508457986590141052566906373861374637494342583430,4888923900533397196030088094647918125568719406578813186855259309838660932599,20133355404703468652353168553951350193203296046835794955257435485399706185274,6958150576137026963644397829477422234280792505821200919066265083919800276574];
        uint256[] memory pkc = ZKNOX_memcpy32(tmp_pkc);
        uint256 iAlgoID = FALCONSHAKE_ID;

        address a_psirev;
        address a_psiInvrev;
        bytes32 salty = keccak256(abi.encodePacked("ZKNOX_v0.14"));
        (a_psirev, a_psiInvrev) = Deploy(salty);
        falcon.update(a_psirev, a_psiInvrev); //update falcon with precomputed tables

        ZKNOX_Verifier Verifier_logic = new ZKNOX_Verifier{salt: salty}();

        address iVerifier_algo = address(falcon);
        address iPublicKey = DeployPolynomial(salty, pkc);

        bytes memory initData =
            abi.encodeWithSignature("initialize(uint256,address,address)", iAlgoID, iVerifier_algo, iPublicKey); //uint256 iAlgoID, address iVerifier_logic, address iPublicKey

        ZKNOX_Verifier_Proxy proxy = new ZKNOX_Verifier_Proxy(address(Verifier_logic), initData);

        ZKNOX_Verifier Verifier = ZKNOX_Verifier(address(proxy));

        // Deploy an ERC-20 token contract where Alice is the minter.
        token = new ERC20(ALICE_ADDRESS);
    }

    function testSignAndAttachDelegation() public {
        // Construct a single transaction call: Mint 100 tokens to Bob.
        //SimpleDelegateContract.Call[] memory calls = new SimpleDelegateContract.Call[](1);
        bytes memory data = abi.encodeCall(ERC20.mint, (100, BOB_ADDRESS));
        //0x94bf804d00000000000000000000000000000000000000000000000000000000000000640000000000000000000000003c44cdddb6a900fa2b585dd299e03d12fa4293bc
        console.log("payload");
        console.logBytes(data);
        
        uint256[32] memory PK = [20377218425118340445148364134355217251962993606936992273331839780054216280849, 20121106827228450321124896615938334719918113760150351437528659189176262990636, 10067497595444039977213793634597611854404700659079271442444950951559432116521, 8117003418140413121709569530562717039471558017795389997976077490386494167285, 19719916617578783495479977733846345663822541355599584111604787561804371332299, 12011255695358364119082992510081379197681548345148896992583517862986064267371, 1413712800155248155901989741415704580119744515670156265477932184210522442954, 20205896941262413308936850117551422118594142119900192427257346204109575433582, 3486279541225130755598501027003998051985801747561740177288468626060198090459, 15477599456049069393051346514952035991054078301113692636739851820730251809819, 21156392022423827010876847021244058034030321298933336763476969617428294271271, 2908341131797448574919302622375649436059983246466303686691800726354050296280, 4014285105619800009931504325676093765338451832744274077688243007139640906463, 17525386234073442601006363277175078033276096227970594283065994928074709206070, 9399682681199319758356271164177409471029167726563817053939019373865509324066, 14497266053893643950060558685941531408969726991430751449270004178102628913394, 20001018922134128765022849593872125843127919031255693298563962888117505231302, 20223399471737868067964408671262891234552388541376818065834177454291358723391, 11076429199706617732593752467897544427206591530047673604493842949459150906661, 10003914827585439734433133640025401879385317162577084551224105445404031001782, 20818841785974240140489196577114322827962289517719106191109136290716168037702, 9930008312479770233251082269305959959461466299666759427058224003186584853639, 13961923764749961571138036653552925829425897028586292322709756121414948556716, 1865847632959804051511238296007895164923970314748517688837335778369740540589, 9619029050213147645610307806665071441731316717663787766260527940528214317525, 14242850992292404983847270889619711734347852346434510691917062411771622728876, 14741088360075140317883502213566092308263093099494020005957065598182206670698, 450741599221347172965973222014483009289616792068532398266398440365899262013, 18781682460599299134542238039348179607304289110944838378016618837639364477280, 9945663145577743462232497392336568635199398547866845488457561121052707133988, 4434915596203863112439022225522412087141907977885194617923870370615952742502, 9078099396363096043342272050200561246179429816170715912419583083116430298211];
        uint256[32] memory S2 = [21366485279839228637329681539091892252155860224281938697456311090761868652240, 21571437188985905745104313226081733847439823021515049317804604950614770527949, 21055845975454873989154648528638078207619203348638539414400699484654197014565, 316592653787426149402818432480311632066824839694483080675712800313570689077, 21341752031119283939127308937799262154187650745601388636309765841760146829069, 21259034196740970160556437673438820063233713742844313486551601075514199245080, 459709471774843633340367982640165352781796422498128295308853088749997129761, 337470835849113894083005729218920003592399448587723401567061025652942974795, 809221239822160854612354808520895560640307332773687010399570435204481220695, 21251964705563309583128895139000362686707536750279835108253469454353780113494, 20951597555191838461638561817672753919619539290087562573169987469398309404697, 256204125639257747790709625934577788311755945964314516052469131709670555867, 21516988481125226509850793167378474784162551615150643227013734505756375449628, 21325845096371995827221792515473347576736391207869481001959691503484070932325, 196130058311894716047137072170011923944998669650973108206949153207942000587, 21645970037331906207842058793739765135551221386493945007662962043965198315454, 180219888430731700216182994531401414109891245694612006641229939739618520596, 21615937093053525442156867025169576823857762591800792574476037907892172357707, 501786103148241701210735349267841123527624247374652548449644052101361774526, 21401818953985086758012864205006651613216043327473550920218255528409672462237, 25064937049927619562589038219702445271437457662581424016143019637413916658, 431113977913938320150080304031649296221728002602786587672035722114576887627, 14141894039250735949362267763818831589371456812139557498545153334223450093, 63936650821908833994698423462198996602149059357794411844263106695531659350, 517689964479223418400275811839212965613668819359237878715523693878499934307, 16229052266918794923599236082129914549733603442281962039745529394920304559, 21529032001548731999701459725564183076493699238446830647758961453958655193004, 154044530134293357333020632545180970667270566253938460991432552811328515842, 21059054106164675976170803849490707659431321802211257940840071249126375436011, 153718444635435809452458158812391065353417878614944124340983089948207820730, 21707808503368020255081321384626986232582032464194582906622331632394028068842, 21640669792740255549213253191759811721947113203478440575722096041534153031917];
        //uint256 SALT = 0x97facefb1d784850cbfcf1a2b8c5d4fb37d1a772501b1343770854f7ec4c89a71d625e547e12e620;

        uint256 nonce=0;
        //./sign_cli.py sign_tx --data=0x94bf804d00000000000000000000000000000000000000000000000000000000000000640000000000000000000000003c44cdddb6a900fa2b585dd299e03d12fa4293bc --privkey=private_key.pem --version='falcon' --nonce=0 --to=0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC --value=0 --pubkey=public_key.pem

        bytes32 digest = keccak256(abi.encode(nonce, 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC, data, 0));
        uint256 TX_HASH_expected = 0x23c2043782d896834c01c5b1a56d97fc0376d3559421238d230b0a8c83c644a3;
        console.log("digest=%x");
        console.log("%x",uint256(digest));

        assertEq(TX_HASH_expected, uint256(digest));
        
        //calls[0] = SimpleDelegateContract.Call({to: address(token), data: data, value: 0});

        // Alice signs and attaches the delegation in one step (eliminating the need for separate signing).
        vm.signAndAttachDelegation(address(implementation), ALICE_PK);

        // Verify that Alice's account now temporarily behaves as a smart contract.
        bytes memory code = address(ALICE_ADDRESS).code;
        require(code.length > 0, "no code written to Alice");

        // As Bob, execute the transaction via Alice's temporarily assigned contract.
        vm.broadcast(BOB_PK);

        //Verifier.transact(address(token), data, 0 ); the goal, when we have the signer

        // Verify Bob successfully received 100 tokens.
        //vm.assertEq(token.balanceOf(BOB_ADDRESS), 100);
    }
}
