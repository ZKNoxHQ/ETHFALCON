from falcon import HEAD_LEN, SALT_LEN, Params, decompress, SecretKey, PublicKey
from polyntt.poly import Poly
from common import q
from scripts.sign_KAT import sign_KAT
from keccaxof import KeccaXOF

n = 512
"""
f = sign_KAT[n][0]["f"]
g = sign_KAT[n][0]["g"]
F = sign_KAT[n][0]["F"]
G = sign_KAT[n][0]["G"]
sk = SecretKey(n, [f, g, F, G])
pub = PublicKey(sk)

# Check hash_to_point on the test vector of Tetration: message = "def", salt = "abc"
expected_hash = [7373, 883, 5550, 2322, 8580, 11319, 1037, 9708, 7159, 4158, 683, 1120, 9948, 11269, 790, 6252, 2698, 12217, 3596, 1819, 10441, 8257, 3040, 5573, 5213, 5150, 6123, 4363, 10505, 3359, 363, 10882, 4000, 3996, 2150, 6823, 8209, 10781, 11953, 397, 10576, 5527, 239, 7733, 8493, 3126, 3301, 10385, 7235, 8080, 1175, 6491, 11269, 3618, 3479, 1771, 406, 5245, 9874, 10195, 6777, 5908, 10147, 2321, 71, 5157, 6106, 9459, 7587, 7005, 10808, 9396, 6657, 10692, 11888, 10688, 9776, 6123, 11708, 6919, 1184, 3832, 4832, 6274, 5330, 7664, 9929, 4401, 8412, 7710, 1733, 8158, 8469, 10972, 8546, 10418, 1032, 5926, 6686, 1606, 2094, 6147, 4268, 2856, 9724, 8827, 2276, 327, 364, 3546, 5060, 38, 6461, 7825, 11703, 10229, 586, 6232, 5538, 8703, 9068, 1751, 1261, 10886, 8971, 10072, 4803, 12269, 11905, 1677, 168, 2793, 2446, 5598, 8609, 4471, 10206, 1457, 3344, 2115, 6331, 11897, 1509, 8496, 12033, 3422, 10769, 11981, 6746, 7141, 94, 5401, 5412, 7172, 4080, 1804, 5720, 7593, 8985, 1068, 866, 2872, 1144, 8687, 1395, 3877, 6666, 380, 1886, 8886, 3537, 6025, 4523, 11893, 2189, 9675, 9704, 2827, 4970, 1684, 6198, 9349, 2356, 9487, 9011, 6136, 2937, 7772, 8917, 5851, 5574, 4245, 1868, 3395, 11345, 9115, 6179, 8240, 170, 11821, 11009, 10257, 2003, 2154, 4612, 1906, 7653, 203, 6384, 437, 6531, 145, 10917, 2606, 6845, 8790, 700, 6949, 12030, 3271, 8790, 8978, 856, 963, 7089, 7632, 4568, 1919, 981, 8380, 3234, 8620, 9570, 6974, 3323, 9642, 11463, 7488, 12036, 9285, 2705, 10601, 10934, 6299, 2429, 5872, 2395, 8623, 10114, 2620, 2630, 590, 3967, 4556, 9924,
                 879, 2707, 4040, 6396, 3889, 4566, 8314, 6265, 9124, 11261, 5979, 11982, 1516, 1839, 8051, 2727, 11180, 7284, 8952, 6320, 2185, 12130, 2611, 7147, 8642, 333, 9797, 3864, 3853, 2205, 537, 2776, 6938, 10117, 3333, 5040, 4924, 7216, 862, 5323, 5855, 7323, 11256, 7123, 5614, 10247, 6583, 1246, 2875, 9923, 271, 2680, 4780, 3484, 907, 542, 9323, 6595, 12025, 7084, 3173, 10515, 7797, 9340, 4198, 877, 7058, 10517, 10104, 2880, 8175, 9685, 7269, 11157, 3314, 3034, 11799, 2551, 11904, 7429, 5751, 3132, 3452, 4780, 7713, 6464, 4353, 8079, 10272, 9572, 3381, 2148, 4100, 4467, 8107, 60, 609, 67, 11037, 478, 3026, 9156, 4803, 7480, 5859, 8840, 3731, 3487, 5738, 9166, 2234, 292, 5043, 6837, 7510, 7688, 2131, 11644, 12285, 4427, 6851, 5184, 5932, 242, 4802, 8613, 11136, 1682, 11256, 6734, 6703, 7082, 9114, 9563, 9119, 8417, 10026, 12245, 2885, 1798, 8815, 4490, 4079, 9728, 2595, 4923, 9698, 9093, 3926, 670, 4016, 10825, 1518, 8949, 909, 8707, 9346, 8743, 2106, 3059, 11835, 11278, 10934, 10177, 7263, 10275, 5048, 6952, 6250, 2353, 3920, 2781, 7631, 8632, 1223, 5428, 7385, 10594, 12115, 5957, 10539, 6384, 2624, 3349, 718, 8849, 228, 10276, 6353, 10616, 1686, 10242, 9974, 8008, 3376, 8098, 4266, 1021, 10080, 8667, 8964, 3002, 7628, 6421, 1920, 3720, 9781, 4655, 8790, 10767, 10205, 7210, 1727, 9543, 11341, 3906, 6320, 11588, 4259, 11000, 12284, 2957, 9151, 1844, 2047, 7067, 7948, 4312, 10967, 1997, 3450, 7, 9290, 10288, 5251, 2092, 3033, 10705, 9763, 12187, 4430, 6390, 3185, 12255, 287, 11098, 5316, 9010, 6996, 4205, 991, 2719, 6812, 8947, 7238, 4094, 2293]
hash = sk.hash_to_point(b"def", b"abc", xof=KeccaXOF)
assert hash == expected_hash
hash = sk.hash_to_point(b"R3N0_15_4_CH34T3R", b"pepper", xof=KeccaXOF)
assert hash != expected_hash
# this works.


# check with the example
NTT = 'NTTRecursive'
message = b"falcon in sol now?"
s1 = [-106, -186, 85, 41, 99, 67, -55, -23, 224, -302, -21, 78, -237, 196, 60, 469, -112, -90, 25, -80, -234, 196, 10, -67, 92, -130, -119, 123, -419, 73, 239, -20, 65, -293, 121, 31, -378, 360, -119, -7, -57, -321, -113, 160, -98, -101, 37, 105, -282, 157, -190, 154, 164, -131, -70, -99, -181, -59, -135, 423, -167, 130, 23, -23, -444, 228, 268, -94, 125, -18, 52, -12, -159, -17, 101, 192, 137, 264, 63, -135, -70, 130, -135, 149, -37, 101, -253, 21, -110, -202, -224, -130, -1, -217, 215, -54, -121, 123, 127, 177, -58, 19, 84, -51, -34, -198, 19, 157, -329, 118, -109, -339, 279, 138, 11, -202, 3, -106, -74, 257, -21, 215, 5, 211, -168, 67, 39, 231, 135, -157, 61, -12, -1, 45, -18, 77, 231, 167, 48, 28, -56, 159, -196, 88, 28, -126, 45, -104, -110, -92, -69, -277, -120, 19, -23, 44, -116, -119, -122, 326, -238, -8, 79, -63, 383, -16, 275, -10, 328, -126, 111, -58, 122, -191, -126, -169, 237, 175, -13, -64, -164, -98, -98, 196, 63, -117, 201, -282, 207, 288, -352, 251, 69, 111, -140, 52, 125, -129, 70, 250, -276, -185, 59, -60, 376, 287, 45, 133, -443, -253, 58, -305, 170, -47, -54, -244, 181, -270, -188, 158, -171, -64, -119, 246, 101, -52, 343, -129, 38, 196, 227, 101, -144, 20, 281, -119, -235, 239, 38, -69, 293, 176, -158, -98, -100, 6, -543, -161, 427, -277, -166, 14, -61, 164,
      170, -249, 76, -66, -101, 210, -306, 13, 47, 76, -293, 94, 114, -123, -102, -370, 87, -123, -52, -78, -12, 16, -29, 55, 60, 185, 131, -71, 230, 80, 157, -58, -442, 10, -98, 132, 3, 2, -28, 119, -212, 133, 205, -45, 160, -49, -186, 87, 228, 278, -248, 72, -86, -53, -286, 56, 3, -72, -20, 66, -28, -59, 225, 129, -197, 110, -237, 97, -53, 6, 83, -464, -221, 77, 7, -113, 86, 239, -198, 84, -372, 36, -260, -102, 101, -1, -177, -96, -238, -35, -98, 42, 205, -139, 20, -233, -117, -152, 114, -185, 52, 109, -12, -84, -12, 489, -274, 104, -22, 248, 144, -128, -106, 199, 99, -189, -100, -233, -266, -146, 383, 72, -216, -95, 86, 283, -254, -276, -61, -103, -264, -189, -71, 13, -186, 54, 179, 354, -159, 137, 22, 48, -101, 14, -13, -244, 5, 109, 230, 111, 151, 38, -171, 265, -30, -69, 79, -195, 126, 36, 24, 160, 214, -91, 85, -160, 157, 234, 390, 151, -189, -19, 324, -42, 82, -176, -111, 111, 113, -181, 123, -14, 165, 127, 172, -165, -328, -86, 16, -243, -174, 11, 73, 61, -12, -149, 33, -55, -287, -245, -234, -111, -40, -55, 162, -120, 213, -205, -163, -39, 444, 53, 166, 97, 47, 240, -194, -147, -139, 56, -142, 63, 147, -68, 36, -55, -62, -47, 39, -186, 133, -254, -162, -80, -75, 164, -197, -111, 199, 345, -171, -250, 252, 53, 179, 319, -192, 109, -277, 136, 15, 75, 18, -42, 353, -230, 70, 53]
salt = b"\xc5\xb4\x0c'p\xa32 \x9f\x89\xd5\xc4\xf1\x106\x0e\xe8\x8b1\x0fU\xc6\xc7\n\xf5\x01\xee8:|\xe4r\xdb\xbd>\xff\xa0V\xac\x97"
pk = [6018, 3543, 543, 3451, 10671, 4482, 686, 11742, 3415, 8727, 8346, 9831, 10529, 7539, 817, 345, 1502, 4029, 6252, 5831, 4746, 10403, 12236, 11638, 1823, 1067, 11978, 12242, 9126, 222, 12181, 5805, 6501, 279, 3744, 9274, 4303, 3886, 12198, 788, 2216, 4250, 7908, 866, 11036, 5740, 3060, 1013, 1838, 1033, 8210, 10076, 6110, 10074, 7337, 8444, 10786, 3896, 11651, 2785, 11071, 7373, 7605, 12005, 1815, 9786, 2707, 10461, 5076, 10760, 7898, 214, 7819, 2988, 5403, 5786, 7782, 4967, 1485, 8431, 2161, 6198, 3303, 4893, 4551, 8729, 4219, 2766, 3609, 7260, 7717, 9278, 2781, 3551, 11654, 4662, 9295, 8932, 703, 7512, 10652, 3087, 7435, 7609, 636, 10151, 8186, 8926, 6217, 8515, 4317, 9070, 8021, 112, 5118, 6354, 9730, 2490, 5543, 10978, 5998, 2816, 9513, 10413, 665, 9269, 10852, 7202, 4060, 10218, 11172, 7495, 10761, 2037, 368, 6840, 6401, 3539, 4243, 4462, 7141, 4922, 10212, 4506, 3515, 607, 8678, 58, 9219, 1049, 3309, 8025, 3604, 6768, 3923, 1631, 6558, 10884, 9873, 8973, 7710, 6599, 5347, 3952, 11553, 4299, 3501, 6107, 11964, 8840, 12117, 8935, 871, 206, 8813, 9492, 6658, 3414, 1813, 1563, 10985, 3386, 8258, 11771, 137, 1947, 402, 8573, 11692, 4560, 6780, 1847, 11025, 7583, 10636, 1508, 12073, 3769, 1343, 1459, 1492, 4788, 10543, 7433, 3017, 12021, 6709, 8841, 8915, 2581, 2236, 43, 5660, 11594, 3859, 9947, 8061, 11022, 2468, 8543, 6992, 7398, 10810, 7726, 7759, 7839, 11257, 6052, 10697, 4413, 11284, 2426, 5616, 3190, 10909, 5763, 9970, 12096, 4475, 2531, 7044, 1212, 12254, 10103, 11843, 1179, 11207, 1507, 8826, 2025, 4153, 5522, 6059, 209, 10101,
      11048, 5911, 9425, 8052, 8826, 5619, 5222, 10481, 715, 8399, 2998, 2110, 6083, 6884, 7407, 3448, 2647, 11712, 1792, 11533, 12231, 9903, 9770, 8510, 5454, 3000, 8313, 3537, 7397, 4839, 9368, 8833, 8206, 3095, 5681, 4251, 9681, 6293, 3977, 4371, 6125, 10412, 734, 12211, 10815, 1220, 536, 8485, 12211, 7079, 9028, 7578, 8756, 9417, 8496, 11056, 992, 232, 6939, 576, 1447, 6648, 9738, 6118, 5286, 2892, 8596, 3788, 3835, 4051, 5241, 2360, 805, 9394, 2902, 6737, 6475, 7215, 7472, 5319, 3931, 5836, 6675, 3184, 409, 3510, 1886, 2937, 3969, 5331, 11352, 9375, 3526, 4666, 2783, 2898, 9443, 5413, 9932, 12146, 106, 7786, 8432, 3896, 5774, 10267, 10637, 11736, 720, 8246, 5315, 1843, 9132, 3767, 4962, 8275, 3995, 1751, 10958, 9320, 5895, 11212, 10768, 5281, 2836, 741, 9307, 7364, 7648, 6495, 670, 4783, 7016, 11121, 11743, 12190, 12173, 3856, 5451, 9190, 2992, 3229, 5610, 11945, 10566, 3616, 3642, 1082, 10679, 10943, 8447, 4245, 8062, 7475, 3507, 6403, 5820, 1951, 7393, 5435, 1914, 4606, 7176, 8791, 8080, 6836, 203, 8688, 6196, 11082, 8418, 4159, 10065, 9518, 10849, 3548, 7517, 12117, 12062, 5318, 2206, 8745, 10125, 946, 4027, 11859, 3755, 4930, 334, 9639, 1200, 11752, 9867, 4148, 9773, 426, 3605, 6899, 11297, 1478, 8646, 9937, 4138, 9058, 10513, 1110, 1229, 333, 3792, 6196, 1018, 2759, 6198, 7834, 7356, 5865, 4891, 9753, 7980, 7374, 11477, 3977, 8122, 11368, 5604, 11705, 3119, 3373, 9551, 11358, 7787, 5378, 9668, 7671, 10048, 6177, 5341, 87, 11016, 6498, 11316, 10006, 9555, 11043, 3413, 11782, 6594, 2702, 2712, 8549, 8874, 10101, 1317, 2011, 8158, 11678, 9893]
hash = sk.hash_to_point(message, salt, xof=KeccaXOF)
print("hash={}".format(hash))
s0 = Poly(hash, q) - Poly(s1, q) * Poly(pk, q)
s0 = [(coef + (q >> 1)) % q - (q >> 1) for coef in s0.coeffs]
print("s0 = {}".format(s0))
# Check that the (s0, s1) is short
norm_sign = sum(coef ** 2 for coef in s0)
norm_sign += sum(coef ** 2 for coef in s1)
if norm_sign > Params[512]["sig_bound"]:
    print("Squared norm of signature is too large:", norm_sign)
# this is not working for now.

print(sk.hash_to_point(salt, message, xof=KeccaXOF))


# h1 = sk.hash_to_point(b"we are", b"tetration", xof=KeccaXOF)
# h2 = sk.hash_to_point(b"we ar", b"etetration", xof=KeccaXOF)
# print(h1 == h2)
"""

sk2 = SecretKey(n)
msg = b"I offer 100 ETH to Renaud"
# pk = [11496, 8750, 6367, 8513, 9698, 2801, 11184, 7720, 3044, 6551, 12169, 6495, 2608, 10601, 3965, 2608, 6931, 5266, 5015, 11190, 11904, 11241, 2735, 6906, 7831, 6600, 4500, 9359, 4245, 5436, 8774, 2589, 4561, 8983, 696, 8332, 4550, 1996, 2855, 7575, 2429, 2784, 869, 12283, 7148, 11327, 8000, 2406, 9422, 7003, 9693, 10658, 1286, 7617, 240, 1465, 4821, 9727, 6893, 10912, 4320, 10947, 11575, 5020, 1246, 9103, 12228, 982, 1652, 5442, 5066, 1984, 5969, 10958, 11600, 6828, 10785, 9074, 11562, 8427, 7384, 10225, 3146, 9884, 227, 10528, 6914, 7012, 11418, 618, 2344, 2442, 12118, 1590, 4659, 9, 6054, 2974, 1062, 7889, 7428, 11552, 10955, 3953, 11650, 5488, 3360, 6419, 2018, 7855, 11937, 10273, 11760, 10619, 2946, 9827, 1391, 5288, 10081, 7879, 436, 2821, 10976, 4719, 3805, 9319, 9630, 2921, 4919, 11006, 8476, 822, 3362, 6488, 3539, 2966, 9066, 11199, 3581, 6766, 9874, 5432, 8230, 1904, 10886, 9536, 650, 3017, 8013, 3273, 11999, 10043, 9288, 8661, 3001, 9709, 1944, 7455, 3436, 5174, 887, 5047, 7710, 10546, 5349, 11586, 10870, 6055, 587, 5456, 2913, 7852, 4569, 89, 11242, 6656, 7772, 5474, 11556, 1074, 5017, 8253, 6103, 11848, 4716, 6126, 4405, 5651, 6845, 369, 11740, 7603, 7746, 7584, 915, 6450, 9542, 10494, 256, 9124, 4106, 8698, 7618, 1531, 11543, 9513, 1711, 1120, 6401, 11319, 947, 7814, 4649, 7342, 10521, 1379, 7114, 4336, 6053, 6221, 1914, 3752, 8195, 10946, 5208, 1259, 11370, 6416, 5131, 5381, 8682, 7596, 8281, 2484, 11339, 11788, 7058, 5553, 2273, 6449, 608, 11847, 4196, 2901, 12045, 6603, 3256, 9934, 7986, 8114, 11513, 907, 8637, 6623,
#       4668, 4038, 11237, 5537, 4283, 6388, 6134, 8930, 2128, 2128, 2963, 7004, 8973, 7762, 171, 10591, 7196, 745, 2586, 2633, 10421, 8891, 3400, 4224, 2007, 4723, 10362, 2104, 8976, 722, 11441, 2652, 6325, 6241, 2988, 11748, 7855, 9040, 7088, 9407, 9770, 867, 2077, 4362, 12110, 1082, 1850, 4862, 4330, 10985, 5379, 10483, 7677, 2619, 2355, 3252, 2103, 6398, 11488, 3782, 3245, 9556, 5907, 4738, 8334, 8587, 6139, 5343, 6495, 8498, 7104, 10335, 8532, 10159, 8308, 9264, 10616, 12269, 4354, 1430, 4838, 1508, 10559, 2651, 6956, 11497, 8752, 1131, 2791, 4011, 4253, 3438, 9498, 5714, 10445, 10070, 5480, 5019, 6473, 7725, 1261, 3066, 198, 7815, 2246, 3496, 8064, 739, 5866, 5569, 11456, 2244, 668, 8395, 5445, 2772, 4408, 9293, 11014, 761, 3718, 11571, 3404, 368, 3579, 10321, 6736, 11875, 10187, 529, 280, 2368, 2568, 4932, 6205, 7260, 7792, 7205, 11919, 1381, 11963, 3502, 11363, 7457, 9950, 4892, 10373, 5957, 10007, 711, 11549, 2571, 8529, 8934, 5748, 4109, 6209, 5302, 5566, 1970, 3825, 7545, 351, 11519, 7545, 2503, 3567, 1449, 2813, 4183, 7617, 12054, 6684, 8500, 1397, 2228, 4403, 10069, 7801, 4417, 9204, 1364, 3084, 3708, 8282, 9585, 5338, 10093, 4234, 6005, 8209, 1525, 3841, 5204, 2613, 2267, 3108, 8948, 8153, 7531, 7324, 9187, 2570, 684, 4422, 5060, 8768, 11619, 3214, 707, 7175, 5379, 169, 4774, 6508, 6510, 3021, 11514, 179, 4509, 3931, 3453, 7772, 4992, 4043, 12029, 8039, 9766, 8752, 5730, 5298, 2055, 8370, 9754, 2872, 731, 9288, 2970, 315, 5281, 10632, 4920, 609, 5117, 4981, 3040, 9677, 1530, 695, 10176, 5260, 3336, 2120, 6452, 6772, 3911, 5640, 4868]
# salt = b'8\x90CPp\xa1L\xbe\xc2/\x83\xc2\xb3\x08\xbc\x06\xc4\xa3J\xeev\xf5\xa3M\x8b\x9a\xe3\xeb\x1f\x8a9\x92\x99\xe2\x92r\xd2q:\x9b'
salt = b'8\x90CPp\xa1L\xbe\xc2/\x83I offer 100 ETU to Simon and '
print(len(salt))
# print(len(salt))
# s1 = [126, -53, -93, -27, -72, 38, -114, 251, -175, -237, -331, 250, 295, 182, 24, -112, -84, -1, -92, 63, -6, 123, 251, 82, -201, 354, 98, -203, 159, 283, -293, 120, -132, -162, -234, -470, -42, 17, -209, 59, 0, 42, -170, -177, 193, -283, -13, 3, -266, 19, 30, 176, -115, -77, 74, 20, -45, -42, 18, -57, 14, -71, 139, 124, 27, 300, 14, 238, 152, 4, -144, 221, -240, -146, -52, -118, 55, -101, -236, -251, -12, 75, 317, 70, 23, 18, -202, -211, 101, -218, 331, 315, 206, -353, 80, -190, -125, -100, 54, 62, 136, -223, 118, 306, -61, -127, 66, -68, -108, -109, 52, 151, -75, -28, 100, 94, -24, 142, -87, -267, -31, -54, 193, 94, 51, 41, 0, 125, 108, 88, -62, -34, 300, -69, -64, -385, 123, 231, 69, -221, 145, 201, 146, -137, 149, -153, -206, 104, 150, -97, 156, 12, -82, -234, 123, 239, 92, -395, 76, -55, -143, -181, 68, -139, 324, -427, -65, -43, 19, -7, -166, -209, 143, -151, -202, 164, -151, -359, -193, -145, -65, -123, -191, 83, 116, 155, -201, -53, -176, -61, -66, -18, 234, 159, -40, -121, 114, 206, 84, 63, 113, 205, 20, -187, 77, 85, -126, 40, -142, 166, 239, 281, -120, -21, 289, 134, -23, 185, 245, 43, -118, -160, -54, -37, -228, 92, 45, 142, 258, -217, -101, 35, 18, 50, 198, 108, -409, 200, -193, -54, 30, -38, -137, 208, 102, 192, 101, -87, 8, 107, -326, -7, 55, 1, 218, -
# 148, -513, -165, -156, -39, 327, 320, 192, 75, 68, -90, -254, 250, 300, 134, -48, -108, -66, 412, 185, 60, 37, -148, 12, 23, -3, 123, -116, 211, 239, 195, -83, -22, -374, 164, 25, 110, 134, -189, -37, -5, 93, 41, 159, 48, 36, -161, -221, 381, 97, -165, 165, 170, -24, -97, -6, -57, -217, 77, -8, -153, 91, -127, -159, 24, 20, -53, 46, -266, 188, 92, 302, -144, -357, -34, 95, -19, -209, 36, 146, -88, 130, -46, 89, 88, -167, -45, 172, -59, 165, 225, -153, -64, 11, 43, 39, 35, -296, -150, 28, -151, -247, 88, -80, -71, -15, -407, 463, 193, -323, -49, 64, 83, -34, -169, -15, -8, 75, 12, -58, 217, -180, -96, -77, 55, -88, -3, 75, -135, -253, 104, 300, 229, 173, 14, -194, 70, -133, 172, -44, -130, 585, 78, 23, 156, -89, 101, -202, 298, 63, 269, -140, 130, -357, -20, -328, -195, -224, -107, 523, -126, 54, -145, -78, -131, 21, -143, 331, 143, 151, 111, 221, 260, -165, 314, 23, 177, -52, -50, -231, -262, -214, -160, -5, -128, 90, 194, -198, -99, -150, -350, -106, -9, 189, -5, -102, 43, -23, 339, 398, -45, -89, -217, 115, 180, 12, 104, 92, -28, 81, 147, 195, -15, -64, -204, -21, -69, 112, -162, 84, -52, -227, 53, -83, -60, 6, 413, -76, -204, -150, -76, 133, -64, -307, -230, -347, 137, -8, -202, 233, 61, -62, -184, 120, 273, -177, 240, 93, -184, -19, 121, 22, -293, -328, 66, -78, -25]


def constant_salt(x):
    return salt


σ = sk2.sign(msg, randombytes=constant_salt, xof=KeccaXOF)
assert sk2.verify(msg, σ, xof=KeccaXOF)
