// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console} from "forge-std/Test.sol";
import {Falcon} from "../src/ETHFalcon_Recursive.sol";
import {NTT} from "../src/NTT_Recursive.sol";
import "../src/NTT_Iterative.sol";

contract FalconTest is Test {
    int constant q = 12289;
    // ans generated from python code
    // prettier-ignore
    uint16[512] hash2PointAnswer = [ 7373, 883, 5550, 2322, 8580, 11319, 1037, 9708, 7159, 4158, 683, 1120, 9948, 11269, 790, 6252, 2698, 12217, 3596, 1819, 10441, 8257, 3040, 5573, 5213, 5150, 6123, 4363, 10505, 3359, 363, 10882, 4000, 3996, 2150, 6823, 8209, 10781, 11953, 397, 10576, 5527, 239, 7733, 8493, 3126, 3301, 10385, 7235, 8080, 1175, 6491, 11269, 3618, 3479, 1771, 406, 5245, 9874, 10195, 6777, 5908, 10147, 2321, 71, 5157, 6106, 9459, 7587, 7005, 10808, 9396, 6657, 10692, 11888, 10688, 9776, 6123, 11708, 6919, 1184, 3832, 4832, 6274, 5330, 7664, 9929, 4401, 8412, 7710, 1733, 8158, 8469, 10972, 8546, 10418, 1032, 5926, 6686, 1606, 2094, 6147, 4268, 2856, 9724, 8827, 2276, 327, 364, 3546, 5060, 38, 6461, 7825, 11703, 10229, 586, 6232, 5538, 8703, 9068, 1751, 1261, 10886, 8971, 10072, 4803, 12269, 11905, 1677, 168, 2793, 2446, 5598, 8609, 4471, 10206, 1457, 3344, 2115, 6331, 11897, 1509, 8496, 12033, 3422, 10769, 11981, 6746, 7141, 94, 5401, 5412, 7172, 4080, 1804, 5720, 7593, 8985, 1068, 866, 2872, 1144, 8687, 1395, 3877, 6666, 380, 1886, 8886, 3537, 6025, 4523, 11893, 2189, 9675, 9704, 2827, 4970, 1684, 6198, 9349, 2356, 9487, 9011, 6136, 2937, 7772, 8917, 5851, 5574, 4245, 1868, 3395, 11345, 9115, 6179, 8240, 170, 11821, 11009, 10257, 2003, 2154, 4612, 1906, 7653, 203, 6384, 437, 6531, 145, 10917, 2606, 6845, 8790, 700, 6949, 12030, 3271, 8790, 8978, 856, 963, 7089, 7632, 4568, 1919, 981, 8380, 3234, 8620, 9570, 6974, 3323, 9642, 11463, 7488, 12036, 9285, 2705, 10601, 10934, 6299, 2429, 5872, 2395, 8623, 10114, 2620, 2630, 590, 3967, 4556, 9924, 879, 2707, 4040, 6396, 3889, 4566, 8314, 6265, 9124, 11261, 5979, 11982, 1516, 1839, 8051, 2727, 11180, 7284, 8952, 6320, 2185, 12130, 2611, 7147, 8642, 333, 9797, 3864, 3853, 2205, 537, 2776, 6938, 10117, 3333, 5040, 4924, 7216, 862, 5323, 5855, 7323, 11256, 7123, 5614, 10247, 6583, 1246, 2875, 9923, 271, 2680, 4780, 3484, 907, 542, 9323, 6595, 12025, 7084, 3173, 10515, 7797, 9340, 4198, 877, 7058, 10517, 10104, 2880, 8175, 9685, 7269, 11157, 3314, 3034, 11799, 2551, 11904, 7429, 5751, 3132, 3452, 4780, 7713, 6464, 4353, 8079, 10272, 9572, 3381, 2148, 4100, 4467, 8107, 60, 609, 67, 11037, 478, 3026, 9156, 4803, 7480, 5859, 8840, 3731, 3487, 5738, 9166, 2234, 292, 5043, 6837, 7510, 7688, 2131, 11644, 12285, 4427, 6851, 5184, 5932, 242, 4802, 8613, 11136, 1682, 11256, 6734, 6703, 7082, 9114, 9563, 9119, 8417, 10026, 12245, 2885, 1798, 8815, 4490, 4079, 9728, 2595, 4923, 9698, 9093, 3926, 670, 4016, 10825, 1518, 8949, 909, 8707, 9346, 8743, 2106, 3059, 11835, 11278, 10934, 10177, 7263, 10275, 5048, 6952, 6250, 2353, 3920, 2781, 7631, 8632, 1223, 5428, 7385, 10594, 12115, 5957, 10539, 6384, 2624, 3349, 718, 8849, 228, 10276, 6353, 10616, 1686, 10242, 9974, 8008, 3376, 8098, 4266, 1021, 10080, 8667, 8964, 3002, 7628, 6421, 1920, 3720, 9781, 4655, 8790, 10767, 10205, 7210, 1727, 9543, 11341, 3906, 6320, 11588, 4259, 11000, 12284, 2957, 9151, 1844, 2047, 7067, 7948, 4312, 10967, 1997, 3450, 7, 9290, 10288, 5251, 2092, 3033, 10705, 9763, 12187, 4430, 6390, 3185, 12255, 287, 11098, 5316, 9010, 6996, 4205, 991, 2719, 6812, 8947, 7238, 4094, 2293];
    Falcon falcon;
    NTT ntt;
    NTT_iterative ntt_iterative;

    function setUp() public {
        falcon = new Falcon();
        ntt = new NTT();
        ntt_iterative = new NTT_iterative();
    }

    function testHashToPoint() public view {
        bytes memory salt = "abc";
        bytes memory msgHash = "def";
        uint256[] memory hashed = falcon.hashToPoint(salt, msgHash);
        for (uint i = 0; i < 512; i++) {
            require(hashed[i] == hash2PointAnswer[i], "hashed[i] != answer[i]");
        }
    }

    function testVerify() public view {
        bytes memory msgs = "falcon in sol now?";
        // prettier-ignore
        int[512] memory tmps1 = [int(-106), -186, 85, 41, 99, 67, -55, -23, 224, -302, -21, 78, -237, 196, 60, 469, -112, -90, 25, -80, -234, 196, 10, -67, 92, -130, -119, 123, -419, 73, 239, -20, 65, -293, 121, 31, -378, 360, -119, -7, -57, -321, -113, 160, -98, -101, 37, 105, -282, 157, -190, 154, 164, -131, -70, -99, -181, -59, -135, 423, -167, 130, 23, -23, -444, 228, 268, -94, 125, -18, 52, -12, -159, -17, 101, 192, 137, 264, 63, -135, -70, 130, -135, 149, -37, 101, -253, 21, -110, -202, -224, -130, -1, -217, 215, -54, -121, 123, 127, 177, -58, 19, 84, -51, -34, -198, 19, 157, -329, 118, -109, -339, 279, 138, 11, -202, 3, -106, -74, 257, -21, 215, 5, 211, -168, 67, 39, 231, 135, -157, 61, -12, -1, 45, -18, 77, 231, 167, 48, 28, -56, 159, -196, 88, 28, -126, 45, -104, -110, -92, -69, -277, -120, 19, -23, 44, -116, -119, -122, 326, -238, -8, 79, -63, 383, -16, 275, -10, 328, -126, 111, -58, 122, -191, -126, -169, 237, 175, -13, -64, -164, -98, -98, 196, 63, -117, 201, -282, 207, 288, -352, 251, 69, 111, -140, 52, 125, -129, 70, 250, -276, -185, 59, -60, 376, 287, 45, 133, -443, -253, 58, -305, 170, -47, -54, -244, 181, -270, -188, 158, -171, -64, -119, 246, 101, -52, 343, -129, 38, 196, 227, 101, -144, 20, 281, -119, -235, 239, 38, -69, 293, 176, -158, -98, -100, 6, -543, -161, 427, -277, -166, 14, -61, 164, 170, -249, 76, -66, -101, 210, -306, 13, 47, 76, -293, 94, 114, -123, -102, -370, 87, -123, -52, -78, -12, 16, -29, 55, 60, 185, 131, -71, 230, 80, 157, -58, -442, 10, -98, 132, 3, 2, -28, 119, -212, 133, 205, -45, 160, -49, -186, 87, 228, 278, -248, 72, -86, -53, -286, 56, 3, -72, -20, 66, -28, -59, 225, 129, -197, 110, -237, 97, -53, 6, 83, -464, -221, 77, 7, -113, 86, 239, -198, 84, -372, 36, -260, -102, 101, -1, -177, -96, -238, -35, -98, 42, 205, -139, 20, -233, -117, -152, 114, -185, 52, 109, -12, -84, -12, 489, -274, 104, -22, 248, 144, -128, -106, 199, 99, -189, -100, -233, -266, -146, 383, 72, -216, -95, 86, 283, -254, -276, -61, -103, -264, -189, -71, 13, -186, 54, 179, 354, -159, 137, 22, 48, -101, 14, -13, -244, 5, 109, 230, 111, 151, 38, -171, 265, -30, -69, 79, -195, 126, 36, 24, 160, 214, -91, 85, -160, 157, 234, 390, 151, -189, -19, 324, -42, 82, -176, -111, 111, 113, -181, 123, -14, 165, 127, 172, -165, -328, -86, 16, -243, -174, 11, 73, 61, -12, -149, 33, -55, -287, -245, -234, -111, -40, -55, 162, -120, 213, -205, -163, -39, 444, 53, 166, 97, 47, 240, -194, -147, -139, 56, -142, 63, 147, -68, 36, -55, -62, -47, 39, -186, 133, -254, -162, -80, -75, 164, -197, -111, 199, 345, -171, -250, 252, 53, 179, 319, -192, 109, -277, 136, 15, 75, 18, -42, 353, -230, 70, 53];
        Falcon.Signature memory signature;
        signature
            .salt = "\xc5\xb4\x0c'p\xa32 \x9f\x89\xd5\xc4\xf1\x106\x0e\xe8\x8b1\x0fU\xc6\xc7\n\xf5\x01\xee8:|\xe4r\xdb\xbd>\xff\xa0V\xac\x97";
        signature.s1 = new int256[](512);
        for (uint i = 0; i < 512; i++) {
            signature.s1[i] = tmps1[i];
        }
        // prettier-ignore
        uint[512] memory tmph = [uint(6018), 3543, 543, 3451, 10671, 4482, 686, 11742, 3415, 8727, 8346, 9831, 10529, 7539, 817, 345, 1502, 4029, 6252, 5831, 4746, 10403, 12236, 11638, 1823, 1067, 11978, 12242, 9126, 222, 12181, 5805, 6501, 279, 3744, 9274, 4303, 3886, 12198, 788, 2216, 4250, 7908, 866, 11036, 5740, 3060, 1013, 1838, 1033, 8210, 10076, 6110, 10074, 7337, 8444, 10786, 3896, 11651, 2785, 11071, 7373, 7605, 12005, 1815, 9786, 2707, 10461, 5076, 10760, 7898, 214, 7819, 2988, 5403, 5786, 7782, 4967, 1485, 8431, 2161, 6198, 3303, 4893, 4551, 8729, 4219, 2766, 3609, 7260, 7717, 9278, 2781, 3551, 11654, 4662, 9295, 8932, 703, 7512, 10652, 3087, 7435, 7609, 636, 10151, 8186, 8926, 6217, 8515, 4317, 9070, 8021, 112, 5118, 6354, 9730, 2490, 5543, 10978, 5998, 2816, 9513, 10413, 665, 9269, 10852, 7202, 4060, 10218, 11172, 7495, 10761, 2037, 368, 6840, 6401, 3539, 4243, 4462, 7141, 4922, 10212, 4506, 3515, 607, 8678, 58, 9219, 1049, 3309, 8025, 3604, 6768, 3923, 1631, 6558, 10884, 9873, 8973, 7710, 6599, 5347, 3952, 11553, 4299, 3501, 6107, 11964, 8840, 12117, 8935, 871, 206, 8813, 9492, 6658, 3414, 1813, 1563, 10985, 3386, 8258, 11771, 137, 1947, 402, 8573, 11692, 4560, 6780, 1847, 11025, 7583, 10636, 1508, 12073, 3769, 1343, 1459, 1492, 4788, 10543, 7433, 3017, 12021, 6709, 8841, 8915, 2581, 2236, 43, 5660, 11594, 3859, 9947, 8061, 11022, 2468, 8543, 6992, 7398, 10810, 7726, 7759, 7839, 11257, 6052, 10697, 4413, 11284, 2426, 5616, 3190, 10909, 5763, 9970, 12096, 4475, 2531, 7044, 1212, 12254, 10103, 11843, 1179, 11207, 1507, 8826, 2025, 4153, 5522, 6059, 209, 10101, 11048, 5911, 9425, 8052, 8826, 5619, 5222, 10481, 715, 8399, 2998, 2110, 6083, 6884, 7407, 3448, 2647, 11712, 1792, 11533, 12231, 9903, 9770, 8510, 5454, 3000, 8313, 3537, 7397, 4839, 9368, 8833, 8206, 3095, 5681, 4251, 9681, 6293, 3977, 4371, 6125, 10412, 734, 12211, 10815, 1220, 536, 8485, 12211, 7079, 9028, 7578, 8756, 9417, 8496, 11056, 992, 232, 6939, 576, 1447, 6648, 9738, 6118, 5286, 2892, 8596, 3788, 3835, 4051, 5241, 2360, 805, 9394, 2902, 6737, 6475, 7215, 7472, 5319, 3931, 5836, 6675, 3184, 409, 3510, 1886, 2937, 3969, 5331, 11352, 9375, 3526, 4666, 2783, 2898, 9443, 5413, 9932, 12146, 106, 7786, 8432, 3896, 5774, 10267, 10637, 11736, 720, 8246, 5315, 1843, 9132, 3767, 4962, 8275, 3995, 1751, 10958, 9320, 5895, 11212, 10768, 5281, 2836, 741, 9307, 7364, 7648, 6495, 670, 4783, 7016, 11121, 11743, 12190, 12173, 3856, 5451, 9190, 2992, 3229, 5610, 11945, 10566, 3616, 3642, 1082, 10679, 10943, 8447, 4245, 8062, 7475, 3507, 6403, 5820, 1951, 7393, 5435, 1914, 4606, 7176, 8791, 8080, 6836, 203, 8688, 6196, 11082, 8418, 4159, 10065, 9518, 10849, 3548, 7517, 12117, 12062, 5318, 2206, 8745, 10125, 946, 4027, 11859, 3755, 4930, 334, 9639, 1200, 11752, 9867, 4148, 9773, 426, 3605, 6899, 11297, 1478, 8646, 9937, 4138, 9058, 10513, 1110, 1229, 333, 3792, 6196, 1018, 2759, 6198, 7834, 7356, 5865, 4891, 9753, 7980, 7374, 11477, 3977, 8122, 11368, 5604, 11705, 3119, 3373, 9551, 11358, 7787, 5378, 9668, 7671, 10048, 6177, 5341, 87, 11016, 6498, 11316, 10006, 9555, 11043, 3413, 11782, 6594, 2702, 2712, 8549, 8874, 10101, 1317, 2011, 8158, 11678, 9893];
        uint[] memory h = new uint[](512);
        for (uint i = 0; i < 512; i++) {
            h[i] = tmph[i];
        }
        falcon.verify(msgs, signature, h);
    }

    //compute the ntt of one
    function testNTTone() public view {
        uint[512] memory one;
        one[0] = 1;
        uint[] memory h = new uint[](512);
        for (uint i = 0; i < 512; i++) {
            h[i] = one[i];
        }
        uint[] memory ntt_h = new uint[](512);
        ntt_h = ntt.nTT(h);
        for (uint i = 0; i < 512; i++) require(ntt_h[i] == 1);

        ntt_h = ntt_iterative.NWC_ntt(h);
        for (uint i = 0; i < 512; i++) require(ntt_h[i] == 1);
    }

    //used to compute the ntt recursive form of the test vector
    function publicKey_NTT() public view {
        // prettier-ignore
        uint[512] memory tmph = [            uint(6018), 3543, 543, 3451, 10671, 4482, 686, 11742, 3415, 8727, 8346, 9831, 10529, 7539, 817, 345, 1502, 4029, 6252, 5831, 4746, 10403, 12236, 11638, 1823, 1067, 11978, 12242, 9126, 222, 12181, 5805, 6501, 279, 3744, 9274, 4303, 3886, 12198, 788, 2216, 4250, 7908, 866, 11036, 5740, 3060, 1013, 1838, 1033, 8210, 10076, 6110, 10074, 7337, 8444, 10786, 3896, 11651, 2785, 11071, 7373, 7605, 12005, 1815, 9786, 2707, 10461, 5076, 10760, 7898, 214, 7819, 2988, 5403, 5786, 7782, 4967, 1485, 8431, 2161, 6198, 3303, 4893, 4551, 8729, 4219, 2766, 3609, 7260, 7717, 9278, 2781, 3551, 11654, 4662, 9295, 8932, 703, 7512, 10652, 3087, 7435, 7609, 636, 10151, 8186, 8926, 6217, 8515, 4317, 9070, 8021, 112, 5118, 6354, 9730, 2490, 5543, 10978, 5998, 2816, 9513, 10413, 665, 9269, 10852, 7202, 4060, 10218, 11172, 7495, 10761, 2037, 368, 6840, 6401, 3539, 4243, 4462, 7141, 4922, 10212, 4506, 3515, 607, 8678, 58, 9219, 1049, 3309, 8025, 3604, 6768, 3923, 1631, 6558, 10884, 9873, 8973, 7710, 6599, 5347, 3952, 11553, 4299, 3501, 6107, 11964, 8840, 12117, 8935, 871, 206, 8813, 9492, 6658, 3414, 1813, 1563, 10985, 3386, 8258, 11771, 137, 1947, 402, 8573, 11692, 4560, 6780, 1847, 11025, 7583, 10636, 1508, 12073, 3769, 1343, 1459, 1492, 4788, 10543, 7433, 3017, 12021, 6709, 8841, 8915, 2581, 2236, 43, 5660, 11594, 3859, 9947, 8061, 11022, 2468, 8543, 6992, 7398, 10810, 7726, 7759, 7839, 11257, 6052, 10697, 4413, 11284, 2426, 5616, 3190, 10909, 5763, 9970, 12096, 4475, 2531, 7044, 1212, 12254, 10103, 11843, 1179, 11207, 1507, 8826, 2025, 4153, 5522, 6059, 209, 10101, 11048, 5911, 9425, 8052, 8826, 5619, 5222, 10481, 715, 8399, 2998, 2110, 6083, 6884, 7407, 3448, 2647, 11712, 1792, 11533, 12231, 9903, 9770, 8510, 5454, 3000, 8313, 3537, 7397, 4839, 9368, 8833, 8206, 3095, 5681, 4251, 9681, 6293, 3977, 4371, 6125, 10412, 734, 12211, 10815, 1220, 536, 8485, 12211, 7079, 9028, 7578, 8756, 9417, 8496, 11056, 992, 232, 6939, 576, 1447, 6648, 9738, 6118, 5286, 2892, 8596, 3788, 3835, 4051, 5241, 2360, 805, 9394, 2902, 6737, 6475, 7215, 7472, 5319, 3931, 5836, 6675, 3184, 409, 3510, 1886, 2937, 3969, 5331, 11352, 9375, 3526, 4666, 2783, 2898, 9443, 5413, 9932, 12146, 106, 7786, 8432, 3896, 5774, 10267, 10637, 11736, 720, 8246, 5315, 1843, 9132, 3767, 4962, 8275, 3995, 1751, 10958, 9320, 5895, 11212, 10768, 5281, 2836, 741, 9307, 7364, 7648, 6495, 670, 4783, 7016, 11121, 11743, 12190, 12173, 3856, 5451, 9190, 2992, 3229, 5610, 11945, 10566, 3616, 3642, 1082, 10679, 10943, 8447, 4245, 8062, 7475, 3507, 6403, 5820, 1951, 7393, 5435, 1914, 4606, 7176, 8791, 8080, 6836, 203, 8688, 6196, 11082, 8418, 4159, 10065, 9518, 10849, 3548, 7517, 12117, 12062, 5318, 2206, 8745, 10125, 946, 4027, 11859, 3755, 4930, 334, 9639, 1200, 11752, 9867, 4148, 9773, 426, 3605, 6899, 11297, 1478, 8646, 9937, 4138, 9058, 10513, 1110, 1229, 333, 3792, 6196, 1018, 2759, 6198, 7834, 7356, 5865, 4891, 9753, 7980, 7374, 11477, 3977, 8122, 11368, 5604, 11705, 3119, 3373, 9551, 11358, 7787, 5378, 9668, 7671, 10048, 6177, 5341, 87, 11016, 6498, 11316, 10006, 9555, 11043, 3413, 11782, 6594, 2702, 2712, 8549, 8874, 10101, 1317, 2011, 8158, 11678, 9893
        ];
        uint[] memory h = new uint[](512);
        for (uint i = 0; i < 512; i++) {
            h[i] = tmph[i];
        }
        uint[] memory ntt_h = new uint[](512);
    }

    function test_Verify_kpubntt() public view {
        bytes memory msgs = "falcon in sol now?";
        // prettier-ignore
        int[512] memory tmps1 = [int(-106), -186, 85, 41, 99, 67, -55, -23, 224, -302, -21, 78, -237, 196, 60, 469, -112, -90, 25, -80, -234, 196, 10, -67, 92, -130, -119, 123, -419, 73, 239, -20, 65, -293, 121, 31, -378, 360, -119, -7, -57, -321, -113, 160, -98, -101, 37, 105, -282, 157, -190, 154, 164, -131, -70, -99, -181, -59, -135, 423, -167, 130, 23, -23, -444, 228, 268, -94, 125, -18, 52, -12, -159, -17, 101, 192, 137, 264, 63, -135, -70, 130, -135, 149, -37, 101, -253, 21, -110, -202, -224, -130, -1, -217, 215, -54, -121, 123, 127, 177, -58, 19, 84, -51, -34, -198, 19, 157, -329, 118, -109, -339, 279, 138, 11, -202, 3, -106, -74, 257, -21, 215, 5, 211, -168, 67, 39, 231, 135, -157, 61, -12, -1, 45, -18, 77, 231, 167, 48, 28, -56, 159, -196, 88, 28, -126, 45, -104, -110, -92, -69, -277, -120, 19, -23, 44, -116, -119, -122, 326, -238, -8, 79, -63, 383, -16, 275, -10, 328, -126, 111, -58, 122, -191, -126, -169, 237, 175, -13, -64, -164, -98, -98, 196, 63, -117, 201, -282, 207, 288, -352, 251, 69, 111, -140, 52, 125, -129, 70, 250, -276, -185, 59, -60, 376, 287, 45, 133, -443, -253, 58, -305, 170, -47, -54, -244, 181, -270, -188, 158, -171, -64, -119, 246, 101, -52, 343, -129, 38, 196, 227, 101, -144, 20, 281, -119, -235, 239, 38, -69, 293, 176, -158, -98, -100, 6, -543, -161, 427, -277, -166, 14, -61, 164, 170, -249, 76, -66, -101, 210, -306, 13, 47, 76, -293, 94, 114, -123, -102, -370, 87, -123, -52, -78, -12, 16, -29, 55, 60, 185, 131, -71, 230, 80, 157, -58, -442, 10, -98, 132, 3, 2, -28, 119, -212, 133, 205, -45, 160, -49, -186, 87, 228, 278, -248, 72, -86, -53, -286, 56, 3, -72, -20, 66, -28, -59, 225, 129, -197, 110, -237, 97, -53, 6, 83, -464, -221, 77, 7, -113, 86, 239, -198, 84, -372, 36, -260, -102, 101, -1, -177, -96, -238, -35, -98, 42, 205, -139, 20, -233, -117, -152, 114, -185, 52, 109, -12, -84, -12, 489, -274, 104, -22, 248, 144, -128, -106, 199, 99, -189, -100, -233, -266, -146, 383, 72, -216, -95, 86, 283, -254, -276, -61, -103, -264, -189, -71, 13, -186, 54, 179, 354, -159, 137, 22, 48, -101, 14, -13, -244, 5, 109, 230, 111, 151, 38, -171, 265, -30, -69, 79, -195, 126, 36, 24, 160, 214, -91, 85, -160, 157, 234, 390, 151, -189, -19, 324, -42, 82, -176, -111, 111, 113, -181, 123, -14, 165, 127, 172, -165, -328, -86, 16, -243, -174, 11, 73, 61, -12, -149, 33, -55, -287, -245, -234, -111, -40, -55, 162, -120, 213, -205, -163, -39, 444, 53, 166, 97, 47, 240, -194, -147, -139, 56, -142, 63, 147, -68, 36, -55, -62, -47, 39, -186, 133, -254, -162, -80, -75, 164, -197, -111, 199, 345, -171, -250, 252, 53, 179, 319, -192, 109, -277, 136, 15, 75, 18, -42, 353, -230, 70, 53];
        Falcon.Signature memory signature;
        signature
            .salt = "\xc5\xb4\x0c'p\xa32 \x9f\x89\xd5\xc4\xf1\x106\x0e\xe8\x8b1\x0fU\xc6\xc7\n\xf5\x01\xee8:|\xe4r\xdb\xbd>\xff\xa0V\xac\x97";
        signature.s1 = new int256[](512);
        for (uint i = 0; i < 512; i++) {
            signature.s1[i] = tmps1[i];
        }
        // prettier-ignore
        uint[512] memory ntt_h = [uint(8228) , 4157 , 4221 , 5072 , 11229 , 10526 , 719 , 10057 , 3914 , 9579 , 172 , 3603 , 4730 , 182 , 11895 , 6558 , 3701 , 5137 , 3038 , 11063 , 8768 , 2170 , 12247 , 10107 , 4068 , 8360 , 1476 , 10170 , 3828 , 6890 , 10973 , 10965 , 4634 , 3139 , 8975 , 1806 , 6226 , 1174 , 5920 , 8736 , 3567 , 3971 , 4261 , 7533 , 7769 , 2425 , 11651 , 3506 , 8351 , 2197 , 8294 , 8504 , 7458 , 8331 , 1215 , 4111 , 1715 , 10064 , 313 , 1880 , 4782 , 8754 , 11472 , 6545 , 11167 , 12237 , 8139 , 2792 , 4355 , 982 , 737 , 6198 , 8601 , 10448 , 2272 , 8683 , 591 , 948 , 3689 , 1899 , 9499 , 9560 , 11759 , 7636 , 6622 , 3380 , 7520 , 7471 , 7598 , 1182 , 9700 , 11135 , 5935 , 322 , 8572 , 2933 , 9566 , 2692 , 11706 , 6180 , 1133 , 11003 , 9674 , 2504 , 8222 , 9306 , 5951 , 6125 , 9838 , 3960 , 6429 , 10269 , 7993 , 7034 , 7593 , 1903 , 2604 , 7803 , 2644 , 1311 , 628 , 11909 , 2369 , 10951 , 4959 , 1283 , 5934 , 3285 , 11161 , 1494 , 1682 , 3407 , 2504 , 4904 , 9443 , 12055 , 10110 , 1662 , 6992 , 3456 , 2714 , 4937 , 5581 , 595 , 7909 , 11184 , 9234 , 7655 , 5173 , 5539 , 8160 , 11793 , 3819 , 10724 , 4228 , 3315 , 6301 , 5849 , 7240 , 983 , 1182 , 5241 , 8798 , 8038 , 4728 , 9043 , 1024 , 2713 , 117 , 8609 , 148 , 5092 , 9617 , 1819 , 1449 , 8478 , 5186 , 2995 , 3150 , 1970 , 10069 , 3692 , 11435 , 8198 , 2003 , 12029 , 437 , 9536 , 5265 , 1016 , 8415 , 3317 , 2318 , 8248 , 12230 , 12170 , 228 , 962 , 3930 , 4528 , 4412 , 1402 , 11508 , 6795 , 6162 , 7370 , 6972 , 2569 , 2113 , 1944 , 11788 , 6499 , 7940 , 2861 , 7416 , 11843 , 3222 , 5828 , 8133 , 1513 , 1407 , 1003 , 3217 , 8700 , 3016 , 8527 , 6985 , 11970 , 7259 , 5081 , 5761 , 10515 , 2151 , 875 , 10266 , 1193 , 9445 , 10874 , 7328 , 9048 , 9573 , 10390 , 14 , 143 , 4900 , 10689 , 8421 , 11654 , 7948 , 10250 , 5982 , 11477 , 11769 , 6363 , 12163 , 8981 , 7448 , 10466 , 6755 , 6994 , 6547 , 10463 , 9700 , 10634 , 11610 , 8314 , 10808 , 7270 , 5717 , 6249 , 9343 , 987 , 9111 , 6938 , 2666 , 5368 , 3428 , 3995 , 1759 , 1349 , 4511 , 3497 , 7970 , 10885 , 7518 , 7823 , 8470 , 2886 , 8529 , 3855 , 5749 , 1349 , 1293 , 6396 , 9561 , 1042 , 1679 , 2669 , 1026 , 4053 , 2573 , 11841 , 2292 , 7419 , 2883 , 1288 , 9973 , 4867 , 5576 , 5445 , 3916 , 2471 , 1922 , 12141 , 9127 , 6822 , 9463 , 2889 , 6541 , 9195 , 4243 , 932 , 9088 , 1269 , 4636 , 4991 , 4653 , 9940 , 11115 , 9503 , 7405 , 10112 , 10503 , 12286 , 1200 , 11510 , 7618 , 530 , 11587 , 1116 , 5132 , 11605 , 481 , 1282 , 7522 , 2026 , 3127 , 10793 , 10044 , 7451 , 6373 , 746 , 9018 , 8439 , 1117 , 9894 , 3321 , 10000 , 7067 , 10708 , 780 , 3754 , 11267 , 10507 , 7159 , 11798 , 9772 , 7651 , 4814 , 3699 , 435 , 4272 , 7957 , 10316 , 7738 , 1154 , 2578 , 11919 , 6969 , 6220 , 5609 , 10311 , 5823 , 2525 , 2214 , 6396 , 10682 , 9975 , 7232 , 6632 , 10643 , 2001 , 7657 , 6885 , 882 , 2042 , 1791 , 4880 , 4355 , 10544 , 2372 , 3522 , 1452 , 6051 , 9989 , 4735 , 11334 , 1506 , 11116 , 7319 , 10877 , 8160 , 7214 , 3452 , 2037 , 10342 , 10939 , 9120 , 9087 , 4851 , 3237 , 10220 , 10861 , 5899 , 367 , 3780 , 6659 , 7532 , 1028 , 7484 , 1462 , 6237 , 1185 , 1826 , 1362 , 7692 , 8302 , 7628 , 10055 , 5545 , 9559 , 6288 , 11900 , 10245 , 9528 , 11089 , 8430 , 7469 , 2130 , 1410 , 7523 , 4255 , 11361 , 9717 , 4858 , 9579 , 257 , 3711 , 1993 , 10383 , 6139 , 10104 , 8276 , 669 , 4155 , 6888 , 6651 , 823 , 1412 , 3012 , 7639 , 6922 , 8882 , 2963 , 277 , 10452 , 4081 , 840 , 2497 , 763 , 11579 , 7752 , 3426 , 5356 , 943 , 2021 , 4270 , 11733 , 11919 , 7850 , 10925 , 9392 , 10724 , 9704 , 734 , 8708 , 12033 , 6560 , 6968 , 2455 , 5216 , 7067 , 9324 , 3638 , 1222 , 3283 , 12129 , 7562 , 8363 , 5658 , 6506 , 3871];
        uint[] memory h = new uint[](512);
        for (uint i = 0; i < 512; i++) {
            h[i] = ntt_h[i];
        }
        falcon.verify_nttpub(msgs, signature, h);
    }

    function test_Verify_kpubntt_iterative() public view {
        bytes memory msgs = "falcon in sol now?";
        // prettier-ignore
        int[512] memory tmps1 = [int(-106), -186, 85, 41, 99, 67, -55, -23, 224, -302, -21, 78, -237, 196, 60, 469, -112, -90, 25, -80, -234, 196, 10, -67, 92, -130, -119, 123, -419, 73, 239, -20, 65, -293, 121, 31, -378, 360, -119, -7, -57, -321, -113, 160, -98, -101, 37, 105, -282, 157, -190, 154, 164, -131, -70, -99, -181, -59, -135, 423, -167, 130, 23, -23, -444, 228, 268, -94, 125, -18, 52, -12, -159, -17, 101, 192, 137, 264, 63, -135, -70, 130, -135, 149, -37, 101, -253, 21, -110, -202, -224, -130, -1, -217, 215, -54, -121, 123, 127, 177, -58, 19, 84, -51, -34, -198, 19, 157, -329, 118, -109, -339, 279, 138, 11, -202, 3, -106, -74, 257, -21, 215, 5, 211, -168, 67, 39, 231, 135, -157, 61, -12, -1, 45, -18, 77, 231, 167, 48, 28, -56, 159, -196, 88, 28, -126, 45, -104, -110, -92, -69, -277, -120, 19, -23, 44, -116, -119, -122, 326, -238, -8, 79, -63, 383, -16, 275, -10, 328, -126, 111, -58, 122, -191, -126, -169, 237, 175, -13, -64, -164, -98, -98, 196, 63, -117, 201, -282, 207, 288, -352, 251, 69, 111, -140, 52, 125, -129, 70, 250, -276, -185, 59, -60, 376, 287, 45, 133, -443, -253, 58, -305, 170, -47, -54, -244, 181, -270, -188, 158, -171, -64, -119, 246, 101, -52, 343, -129, 38, 196, 227, 101, -144, 20, 281, -119, -235, 239, 38, -69, 293, 176, -158, -98, -100, 6, -543, -161, 427, -277, -166, 14, -61, 164, 170, -249, 76, -66, -101, 210, -306, 13, 47, 76, -293, 94, 114, -123, -102, -370, 87, -123, -52, -78, -12, 16, -29, 55, 60, 185, 131, -71, 230, 80, 157, -58, -442, 10, -98, 132, 3, 2, -28, 119, -212, 133, 205, -45, 160, -49, -186, 87, 228, 278, -248, 72, -86, -53, -286, 56, 3, -72, -20, 66, -28, -59, 225, 129, -197, 110, -237, 97, -53, 6, 83, -464, -221, 77, 7, -113, 86, 239, -198, 84, -372, 36, -260, -102, 101, -1, -177, -96, -238, -35, -98, 42, 205, -139, 20, -233, -117, -152, 114, -185, 52, 109, -12, -84, -12, 489, -274, 104, -22, 248, 144, -128, -106, 199, 99, -189, -100, -233, -266, -146, 383, 72, -216, -95, 86, 283, -254, -276, -61, -103, -264, -189, -71, 13, -186, 54, 179, 354, -159, 137, 22, 48, -101, 14, -13, -244, 5, 109, 230, 111, 151, 38, -171, 265, -30, -69, 79, -195, 126, 36, 24, 160, 214, -91, 85, -160, 157, 234, 390, 151, -189, -19, 324, -42, 82, -176, -111, 111, 113, -181, 123, -14, 165, 127, 172, -165, -328, -86, 16, -243, -174, 11, 73, 61, -12, -149, 33, -55, -287, -245, -234, -111, -40, -55, 162, -120, 213, -205, -163, -39, 444, 53, 166, 97, 47, 240, -194, -147, -139, 56, -142, 63, 147, -68, 36, -55, -62, -47, 39, -186, 133, -254, -162, -80, -75, 164, -197, -111, 199, 345, -171, -250, 252, 53, 179, 319, -192, 109, -277, 136, 15, 75, 18, -42, 353, -230, 70, 53];
        Falcon.Signature memory signature;
        signature
            .salt = "\xc5\xb4\x0c'p\xa32 \x9f\x89\xd5\xc4\xf1\x106\x0e\xe8\x8b1\x0fU\xc6\xc7\n\xf5\x01\xee8:|\xe4r\xdb\xbd>\xff\xa0V\xac\x97";
        signature.s1 = new int256[](512);
        for (uint i = 0; i < 512; i++) {
            signature.s1[i] = tmps1[i];
        }
        // prettier-ignore
        uint[512] memory ntt_h = [uint256(8228) , 4157 , 4221 , 5072 , 10526 , 11229 , 719 , 10057 , 9579 , 3914 , 172 , 3603 , 11895 , 6558 , 4730 , 182 , 8768 , 2170 , 12247 , 10107 , 3701 , 5137 , 3038 , 11063 , 1476 , 10170 , 4068 , 8360 , 10965 , 10973 , 3828 , 6890 , 11472 , 6545 , 8754 , 4782 , 1715 , 10064 , 313 , 1880 , 8504 , 8294 , 2197 , 8351 , 4111 , 1215 , 7458 , 8331 , 6226 , 1174 , 8736 , 5920 , 8975 , 1806 , 4634 , 3139 , 11651 , 3506 , 7769 , 2425 , 7533 , 4261 , 3971 , 3567 , 948 , 591 , 3689 , 1899 , 8683 , 2272 , 8601 , 10448 , 6198 , 737 , 4355 , 982 , 12237 , 11167 , 2792 , 8139 , 6622 , 3380 , 7520 , 7471 , 7636 , 11759 , 9499 , 9560 , 5935 , 322 , 2933 , 8572 , 9700 , 11135 , 7598 , 1182 , 7593 , 1903 , 7993 , 7034 , 2644 , 1311 , 7803 , 2604 , 2369 , 10951 , 11909 , 628 , 4959 , 1283 , 3285 , 5934 , 8222 , 9306 , 5951 , 6125 , 9838 , 3960 , 6429 , 10269 , 1133 , 11003 , 9674 , 2504 , 11706 , 6180 , 2692 , 9566 , 2003 , 12029 , 9536 , 437 , 3317 , 8415 , 1016 , 5265 , 2995 , 5186 , 1970 , 3150 , 3692 , 10069 , 11435 , 8198 , 117 , 8609 , 5092 , 148 , 8478 , 1449 , 9617 , 1819 , 5241 , 1182 , 8798 , 8038 , 9043 , 4728 , 2713 , 1024 , 3407 , 1682 , 11161 , 1494 , 4904 , 2504 , 12055 , 9443 , 3456 , 6992 , 1662 , 10110 , 5581 , 595 , 2714 , 4937 , 7909 , 11184 , 7655 , 9234 , 5173 , 5539 , 11793 , 8160 , 7240 , 983 , 5849 , 6301 , 3315 , 4228 , 3819 , 10724 , 8421 , 11654 , 10689 , 4900 , 143 , 14 , 9573 , 10390 , 8981 , 12163 , 6363 , 11769 , 7948 , 10250 , 5982 , 11477 , 1193 , 10266 , 2151 , 875 , 10874 , 9445 , 7328 , 9048 , 6985 , 11970 , 3016 , 8527 , 5761 , 10515 , 5081 , 7259 , 1003 , 1407 , 8700 , 3217 , 8133 , 1513 , 3222 , 5828 , 1944 , 2113 , 6499 , 11788 , 7940 , 2861 , 11843 , 7416 , 12170 , 12230 , 8248 , 2318 , 962 , 228 , 3930 , 4528 , 11508 , 6795 , 4412 , 1402 , 2569 , 6972 , 6162 , 7370 , 10877 , 8160 , 11116 , 7319 , 2037 , 10342 , 7214 , 3452 , 3522 , 2372 , 6051 , 1452 , 1506 , 11334 , 9989 , 4735 , 882 , 2042 , 6885 , 7657 , 1791 , 4880 , 4355 , 10544 , 7232 , 6632 , 10643 , 2001 , 2214 , 6396 , 9975 , 10682 , 8430 , 7469 , 9528 , 11089 , 6288 , 9559 , 11900 , 10245 , 10055 , 5545 , 8302 , 7628 , 7692 , 1362 , 1826 , 1185 , 1462 , 6237 , 7484 , 1028 , 6659 , 7532 , 367 , 3780 , 3237 , 10220 , 5899 , 10861 , 9087 , 4851 , 10939 , 9120 , 9324 , 3638 , 7067 , 5216 , 12033 , 6560 , 2455 , 6968 , 8363 , 5658 , 6506 , 3871 , 12129 , 7562 , 1222 , 3283 , 7752 , 11579 , 3426 , 5356 , 943 , 2021 , 11733 , 4270 , 7850 , 11919 , 10925 , 9392 , 734 , 8708 , 9704 , 10724 , 257 , 3711 , 10383 , 1993 , 8276 , 669 , 10104 , 6139 , 1410 , 2130 , 4255 , 7523 , 9579 , 4858 , 9717 , 11361 , 3012 , 1412 , 7639 , 6922 , 4155 , 6888 , 823 , 6651 , 8882 , 2963 , 277 , 10452 , 763 , 2497 , 4081 , 840 , 2573 , 11841 , 7419 , 2292 , 4053 , 1026 , 1679 , 2669 , 8529 , 3855 , 5749 , 1349 , 1293 , 6396 , 9561 , 1042 , 9973 , 4867 , 2883 , 1288 , 2471 , 3916 , 5445 , 5576 , 9463 , 2889 , 6541 , 9195 , 1922 , 12141 , 9127 , 6822 , 3995 , 3428 , 1349 , 1759 , 5368 , 2666 , 9111 , 6938 , 3497 , 4511 , 10885 , 7970 , 7823 , 7518 , 2886 , 8470 , 6994 , 6755 , 7448 , 10466 , 9700 , 10634 , 10463 , 6547 , 5717 , 6249 , 9343 , 987 , 10808 , 7270 , 11610 , 8314 , 11267 , 10507 , 3754 , 780 , 7651 , 9772 , 7159 , 11798 , 7067 , 10708 , 3321 , 10000 , 9018 , 8439 , 1117 , 9894 , 5823 , 2525 , 5609 , 10311 , 6220 , 6969 , 11919 , 2578 , 4272 , 435 , 3699 , 4814 , 10316 , 7957 , 7738 , 1154 , 1269 , 9088 , 932 , 4243 , 4636 , 4991 , 9940 , 4653 , 10503 , 12286 , 1200 , 11510 , 11115 , 9503 , 10112 , 7405 , 3127 , 10793 , 2026 , 7522 , 10044 , 7451 , 6373 , 746 , 530 , 7618 , 1116 , 11587 , 11605 , 5132 , 481 , 1282 ];
        uint[] memory h = new uint[](512);
        for (uint i = 0; i < 512; i++) {
            h[i] = ntt_h[i];
        }
        falcon.verify_nttpub_iterative(msgs, signature, h);
    }

    //demonstrating critical vulnerability: forge signature from original message
    function test_tetrationvuln1() public view {
        // example with Tetration test vector
        bytes memory msg1 = "falcon in sol now?";
        // prettier-ignore
        int[512] memory tmps1 = [int(-106), -186, 85, 41, 99, 67, -55, -23, 224, -302, -21, 78, -237, 196, 60, 469, -112, -90, 25, -80, -234, 196, 10, -67, 92, -130, -119, 123, -419, 73, 239, -20, 65, -293, 121, 31, -378, 360, -119, -7, -57, -321, -113, 160, -98, -101, 37, 105, -282, 157, -190, 154, 164, -131, -70, -99, -181, -59, -135, 423, -167, 130, 23, -23, -444, 228, 268, -94, 125, -18, 52, -12, -159, -17, 101, 192, 137, 264, 63, -135, -70, 130, -135, 149, -37, 101, -253, 21, -110, -202, -224, -130, -1, -217, 215, -54, -121, 123, 127, 177, -58, 19, 84, -51, -34, -198, 19, 157, -329, 118, -109, -339, 279, 138, 11, -202, 3, -106, -74, 257, -21, 215, 5, 211, -168, 67, 39, 231, 135, -157, 61, -12, -1, 45, -18, 77, 231, 167, 48, 28, -56, 159, -196, 88, 28, -126, 45, -104, -110, -92, -69, -277, -120, 19, -23, 44, -116, -119, -122, 326, -238, -8, 79, -63, 383, -16, 275, -10, 328, -126, 111, -58, 122, -191, -126, -169, 237, 175, -13, -64, -164, -98, -98, 196, 63, -117, 201, -282, 207, 288, -352, 251, 69, 111, -140, 52, 125, -129, 70, 250, -276, -185, 59, -60, 376, 287, 45, 133, -443, -253, 58, -305, 170, -47, -54, -244, 181, -270, -188, 158, -171, -64, -119, 246, 101, -52, 343, -129, 38, 196, 227, 101, -144, 20, 281, -119, -235, 239, 38, -69, 293, 176, -158, -98, -100, 6, -543, -161, 427, -277, -166, 14, -61, 164, 170, -249, 76, -66, -101, 210, -306, 13, 47, 76, -293, 94, 114, -123, -102, -370, 87, -123, -52, -78, -12, 16, -29, 55, 60, 185, 131, -71, 230, 80, 157, -58, -442, 10, -98, 132, 3, 2, -28, 119, -212, 133, 205, -45, 160, -49, -186, 87, 228, 278, -248, 72, -86, -53, -286, 56, 3, -72, -20, 66, -28, -59, 225, 129, -197, 110, -237, 97, -53, 6, 83, -464, -221, 77, 7, -113, 86, 239, -198, 84, -372, 36, -260, -102, 101, -1, -177, -96, -238, -35, -98, 42, 205, -139, 20, -233, -117, -152, 114, -185, 52, 109, -12, -84, -12, 489, -274, 104, -22, 248, 144, -128, -106, 199, 99, -189, -100, -233, -266, -146, 383, 72, -216, -95, 86, 283, -254, -276, -61, -103, -264, -189, -71, 13, -186, 54, 179, 354, -159, 137, 22, 48, -101, 14, -13, -244, 5, 109, 230, 111, 151, 38, -171, 265, -30, -69, 79, -195, 126, 36, 24, 160, 214, -91, 85, -160, 157, 234, 390, 151, -189, -19, 324, -42, 82, -176, -111, 111, 113, -181, 123, -14, 165, 127, 172, -165, -328, -86, 16, -243, -174, 11, 73, 61, -12, -149, 33, -55, -287, -245, -234, -111, -40, -55, 162, -120, 213, -205, -163, -39, 444, 53, 166, 97, 47, 240, -194, -147, -139, 56, -142, 63, 147, -68, 36, -55, -62, -47, 39, -186, 133, -254, -162, -80, -75, 164, -197, -111, 199, 345, -171, -250, 252, 53, 179, 319, -192, 109, -277, 136, 15, 75, 18, -42, 353, -230, 70, 53];
        Falcon.Signature memory signature;
        signature
            .salt = "\xc5\xb4\x0c'p\xa32 \x9f\x89\xd5\xc4\xf1\x106\x0e\xe8\x8b1\x0fU\xc6\xc7\n\xf5\x01\xee8:|\xe4r\xdb\xbd>\xff\xa0V\xac\x97";
        signature.s1 = new int256[](512);
        for (uint i = 0; i < 512; i++) {
            signature.s1[i] = tmps1[i];
        }
        // prettier-ignore
        uint[512] memory tmph = [uint(6018), 3543, 543, 3451, 10671, 4482, 686, 11742, 3415, 8727, 8346, 9831, 10529, 7539, 817, 345, 1502, 4029, 6252, 5831, 4746, 10403, 12236, 11638, 1823, 1067, 11978, 12242, 9126, 222, 12181, 5805, 6501, 279, 3744, 9274, 4303, 3886, 12198, 788, 2216, 4250, 7908, 866, 11036, 5740, 3060, 1013, 1838, 1033, 8210, 10076, 6110, 10074, 7337, 8444, 10786, 3896, 11651, 2785, 11071, 7373, 7605, 12005, 1815, 9786, 2707, 10461, 5076, 10760, 7898, 214, 7819, 2988, 5403, 5786, 7782, 4967, 1485, 8431, 2161, 6198, 3303, 4893, 4551, 8729, 4219, 2766, 3609, 7260, 7717, 9278, 2781, 3551, 11654, 4662, 9295, 8932, 703, 7512, 10652, 3087, 7435, 7609, 636, 10151, 8186, 8926, 6217, 8515, 4317, 9070, 8021, 112, 5118, 6354, 9730, 2490, 5543, 10978, 5998, 2816, 9513, 10413, 665, 9269, 10852, 7202, 4060, 10218, 11172, 7495, 10761, 2037, 368, 6840, 6401, 3539, 4243, 4462, 7141, 4922, 10212, 4506, 3515, 607, 8678, 58, 9219, 1049, 3309, 8025, 3604, 6768, 3923, 1631, 6558, 10884, 9873, 8973, 7710, 6599, 5347, 3952, 11553, 4299, 3501, 6107, 11964, 8840, 12117, 8935, 871, 206, 8813, 9492, 6658, 3414, 1813, 1563, 10985, 3386, 8258, 11771, 137, 1947, 402, 8573, 11692, 4560, 6780, 1847, 11025, 7583, 10636, 1508, 12073, 3769, 1343, 1459, 1492, 4788, 10543, 7433, 3017, 12021, 6709, 8841, 8915, 2581, 2236, 43, 5660, 11594, 3859, 9947, 8061, 11022, 2468, 8543, 6992, 7398, 10810, 7726, 7759, 7839, 11257, 6052, 10697, 4413, 11284, 2426, 5616, 3190, 10909, 5763, 9970, 12096, 4475, 2531, 7044, 1212, 12254, 10103, 11843, 1179, 11207, 1507, 8826, 2025, 4153, 5522, 6059, 209, 10101, 11048, 5911, 9425, 8052, 8826, 5619, 5222, 10481, 715, 8399, 2998, 2110, 6083, 6884, 7407, 3448, 2647, 11712, 1792, 11533, 12231, 9903, 9770, 8510, 5454, 3000, 8313, 3537, 7397, 4839, 9368, 8833, 8206, 3095, 5681, 4251, 9681, 6293, 3977, 4371, 6125, 10412, 734, 12211, 10815, 1220, 536, 8485, 12211, 7079, 9028, 7578, 8756, 9417, 8496, 11056, 992, 232, 6939, 576, 1447, 6648, 9738, 6118, 5286, 2892, 8596, 3788, 3835, 4051, 5241, 2360, 805, 9394, 2902, 6737, 6475, 7215, 7472, 5319, 3931, 5836, 6675, 3184, 409, 3510, 1886, 2937, 3969, 5331, 11352, 9375, 3526, 4666, 2783, 2898, 9443, 5413, 9932, 12146, 106, 7786, 8432, 3896, 5774, 10267, 10637, 11736, 720, 8246, 5315, 1843, 9132, 3767, 4962, 8275, 3995, 1751, 10958, 9320, 5895, 11212, 10768, 5281, 2836, 741, 9307, 7364, 7648, 6495, 670, 4783, 7016, 11121, 11743, 12190, 12173, 3856, 5451, 9190, 2992, 3229, 5610, 11945, 10566, 3616, 3642, 1082, 10679, 10943, 8447, 4245, 8062, 7475, 3507, 6403, 5820, 1951, 7393, 5435, 1914, 4606, 7176, 8791, 8080, 6836, 203, 8688, 6196, 11082, 8418, 4159, 10065, 9518, 10849, 3548, 7517, 12117, 12062, 5318, 2206, 8745, 10125, 946, 4027, 11859, 3755, 4930, 334, 9639, 1200, 11752, 9867, 4148, 9773, 426, 3605, 6899, 11297, 1478, 8646, 9937, 4138, 9058, 10513, 1110, 1229, 333, 3792, 6196, 1018, 2759, 6198, 7834, 7356, 5865, 4891, 9753, 7980, 7374, 11477, 3977, 8122, 11368, 5604, 11705, 3119, 3373, 9551, 11358, 7787, 5378, 9668, 7671, 10048, 6177, 5341, 87, 11016, 6498, 11316, 10006, 9555, 11043, 3413, 11782, 6594, 2702, 2712, 8549, 8874, 10101, 1317, 2011, 8158, 11678, 9893];
        uint[] memory h = new uint[](512);
        for (uint i = 0; i < 512; i++) {
            h[i] = tmph[i];
        }
        falcon.verify(msg1, signature, h);
        // Another (message, salt) with the same signature
        bytes memory msg2 = "falcon in sol now?\xc5";
        signature
            .salt = "\xb4\x0c'p\xa32 \x9f\x89\xd5\xc4\xf1\x106\x0e\xe8\x8b1\x0fU\xc6\xc7\n\xf5\x01\xee8:|\xe4r\xdb\xbd>\xff\xa0V\xac\x97";
        falcon.verify(msg2, signature, h);

        //
        // another example with a critical message, and another public key
        // this example is reproducible using `pythonref/forgery.py
        // the public key is different from the previous example.
        // code generated using pythonref/forgery.py.
        // public key
        // prettier-ignore
        uint[512] memory tmp_pk = [uint(11496), 8750,6367,8513,9698,2801,11184,7720,3044,6551,12169,6495,2608,10601,3965,2608,6931,5266,5015,11190,11904,11241,2735,6906,7831,6600,4500,9359,4245,5436,8774,2589,4561,8983,696,8332,4550,1996,2855,7575,2429,2784,869,12283,7148,11327,8000,2406,9422,7003,9693,10658,1286,7617,240,1465,4821,9727,6893,10912,4320,10947,11575,5020,1246,9103,12228,982,1652,5442,5066,1984,5969,10958,11600,6828,10785,9074,11562,8427,7384,10225,3146,9884,227,10528,6914,7012,11418,618,2344,2442,12118,1590,4659,9,6054,2974,1062,7889,7428,11552,10955,3953,11650,5488,3360,6419,2018,7855,11937,10273,11760,10619,2946,9827,1391,5288,10081,7879,436,2821,10976,4719,3805,9319,9630,2921,4919,11006,8476,822,3362,6488,3539,2966,9066,11199,3581,6766,9874,5432,8230,1904,10886,9536,650,3017,8013,3273,11999,10043,9288,8661,3001,9709,1944,7455,3436,5174,887,5047,7710,10546,5349,11586,10870,6055,587,5456,2913,7852,4569,89,11242,6656,7772,5474,11556,1074,5017,8253,6103,11848,4716,6126,4405,5651,6845,369,11740,7603,7746,7584,915,6450,9542,10494,256,9124,4106,8698,7618,1531,11543,9513,1711,1120,6401,11319,947,7814,4649,7342,10521,1379,7114,4336,6053,6221,1914,3752,8195,10946,5208,1259,11370,6416,5131,5381,8682,7596,8281,2484,11339,11788,7058,5553,2273,6449,608,11847,4196,2901,12045,6603,3256,9934,7986,8114,11513,907,8637,6623,4668,4038,11237,5537,4283,6388,6134,8930,2128,2128,2963,7004,8973,7762,171,10591,7196,745,2586,2633,10421,8891,3400,4224,2007,4723,10362,2104,8976,722,11441,2652,6325,6241,2988,11748,7855,9040,7088,9407,9770,867,2077,4362,12110,1082,1850,4862,4330,10985,5379,10483,7677,2619,2355,3252,2103,6398,11488,3782,3245,9556,5907,4738,8334,8587,6139,5343,6495,8498,7104,10335,8532,10159,8308,9264,10616,12269,4354,1430,4838,1508,10559,2651,6956,11497,8752,1131,2791,4011,4253,3438,9498,5714,10445,10070,5480,5019,6473,7725,1261,3066,198,7815,2246,3496,8064,739,5866,5569,11456,2244,668,8395,5445,2772,4408,9293,11014,761,3718,11571,3404,368,3579,10321,6736,11875,10187,529,280,2368,2568,4932,6205,7260,7792,7205,11919,1381,11963,3502,11363,7457,9950,4892,10373,5957,10007,711,11549,2571,8529,8934,5748,4109,6209,5302,5566,1970,3825,7545,351,11519,7545,2503,3567,1449,2813,4183,7617,12054,6684,8500,1397,2228,4403,10069,7801,4417,9204,1364,3084,3708,8282,9585,5338,10093,4234,6005,8209,1525,3841,5204,2613,2267,3108,8948,8153,7531,7324,9187,2570,684,4422,5060,8768,11619,3214,707,7175,5379,169,4774,6508,6510,3021,11514,179,4509,3931,3453,7772,4992,4043,12029,8039,9766,8752,5730,5298,2055,8370,9754,2872,731,9288,2970,315,5281,10632,4920,609,5117,4981,3040,9677,1530,695,10176,5260,3336,2120,6452,6772,3911,5640,4868];
        uint[] memory pk = new uint[](512);
        for (uint i = 0; i < 512; i++) {
            pk[i] = tmp_pk[i];
        }
        // signature s1
        // prettier-ignore
        int[512] memory tmp_s1 = [int(210), -65,-100,41,187,-178,329,-58,-214,409,36,238,-39,-227,-77,-141,36,256,-181,193,18,-156,-98,29,146,-297,459,-99,89,313,-157,-113,269,188,-51,39,382,-60,73,-130,131,-246,-281,95,-376,-16,-214,-50,-101,86,323,-316,53,-73,119,-303,169,182,73,279,167,-27,22,1,-48,262,-96,-74,65,-19,238,160,-512,-194,-245,13,180,-100,-97,-105,-7,110,40,-402,14,-42,154,6,-309,217,134,-169,34,-19,135,121,-95,183,-141,-77,1,322,231,-166,-118,120,180,-349,-49,173,-224,-142,58,189,117,-90,19,-308,185,118,218,385,-9,107,-350,181,87,272,7,120,296,-104,263,5,-271,155,-93,-12,-16,-85,-159,62,77,104,13,70,78,84,57,-44,-21,-15,-4,2,-7,135,148,-9,-195,40,-25,-68,-103,94,136,176,140,-214,-353,195,-47,-183,258,-161,22,-96,-89,-120,-307,-156,150,2,-210,-282,-18,-137,26,-167,-20,-138,214,-80,-193,144,-220,309,87,101,-74,-6,335,-153,-153,68,133,-107,-158,91,187,-76,57,-246,220,-272,-30,-143,24,-49,-364,-74,-336,519,-340,32,135,-269,122,40,252,228,-49,-185,-57,-311,101,511,-185,-12,301,-158,39,270,294,-42,202,-202,136,-60,-29,2,-118,104,-54,111,4,-76,-58,90,-325,-61,8,-110,-133,38,-12,163,93,147,-84,-6,-25,-91,230,-291,36,-104,-30,301,-189,114,93,-241,-115,-157,97,39,281,81,347,46,-106,-129,60,151,-55,54,262,84,221,-59,335,7,-108,116,36,-42,-79,117,-15,-23,-199,124,245,124,196,-42,127,-33,4,-257,222,-160,-91,-104,62,-117,-273,-94,58,-124,32,-1,-48,79,49,309,194,35,-146,79,111,-41,-98,-245,377,34,-5,-96,-63,-32,358,-11,-167,151,57,200,33,51,0,-156,-59,358,30,-266,119,20,-388,111,192,82,171,204,21,59,-13,-55,166,-18,230,71,-171,283,-233,223,-73,6,199,-31,-203,119,55,-24,-68,64,128,57,-66,15,-105,74,46,-176,181,179,48,51,327,-39,72,-167,93,343,286,-168,-280,-170,-96,146,32,-294,70,-40,-236,-113,184,-38,498,131,-148,-87,-82,174,-233,-181,-127,30,119,155,-104,126,-265,-193,-64,138,-60,201,-115,-158,212,193,205,261,-144,-193,44,90,111,-255,-139,-142,-10,226,170,161,16,-116,-33,-132,-157,360,-16,206,351,-95,526,72,-14,133,-9,146,69,-298,-196,-130,-215,-24,-44,-153,8,-232,157,23,44,-87,-94,51,119,-141,-196,74,-16,-241,-362,-91,217,-298,-284,-37,-68,120,-425,-40];
        Falcon.Signature memory sig;
        sig.s1 = new int256[](512);
        for (uint i = 0; i < 512; i++) {
            sig.s1[i] = tmp_s1[i];
        }
        // message
        bytes memory msg3 = "Send ______ 1 USDC ______ to vitalik.eth";
        // salt
        sig
            .salt = "\x20\x61\x6e\x64\x20\x35\x30\x30\x30\x30\x20\x55\x53\x44\x43\x20\x74\x6f\x20\x52\x65\x6b\x74\x4d\x65\x2e\x65\x74\x68\x21";
        falcon.verify(msg3, sig, pk);
        // message
        bytes
            memory msg4 = "Send ______ 1 USDC ______ to vitalik.eth and 50000 USDC to RektMe.eth!";
        // salt
        sig.salt = "";
        falcon.verify(msg4, sig, pk);
    }

    // demonstrating medium vulnerability: malleabily in tetration signature
    function test_tetrationvuln2() public view {
        bytes memory msgs = "falcon in sol now?";
        // prettier-ignore
        int[512] memory tmps1 = [
            int(-106), -186, 85, 41, 99, 67, -55, -23, 224, -302, -21, 78, -237, 196, 60, 469, -112, -90, 25, -80, -234, 196, 10, -67, 92, -130, -119, 123, -419, 73, 239, -20, 65, -293, 121, 31, -378, 360, -119, -7, -57, -321, -113, 160, -98, -101, 37, 105, -282, 157, -190, 154, 164, -131, -70, -99, -181, -59, -135, 423, -167, 130, 23, -23, -444, 228, 268, -94, 125, -18, 52, -12, -159, -17, 101, 192, 137, 264, 63, -135, -70, 130, -135, 149, -37, 101, -253, 21, -110, -202, -224, -130, -1, -217, 215, -54, -121, 123, 127, 177, -58, 19, 84, -51, -34, -198, 19, 157, -329, 118, -109, -339, 279, 138, 11, -202, 3, -106, -74, 257, -21, 215, 5, 211, -168, 67, 39, 231, 135, -157, 61, -12, -1, 45, -18, 77, 231, 167, 48, 28, -56, 159, -196, 88, 28, -126, 45, -104, -110, -92, -69, -277, -120, 19, -23, 44, -116, -119, -122, 326, -238, -8, 79, -63, 383, -16, 275, -10, 328, -126, 111, -58, 122, -191, -126, -169, 237, 175, -13, -64, -164, -98, -98, 196, 63, -117, 201, -282, 207, 288, -352, 251, 69, 111, -140, 52, 125, -129, 70, 250, -276, -185, 59, -60, 376, 287, 45, 133, -443, -253, 58, -305, 170, -47, -54, -244, 181, -270, -188, 158, -171, -64, -119, 246, 101, -52, 343, -129, 38, 196, 227, 101, -144, 20, 281, -119, -235, 239, 38, -69, 293, 176, -158, -98, -100, 6, -543, -161, 427, -277, -166, 14, -61, 164, 170, -249, 76, -66, -101, 210, -306, 13, 47, 76, -293, 94, 114, -123, -102, -370, 87, -123, -52, -78, -12, 16, -29, 55, 60, 185, 131, -71, 230, 80, 157, -58, -442, 10, -98, 132, 3, 2, -28, 119, -212, 133, 205, -45, 160, -49, -186, 87, 228, 278, -248, 72, -86, -53, -286, 56, 3, -72, -20, 66, -28, -59, 225, 129, -197, 110, -237, 97, -53, 6, 83, -464, -221, 77, 7, -113, 86, 239, -198, 84, -372, 36, -260, -102, 101, -1, -177, -96, -238, -35, -98, 42, 205, -139, 20, -233, -117, -152, 114, -185, 52, 109, -12, -84, -12, 489, -274, 104, -22, 248, 144, -128, -106, 199, 99, -189, -100, -233, -266, -146, 383, 72, -216, -95, 86, 283, -254, -276, -61, -103, -264, -189, -71, 13, -186, 54, 179, 354, -159, 137, 22, 48, -101, 14, -13, -244, 5, 109, 230, 111, 151, 38, -171, 265, -30, -69, 79, -195, 126, 36, 24, 160, 214, -91, 85, -160, 157, 234, 390, 151, -189, -19, 324, -42, 82, -176, -111, 111, 113, -181, 123, -14, 165, 127, 172, -165, -328, -86, 16, -243, -174, 11, 73, 61, -12, -149, 33, -55, -287, -245, -234, -111, -40, -55, 162, -120, 213, -205, -163, -39, 444, 53, 166, 97, 47, 240, -194, -147, -139, 56, -142, 63, 147, -68, 36, -55, -62, -47, 39, -186, 133, -254, -162, -80, -75, 164, -197, -111, 199, 345, -171, -250, 252, 53, 179, 319, -192, 109, -277, 136, 15, 75, 18, -42, 353, -230, 70, 53
        ];
        Falcon.Signature memory signature;
        signature.s1 = new int256[](512);
        for (uint i = 0; i < 512; i++) {
            signature.s1[i] = tmps1[i];
            if (signature.s1[i] < 0) {
                signature.s1[i] = q + int(signature.s1[i]);
            }
        }
        signature
            .salt = "\xc5\xb4\x0c'p\xa32 \x9f\x89\xd5\xc4\xf1\x106\x0e\xe8\x8b1\x0fU\xc6\xc7\n\xf5\x01\xee8:|\xe4r\xdb\xbd>\xff\xa0V\xac\x97";
        // prettier-ignore
        uint[512] memory tmph = [uint(6018), 3543, 543, 3451, 10671, 4482, 686, 11742, 3415, 8727, 8346, 9831, 10529, 7539, 817, 345, 1502, 4029, 6252, 5831, 4746, 10403, 12236, 11638, 1823, 1067, 11978, 12242, 9126, 222, 12181, 5805, 6501, 279, 3744, 9274, 4303, 3886, 12198, 788, 2216, 4250, 7908, 866, 11036, 5740, 3060, 1013, 1838, 1033, 8210, 10076, 6110, 10074, 7337, 8444, 10786, 3896, 11651, 2785, 11071, 7373, 7605, 12005, 1815, 9786, 2707, 10461, 5076, 10760, 7898, 214, 7819, 2988, 5403, 5786, 7782, 4967, 1485, 8431, 2161, 6198, 3303, 4893, 4551, 8729, 4219, 2766, 3609, 7260, 7717, 9278, 2781, 3551, 11654, 4662, 9295, 8932, 703, 7512, 10652, 3087, 7435, 7609, 636, 10151, 8186, 8926, 6217, 8515, 4317, 9070, 8021, 112, 5118, 6354, 9730, 2490, 5543, 10978, 5998, 2816, 9513, 10413, 665, 9269, 10852, 7202, 4060, 10218, 11172, 7495, 10761, 2037, 368, 6840, 6401, 3539, 4243, 4462, 7141, 4922, 10212, 4506, 3515, 607, 8678, 58, 9219, 1049, 3309, 8025, 3604, 6768, 3923, 1631, 6558, 10884, 9873, 8973, 7710, 6599, 5347, 3952, 11553, 4299, 3501, 6107, 11964, 8840, 12117, 8935, 871, 206, 8813, 9492, 6658, 3414, 1813, 1563, 10985, 3386, 8258, 11771, 137, 1947, 402, 8573, 11692, 4560, 6780, 1847, 11025, 7583, 10636, 1508, 12073, 3769, 1343, 1459, 1492, 4788, 10543, 7433, 3017, 12021, 6709, 8841, 8915, 2581, 2236, 43, 5660, 11594, 3859, 9947, 8061, 11022, 2468, 8543, 6992, 7398, 10810, 7726, 7759, 7839, 11257, 6052, 10697, 4413, 11284, 2426, 5616, 3190, 10909, 5763, 9970, 12096, 4475, 2531, 7044, 1212, 12254, 10103, 11843, 1179, 11207, 1507, 8826, 2025, 4153, 5522, 6059, 209, 10101, 11048, 5911, 9425, 8052, 8826, 5619, 5222, 10481, 715, 8399, 2998, 2110, 6083, 6884, 7407, 3448, 2647, 11712, 1792, 11533, 12231, 9903, 9770, 8510, 5454, 3000, 8313, 3537, 7397, 4839, 9368, 8833, 8206, 3095, 5681, 4251, 9681, 6293, 3977, 4371, 6125, 10412, 734, 12211, 10815, 1220, 536, 8485, 12211, 7079, 9028, 7578, 8756, 9417, 8496, 11056, 992, 232, 6939, 576, 1447, 6648, 9738, 6118, 5286, 2892, 8596, 3788, 3835, 4051, 5241, 2360, 805, 9394, 2902, 6737, 6475, 7215, 7472, 5319, 3931, 5836, 6675, 3184, 409, 3510, 1886, 2937, 3969, 5331, 11352, 9375, 3526, 4666, 2783, 2898, 9443, 5413, 9932, 12146, 106, 7786, 8432, 3896, 5774, 10267, 10637, 11736, 720, 8246, 5315, 1843, 9132, 3767, 4962, 8275, 3995, 1751, 10958, 9320, 5895, 11212, 10768, 5281, 2836, 741, 9307, 7364, 7648, 6495, 670, 4783, 7016, 11121, 11743, 12190, 12173, 3856, 5451, 9190, 2992, 3229, 5610, 11945, 10566, 3616, 3642, 1082, 10679, 10943, 8447, 4245, 8062, 7475, 3507, 6403, 5820, 1951, 7393, 5435, 1914, 4606, 7176, 8791, 8080, 6836, 203, 8688, 6196, 11082, 8418, 4159, 10065, 9518, 10849, 3548, 7517, 12117, 12062, 5318, 2206, 8745, 10125, 946, 4027, 11859, 3755, 4930, 334, 9639, 1200, 11752, 9867, 4148, 9773, 426, 3605, 6899, 11297, 1478, 8646, 9937, 4138, 9058, 10513, 1110, 1229, 333, 3792, 6196, 1018, 2759, 6198, 7834, 7356, 5865, 4891, 9753, 7980, 7374, 11477, 3977, 8122, 11368, 5604, 11705, 3119, 3373, 9551, 11358, 7787, 5378, 9668, 7671, 10048, 6177, 5341, 87, 11016, 6498, 11316, 10006, 9555, 11043, 3413, 11782, 6594, 2702, 2712, 8549, 8874, 10101, 1317, 2011, 8158, 11678, 9893];
        uint[] memory h = new uint[](512);
        for (uint i = 0; i < 512; i++) {
            h[i] = tmph[i];
        }
        falcon.verify(msgs, signature, h);
    }
}
