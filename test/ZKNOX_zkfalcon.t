
// code generated using pythonref/generate_falcon_test_vectors.py.
pragma solidity ^0.8.25;

import {Test, console} from "forge-std/Test.sol";
import "../src/ZKNOX_NTT.sol";
import "../src/ZKNOX_falcon_utils.sol";
import "../src/ZKNOX_zkfalcon.sol";
import "../src/ZKNOX_falcon_deploy.sol";

contract ZKNOX_FalconTest is Test {
    ZKNOX_zkfalcon falcon;

    //stateful initialisation
    function setUp() public {
        bytes32 salt = keccak256(abi.encodePacked("ZKnox"));

        falcon = new ZKNOX_zkfalcon();
    }
function testVector0() public view {
// public key
// forgefmt: disable-next-line
uint256[32] memory tmp_pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];
uint256[] memory pkc = new uint[](32);
for (uint256 i = 0; i < 32; i++) {
	pkc[i] = tmp_pkc[i];
}
// signature s2
// forgefmt: disable-next-line
uint256[32] memory tmp_s2 = [164644987462089184116908480938059648197194986270155530197996987118944792539, 21647738124618817360070431363529841029492334967377447677415940408277565505768, 143439835109965357964236390380877492966150800252293237739589993902402043991, 21660109397150493297253448439984534041177649266881144593595586540864339783536, 53329389686289225499290357085986823974266175526450638691556273229591806051, 83371618074500298689848915620153520466227017359434741420324727158995550370, 61843583420768091875357435063109858539901113918630651061627938738989170751, 21513453299308649277057968529470182744784755860395503140369492070390961745464, 21709579340495443833201304458626072885019519608863949464453279204718704263380, 21341751146405456349555494511625155769583270387922304161750763027759085649987, 21541404590111345328188574681628796256909770978297078010988575784271632478201, 21594735678264253266552772896965444447291272678455658185606066720569804652710, 111639872125794220143834607112467973706831412210022515268218357493502443768, 21527266044171167820491700810669017884637964952489229262969146370756221021947, 21221607509110574013245885424013247010623923007807664867050507692942801973227, 21396846677101370655457608394405827227265711870704532179501512338345938452558, 399631931544367343506338083558886156163404253264190163503811325109105393873, 132840284439547200557784590552887388032873247039370087056126179705031295107, 137816151811404369594218902194220836531270389828008789923796738349283869165, 21608541898857263819275782140073831273857248625036116008792419995967865487780, 21362947892205542318921351958505121273530039285231057295953359663739136651235, 113407150466621234823830104269363199262651730292809763137087600308317662924, 21495792651941598953192745854255413665477860382880610202507742244811415027817, 166088449939854988364656518473509571754565200221613269748051838976916193569, 85136470118033837993169216584842645896914822462120136958457437169763942460, 21504298321414851244744780793325318514553333633157257286404372909779412713479, 21478119598061257888590149814303606849358092858531731911212190511455041630024, 192908937794946975767125637063552691600535830898067619552787988060497510692, 21704276588566482931938676052605160913686025112657407584265065975334833893101, 21408887339793415437823473766262682053995982635355006732881015273510645477112, 21693349097107836175379104100305542926278381287356566782869158864159827165231, 79509277208031035603863142820826145501602626290557930407041372378464464693];
uint256[] memory s2 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	s2[i] = tmp_s2[i];
}
// message = "My name is Renaud from ZKNOX!!!!"
bytes memory message  = "\x4d\x79\x20\x6e\x61\x6d\x65\x20\x69\x73\x20\x52\x65\x6e\x61\x75\x64\x20\x66\x72\x6f\x6d\x20\x5a\x4b\x4e\x4f\x58\x21\x21\x21\x21"; 
bytes memory salt = "\xc5\x05\xc7\xb1\x3a\x9d\x56\x72\xad\x4b\xe1\x0c\x74\x4a\xc3\x3d\x9e\x92\xa2\x3b\xde\xe6\xe1\x4d\x47\x0e\xe7\xdc\x14\x2f\xe4\xef\xf4\x18\x2a\x49\xbe\xee\xc8\xe4"; 
bool result = falcon.verify(message, salt, s2, pkc);
assertEq(true, result);}
function testVector1() public view {
// public key
// forgefmt: disable-next-line
uint256[32] memory tmp_pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];
uint256[] memory pkc = new uint[](32);
for (uint256 i = 0; i < 32; i++) {
	pkc[i] = tmp_pkc[i];
}
// signature s2
// forgefmt: disable-next-line
uint256[32] memory tmp_s2 = [222951695437144889340741112454755686377790011465594421057470323606702915600, 199984737577577561362556729203048580601826135460237666752398809662621548945, 97501914256110582508079720928190417513685060679479577443098111337989746602, 21106766952164999040246233375722345877916158092403613688525394358475488833489, 21458358065044285385743002574286589975384409754622828283190871600287401586642, 21286977318757653415092420400170345426202115613545587980200314904020783988902, 235315688777796225359643663104947438376204604062250127738024487342745333708, 287998880362754358596477076428577364756525782485162003882334475439869341677, 21320872096556422258043527723033766393340494527636621418129333030508526436459, 5620479904413315740354191758302682578905421282012397067415582395305570300, 184076589626107440845740086513261044278808200713852875781333712973538602759, 703533719691248358151027517812616669750236130515435467774651473455635050400, 21508159718701360345157255777264228269880371219288236467583975183391366250539, 408472901896533403491516929260818347305919004798213682640117863730766622539, 21654806887811839507309687279642580966850803473544223167792237867630079127519, 21430092205497411719832070091656688527933445020965754158314332230004285321134, 756535599871637360407235977179741567120203476207907361895349008457669685226, 9158595468923603764089914752282714981560347264358255821143203351293407013, 53008943823891780904671400490081524160441837558418139149049715354018787010, 21504296676893894040436393200804178774629319531475149566715020315403750354868, 35665529270353516626175275077348122620272905832338086006060992416755744947, 307761675611867817274270045918680696305120604932504378206281761717282615215, 167852525096259956267877285724740413353069989170104393230134703094211227539, 21373556976743757925109540819287235454398821701524135198613290745080121536458, 21537866986830173897678261170107682897166819726867483516563248406517467590210, 21567902335548610713503255955368552149570902577447342681420053578057993301767, 144885476363292011350893283214611944350292327129388160972586702058047549416, 418742759342957311668489002932809140230315557493127605118624759476315631404, 141349490674806381686007786874516463516423906312997458362391043199880802178, 491185883465858846559967885796061456557468283563270555674529358228483682218, 21449524692459591294204264149252185337232796730552527674186401598280197156755, 21508158311876081452839715903867939574540633329187706651793519551716784865523];
uint256[] memory s2 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	s2[i] = tmp_s2[i];
}
// message = "My name is Simon also from ZKNOX"
bytes memory message  = "\x4d\x79\x20\x6e\x61\x6d\x65\x20\x69\x73\x20\x53\x69\x6d\x6f\x6e\x20\x61\x6c\x73\x6f\x20\x66\x72\x6f\x6d\x20\x5a\x4b\x4e\x4f\x58"; 
bytes memory salt = "\x3a\x16\x5b\xdc\xe9\x10\xa1\xda\xb2\xbf\x35\x54\x7a\x88\x78\x26\x66\x36\xf2\xa8\x56\x31\x2e\xde\xb9\xc4\xc1\xf0\xc1\x4f\x2d\xdc\xf1\xa5\x41\x5b\x8d\x83\xb7\x10"; 
bool result = falcon.verify(message, salt, s2, pkc);
assertEq(true, result);}
function testVector2() public view {
// public key
// forgefmt: disable-next-line
uint256[32] memory tmp_pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];
uint256[] memory pkc = new uint[](32);
for (uint256 i = 0; i < 32; i++) {
	pkc[i] = tmp_pkc[i];
}
// signature s2
// forgefmt: disable-next-line
uint256[32] memory tmp_s2 = [321894192469756800652895752939063023630645055558729081104248549051546796080, 21619470328880854589058384319793360777874114756557736391982279724757020770414, 381641527224576586745201751420263076021186837368216818778471740080266882969, 21575300791935182021253940859362150212675415931051173016781369585499123167230, 178457781430988090908950763242948534044760316377204125420394619996221735029, 21343841480928843236816350946518749339731220211732190237893654800172208292046, 49800876719011041725697542032267921468192827730303850517570882637313224454, 21631837094108641144453298383634085173078447745834965024127417880462831780005, 21504620331135909107321534276533487958753151442866432517293876968622405714019, 353371170335621411428969514545722136038188327710441945971385309620488503297, 104573184733147167075169304819062330963367467712499309305506143603710558656, 309201206835189616345472994788299279857725028750059899082002225990474661980, 35663997455350386365013979479781693631670314868153964680491115692100431674, 21559395582630728501367474421593142871194746121227352320040452912442072367200, 786248912028369129768742573696755808062176599089654447393618332708866436975, 598961478564875343421416309016470528366665313884497981820804908241566314260, 21490484049792733046623957292101635064964989807366365176789846663613355065346, 199655367906189170115056791903539812847495226176645910966821137112177573910, 14462609525311233788745850993608116516512488418902887431257696057443430391, 155809808514968743659068069496941959857691648741018903333280133973334556834, 21682749475539697308511922132490448570388508741577418667500488838974904151908, 162557640595683936262456825435864786258049529347156236175676969651518046245, 21666846908413607564165829988452264327381699332584554249137782279216112348583, 236760526239171049964677796735190422426522992774274396096315870672965599245, 21290513466209446533396285733525956363180966084547386424681259718389085962316, 21356200729210428096005804945157320372220090754961182513497770656998697795725, 295069045568029240368846575086104677102153254641280828611600299109003362395, 335702807554439549717912433194239572617609721685806460203111224601212289148, 116941949987388695303254557148304688651478558215159643870267366011827466228, 21007813811022765431252673970564357583667614720266405821512823785596515582039, 859018876516781550486979834508216089212775676598543000225811400607174361218, 21695442725783588899065566269850162989907436679735526309533239611617500803028];
uint256[] memory s2 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	s2[i] = tmp_s2[i];
}
// message = "My name is Nicolas from ZKNOXtoo"
bytes memory message  = "\x4d\x79\x20\x6e\x61\x6d\x65\x20\x69\x73\x20\x4e\x69\x63\x6f\x6c\x61\x73\x20\x66\x72\x6f\x6d\x20\x5a\x4b\x4e\x4f\x58\x74\x6f\x6f"; 
bytes memory salt = "\x02\x42\xcc\x76\xf6\xf4\x72\xa6\x5f\x55\xe5\xf3\xf9\xa4\xe6\x49\x0b\x98\x8f\x7a\xa4\x38\x3b\x66\xc2\x0f\xe7\x42\x7b\xa6\x40\xab\x3e\xa8\x20\x31\xe4\x35\x97\x2f"; 
bool result = falcon.verify(message, salt, s2, pkc);
assertEq(true, result);}
function testVector3() public view {
// public key
// forgefmt: disable-next-line
uint256[32] memory tmp_pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];
uint256[] memory pkc = new uint[](32);
for (uint256 i = 0; i < 32; i++) {
	pkc[i] = tmp_pkc[i];
}
// signature s2
// forgefmt: disable-next-line
uint256[32] memory tmp_s2 = [21544940014581841679230755630807213212182545754161164474319899681749626585183, 320127695840268854131458798315637020019391985971209653750117530221293875073, 242388792540667223631569258731903116701822234357590180075178318093678149674, 21260479146967126272788896870962423542389568911748724009766493285070804692778, 250894660656837835617365622218134149291667892140410462786618220207134617573, 21691582983008716779188146943663840743464257502027053431257903052061984698357, 21437480632847998257425695440037284630158192873716746779212558319977966940047, 150503228448005241766859077389278478471738909641946427172665665171281346720, 249128217967810397175240394718602235116801209677677486479877557878141824880, 251218714255478169508305805381368719071281634883968099235319471541985935388, 21259032152726550347777308277299258816812142198855118297415354110805675749350, 166413964367104399517300668855194879177883650964860026065631795332431216652, 21688049041266589338797075425751025134625655978132433547601162112960320307398, 113078217189700464590141671305793387811517803937909213996960691877188415420, 21248431663477611288240269875187189642630460179667151920185866652248284659850, 669641000679341027985624744366866025181709298247255085947885169525384032240, 21703958272501352602831351015705388102929957977886861494979723651715022204746, 21494018386098954081163364656829897175348996920854634746164447737513883152201, 21465753960216924064017647743619162802461954019817600610776210892295097036711, 21471047303098844085675654970365239614305445281387041341534460321025790455738, 21562928419001543296077805979657649154692989734851646106658194138529442627652, 21332917989407926319254123115064284024650937645703063825065952126655724072752, 21532888163622512713724592607496896715339467651141694619051901547232214122558, 21658339158042209117631466892859799500073034256033468645077526995074973445944, 21622997606537757143149245428498879902574639748052785234759839720405879357495, 207048216654221091026831868456995101208223074769016256978818701956987563918, 7069086809389909313216339501911533831767301212743381094732706480907157723, 21484867214426684373293390331696731755413538240265741243020000204735138442974, 21478122046474952963660238111210619534465101676612161219600571058892635439160, 21304970095440369403058029952690991010427448134530491889614924479323004153742, 21594409516776406254862277444279113900643663765834630418164466335540221771880, 21502858907847500203043145661593586229612996561587442733858111324601122947378];
uint256[] memory s2 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	s2[i] = tmp_s2[i];
}
// message = "We are ZKNox, you already know!!"
bytes memory message  = "\x57\x65\x20\x61\x72\x65\x20\x5a\x4b\x4e\x6f\x78\x2c\x20\x79\x6f\x75\x20\x61\x6c\x72\x65\x61\x64\x79\x20\x6b\x6e\x6f\x77\x21\x21"; 
bytes memory salt = "\xee\x9c\xcf\xe8\x0f\x4a\x03\xd2\x3b\x8f\x7d\x89\xc4\x74\x5b\x6f\xc7\xe0\x71\xd4\x15\xb4\xc9\x6f\x3a\xf5\x21\x73\xc5\xcb\x07\xe1\x69\x15\xde\x64\xaa\xf6\x8c\xc4"; 
bool result = falcon.verify(message, salt, s2, pkc);
assertEq(true, result);}
function testVector4() public view {
// public key
// forgefmt: disable-next-line
uint256[32] memory tmp_pkc = [5662797900309780854973796610500849947334657117880689816302353465126500706865, 19773102689601973621062070293263100534733440101750387150077711329493973274058, 14606681890476865709816748627007131256488820167404174518724605890405097603719, 15845234755931409677594030697035096324340457247480758851130851814703350289524, 5524941775098342886171484209767745714294893760953145782448900256027476885810, 15301033023652038200658165594502048003364566882283859976805808429697192567788, 18875246040654000517074755552890901133645669291006567534900678519700207707731, 11843395683334522200668269515783436692309636627649985746204914551011013629864, 8419305811746464065544475584323153271481428319969733938911379662274846467111, 18343417927809591481517183183479503623951147924071925629514120039495430967592, 10007451325105194000131443764495043320645967197761209321537835667210153693191, 779487061150515667795843171268512499191273448454307717194241961063365614179, 14889466660684110621550004892629051623956217990147793956971155241422811501259, 2995124819739638247263964985959552967489690950312509006670204449438399867779, 16698797261630410217796026169071784061995015858612862963622742163763641855864, 13129716852402613948762495927854872029721399215764359316540986925328111906305, 8620514528683669238836845045565231437047299941974001946945409334379184590766, 5184181041252042291984928267300200431567362250531180743278111084485128161037, 15555356690664302555826193017277818624355238475260445618945780405430020481200, 19264077329172342356817033544893125657281034846341493111114385757819435942150, 8708853592016768361541207473719404660232059936330605270802350059910738161396, 21018648773068189736719755689803981281912117625241701774409626083005150670687, 267026197077955750670312407002345619518873569178283514941902712705828521229, 14359242962640593260752841229079220345384234239741953227891227234975247894859, 8320354099602406351863744856415421903486499003224102136141447162113864442068, 17564344674783852357247325589247473882830766139750808683064015010041459773180, 12601232530472338126510941067000966999586933909071534455578397454667291628041, 17820703520112071877812607241017358905719406745793395857586668204300579510382, 20977963461796112341763752649093803701879441191599296283127418471622134932903, 5627732773047409045458881938100601008133088383905060686572856121439798106767, 2602661464000108367786729796742170641292899005030508211661215565063118195399, 20110282897068872581106488251090599973196923955248066799683528955504800771309];
uint256[] memory pkc = new uint[](32);
for (uint256 i = 0; i < 32; i++) {
	pkc[i] = tmp_pkc[i];
}
// signature s2
// forgefmt: disable-next-line
uint256[32] memory tmp_s2 = [21668937355702261899481705367000206371951722115409975579455554655140580634313, 21548468505519104697758788561765086490011638706657197883699776027599321051059, 273864589189051686538419459627340966834610350097359900469745319180346011367, 21313801171619787513018130829187634397414085982981292906961442265125181653072, 21292604727313494727684794551426534234692687638756451012522891563747416485791, 35339556502132291037325896110565997182685218892192601369890321640590421812, 21644203788394870454899587289492378377852889031580726058217850719869191204789, 21414191633377494921729613491336417438245100732718956443688068362118157304030, 21170362743431103410545018093672717480678034179229496200186121669256211136523, 21624445917026144525319567445391927876819457351633228396716812625115363934248, 261823872517313995552570634544107322118549973059431162868275919135733854193, 21627980339091952226076665935388139065704008991673966307965832317558457905084, 21695440304263683128070931678791844300403786913373913340123067288949530701800, 21332914808181864209989943766738497293390067886166861432543553772947667746840, 53334512120173657879373436310514304419261055626391884834827152612377624660, 21423023496181576380462998732023592018055244020183587481439769714590984110340, 21267867790014153480646468735790520092921401450380756715693211586456876351617, 228253611635245117647319347770140988015740552408306536989562648811836878742, 21665406788937962788943526115954842725850595607549219633282562603126746120268, 61841863019013762638107942292179642609276980413927428592979547249605423103, 21302879481559674459621053118614575390218800447721432074959795267585223372706, 21498997030330767550741525917413993712332647109848737634050261101617706512349, 21647415580673675096208813604120731220127318173743769695782194608821026947382, 21339982762636469837271284441921372402156777533347921795452569285752401506268, 21310272465003435698148803017259946384337772337240948872369820371861891854128, 21525827731041570998310976915746022027459667082264172886272788452034723131278, 21596174665466229933342584770017346813543874434302710012465355085106893958964, 230014123098570203906174015195809167037838142390192535511782868608165162786, 21603570188099105053274246182429867136563251017020886821395637710465620639814, 371367015642188458249981126565871177905495253449989084358485240632989647241, 111642568037362721675803106093411959594925811608586801799626741676233731963, 134285666102265688930076706528205255464858584328334132481526842852247339133];
uint256[] memory s2 = new uint256[](32);
for (uint i = 0; i < 32; i++) {
	s2[i] = tmp_s2[i];
}
// message = "Practical security on the chain."
bytes memory message  = "\x50\x72\x61\x63\x74\x69\x63\x61\x6c\x20\x73\x65\x63\x75\x72\x69\x74\x79\x20\x6f\x6e\x20\x74\x68\x65\x20\x63\x68\x61\x69\x6e\x2e"; 
bytes memory salt = "\xc9\x06\xb3\x88\xc9\x0b\x4a\xb0\xb7\x8f\x33\x70\x28\x50\x00\xe7\x90\x13\x74\x14\xa9\xf8\xcc\x49\xdc\xdb\x38\x01\xa6\x59\x9a\x29\xb2\xca\xb6\x9c\x35\xe2\x14\xdd"; 
bool result = falcon.verify(message, salt, s2, pkc);
assertEq(true, result);}
}
