// code generated using pythonref/generate_falcon_compact_test_vectors.py.
pragma solidity ^0.8.25;

import {Test, console} from "forge-std/Test.sol";
import "../src/ZKNOX_NTT.sol";
import "../src/ZKNOX_falcon_utils.sol";
import "../src/ZKNOX_ethfalcon.sol";
import "../src/ZKNOX_falcon_deploy.sol";

contract ZKNOX_FalconTest is Test {
    ZKNOX_falcon_compact falcon;
    //exemple of stateless initialisation, no external contract provided
    ZKNOX_NTT ntt = new ZKNOX_NTT(address(0), address(0), 12289, 12265);
    // forgefmt: disable-next-line
    uint256[1024] psi_rev = [uint256(1), 1479, 4043, 7143, 5736, 4134, 1305, 722, 1646, 1212, 6429, 9094, 3504, 8747, 9744, 8668, 4591, 6561, 5023, 6461, 10938, 4978, 6512, 8961, 11340, 9664, 9650, 4821, 563, 9314, 2744, 3006, 1000, 4320, 12208, 3091, 9326, 4896, 2366, 9238, 11563, 7678, 1853, 140, 1635, 9521, 11112, 4255, 7203, 10963, 9088, 9275, 790, 955, 11119, 2319, 9542, 4846, 3135, 3712, 9995, 11227, 3553, 7484, 544, 5791, 11950, 2468, 11267, 9, 9447, 11809, 10616, 8011, 7300, 6958, 1381, 2525, 4177, 8705, 2837, 5374, 4354, 130, 2396, 4452, 3296, 8340, 12171, 9813, 2197, 5067, 11336, 3748, 5767, 827, 3284, 2881, 5092, 10200, 10276, 9000, 9048, 11560, 10593, 10861, 334, 2426, 4632, 5755, 11029, 4388, 10530, 3707, 3694, 7110, 11934, 3382, 2548, 8058, 4890, 6378, 9558, 3932, 5542, 12144, 3459, 3637, 1663, 1777, 1426, 7635, 2704, 5291, 7351, 8653, 9140, 160, 12286, 7852, 2166, 8374, 7370, 12176, 3364, 10600, 9018, 4057, 2174, 7917, 2847, 7875, 7094, 9509, 10805, 4895, 2305, 5042, 4053, 9644, 3985, 7384, 476, 3531, 420, 6730, 2178, 1544, 9273, 243, 9289, 11618, 3136, 5191, 8889, 9890, 9103, 6882, 10163, 1630, 11136, 2884, 8241, 10040, 3247, 9603, 2969, 3978, 6957, 3510, 9919, 9424, 7575, 8146, 1537, 12047, 8585, 2678, 5019, 545, 7404, 1017, 10657, 7205, 10849, 8526, 3066, 12262, 11244, 2859, 2481, 7277, 2912, 5698, 354, 7428, 390, 11516, 3778, 8456, 442, 2401, 5101, 11222, 4976, 10682, 875, 3780, 7278, 11287, 5088, 4284, 6022, 9302, 2437, 3646, 10102, 9723, 6039, 9867, 11854, 7952, 10911, 1912, 11796, 8193, 9908, 5444, 9041, 1207, 5277, 1168, 11885, 4645, 1065, 2143, 3957, 2839, 10162, 151, 11858, 1579, 2505, 5906, 52, 3174, 1323, 2766, 3336, 6055, 6415, 677, 3445, 7509, 4698, 5057, 12097, 10968, 10240, 4912, 5241, 9369, 3127, 4169, 3482, 787, 6821, 11279, 12231, 241, 11286, 3532, 11404, 6008, 10333, 7280, 2844, 3438, 8077, 975, 5681, 8812, 142, 1105, 4080, 421, 3602, 6221, 4624, 6212, 3263, 8689, 5886, 4782, 5594, 3029, 4213, 504, 605, 9987, 2033, 8291, 10367, 8410, 11316, 11035, 10930, 5435, 3710, 6196, 6950, 5446, 8301, 468, 11973, 11907, 6152, 4948, 11889, 10561, 6153, 6427, 3643, 5415, 56, 9090, 5206, 6760, 1702, 10302, 11635, 3565, 5315, 8214, 7373, 4324, 10120, 11767, 5079, 3262, 11011, 2344, 6715, 1973, 5925, 1018, 3514, 11248, 7500, 7822, 5537, 4749, 8500, 12142, 5456, 7840, 6844, 8429, 7753, 1050, 6118, 3818, 9606, 1190, 5876, 2281, 2031, 5333, 8298, 8320, 12133, 2767, 453, 6381, 418, 3772, 5429, 4774, 1293, 7552, 2361, 1843, 9259, 4115, 218, 2908, 8855, 8760, 2882, 10484, 1954, 2051, 2447, 6147, 576, 3963, 1858, 7535, 3315, 11863, 2925, 347, 3757, 1975, 10596, 3009, 174, 11566, 9551, 5868, 2655, 6554, 1512, 11939, 5383, 10474, 9087, 7796, 6920, 10232, 6374, 1483, 49, 11026, 1489, 2500, 10706, 5942, 1404, 11964, 11143, 948, 4049, 3728, 1159, 5990, 652, 5766, 6190, 11994, 4016, 4077, 2919, 3762, 6328, 7183, 10695, 1962, 7991, 8960, 12121, 9597, 7105, 1200, 6122, 9734, 3956, 1360, 6119, 5297, 3054, 6803, 9166, 1747, 5919, 4433, 3834, 5257, 683, 2459, 8633, 12225, 9786, 9341, 6507, 1566, 11454, 6224, 3570, 8049, 3150, 1319, 4046, 11580, 1958, 7967, 2078, 1112, 11231, 8210, 11367, 441, 1826, 9363, 9118, 4489, 3708, 3238, 11153, 3449, 7080, 1092, 3359, 3205, 8024, 8611, 10361, 11825, 2068, 10900, 4404, 346, 3163, 8257, 7449, 6127, 12164, 11749, 10763, 4222, 8051, 11677, 8921, 8062, 7228, 11071, 11851, 3515, 9011, 5993, 6877, 8080, 1536, 10568, 4103, 9860, 11572, 8700, 1373, 2982, 3448, 11946, 4538, 1908, 4727, 11081, 1866, 7078, 10179, 716, 10125, 6873, 1705, 2450, 11475, 416, 10224, 5826, 7725, 8794, 1756, 4145, 8755, 8328, 5063, 4176, 8524, 10771, 2461, 2275, 8022, 5653, 6693, 6302, 11710, 3889, 212, 6323, 9175, 2769, 5734, 1176, 5508, 11014, 4860, 11164, 11158, 10844, 11841, 1014, 7508, 7365, 10962, 3607, 5232, 8347, 12221, 10029, 7723, 5836, 3200, 1535, 9572, 60, 7784, 10032, 10872, 5676, 3087, 6454, 7406, 3975, 7326, 8545, 2528, 3056, 5845, 5588, 11877, 5102, 1255, 506, 10897, 5784, 9615, 2212, 3338, 9013, 1178, 9513, 6811, 8778, 10347, 3408, 1165, 2575, 10453, 425, 11897, 10104, 377, 4578, 375, 1620, 1038, 11366, 6085, 4167, 6092, 2231, 2800, 12096, 1522, 2151, 8946, 8170, 5002, 12269, 7681, 5163, 10545, 1314, 2894, 3654, 11951, 3947, 9834, 6599, 7350, 7174, 1248, 2442, 8330, 6492, 6330, 10141, 5724, 10964, 1945, 1029, 8945, 6691, 10397, 3624, 6825, 4906, 4670, 512, 7735, 11295, 9389, 12050, 1804, 1403, 6195, 7100, 406, 10602, 7021, 12143, 8914, 9998, 7954, 3393, 8464, 8054, 7376, 8761, 11667, 1737, 4499, 5672, 8307, 9342, 11653, 5609, 4605, 2689, 180, 8151, 5219, 1409, 204, 6780, 9806, 2054, 1344, 9247, 463, 8882, 3981, 1468, 4475, 7043, 3017, 1236, 9168, 4705, 2600, 11232, 4739, 4251, 1226, 6771, 11925, 2360, 3028, 5216, 11839, 10345, 11711, 5368, 11779, 7628, 2622, 6903, 8929, 7605, 7154, 12226, 8481, 8619, 2373, 7302, 10891, 9199, 826, 5043, 5789, 8787, 6671, 10631, 9224, 1506, 7806, 5703, 4719, 11538, 6389, 11379, 4693, 9951, 11872, 9996, 6138, 8820, 4443, 8871, 7186, 10398, 1802, 10734, 1590, 4411, 1223, 2334, 2946, 6828, 2637, 4510, 881, 365, 10362, 1015, 7250, 6742, 2485, 904, 24, 10918, 11009, 11675, 980, 11607, 5082, 7699, 5207, 8239, 844, 7087, 3221, 8016, 8452, 2595, 5289, 6627, 567, 2941, 1406, 2633, 6940, 2945, 3232, 11996, 3769, 7434, 3944, 8190, 6759, 5604, 11024, 9282, 10118, 8809, 9169, 6184, 6643, 6086, 8753, 5370, 8348, 8536, 1282, 3572, 9457, 2021, 4730, 3229, 1706, 3929, 5054, 3154, 9004, 7929, 12282, 1936, 8566, 11444, 11520, 5526, 50, 216, 767, 3805, 4153, 10076, 1279, 11424, 9617, 5170, 12100, 3116, 10080, 1763, 3815, 1734, 1350, 5832, 8420, 4423, 1530, 1694, 10036, 10421, 9559, 5411, 4820, 1160, 9195, 7771, 2840, 9811, 4194, 9270, 7315, 4565, 7211, 10506, 944, 7519, 7002, 8620, 7624, 6883, 3020, 5673, 5410, 1251, 10499, 7014, 2035, 11249, 6164, 10407, 8176, 12217, 10447, 3840, 2712, 4834, 2828, 4352, 1241, 4378, 3451, 4094, 3045, 5781, 9646, 11194, 7592, 8711, 8823, 10588, 7785, 11511, 2626, 530, 10808, 9332, 9349, 2046, 8972, 9757, 8957, 12150, 3268, 3795, 1849, 6513, 4523, 4301, 457, 8, 8835, 3758, 8071, 4390, 10013, 982, 2593, 879, 9687, 10388, 11787, 7171, 6063, 8496, 8443, 1573, 5969, 4649, 9360, 6026, 1030, 11823, 10608, 8468, 11415, 9988, 5650, 12119, 648, 12139, 2307, 8000, 11498, 9855, 9416, 2827, 9754, 11169, 21, 6481];
    // forgefmt: disable-next-line
    uint256[1024] psi_inv_rev = [uint256(1), 10810, 5146, 8246, 11567, 10984, 8155, 6553, 3621, 2545, 3542, 8785, 3195, 5860, 11077, 10643, 9283, 9545, 2975, 11726, 7468, 2639, 2625, 949, 3328, 5777, 7311, 1351, 5828, 7266, 5728, 7698, 4805, 8736, 1062, 2294, 8577, 9154, 7443, 2747, 9970, 1170, 11334, 11499, 3014, 3201, 1326, 5086, 8034, 1177, 2768, 10654, 12149, 10436, 4611, 726, 3051, 9923, 7393, 2963, 9198, 81, 7969, 11289, 8652, 8830, 145, 6747, 8357, 2731, 5911, 7399, 4231, 9741, 8907, 355, 5179, 8595, 8582, 1759, 7901, 1260, 6534, 7657, 9863, 11955, 1428, 1696, 729, 3241, 3289, 2013, 2089, 7197, 9408, 9005, 11462, 6522, 8541, 953, 7222, 10092, 2476, 118, 3949, 8993, 7837, 9893, 12159, 7935, 6915, 9452, 3584, 8112, 9764, 10908, 5331, 4989, 4278, 1673, 480, 2842, 12280, 1022, 9821, 339, 6498, 11745, 10146, 11224, 7644, 404, 11121, 7012, 11082, 3248, 6845, 2381, 4096, 493, 10377, 1378, 4337, 435, 2422, 6250, 2566, 2187, 8643, 9852, 2987, 6267, 8005, 7201, 1002, 5011, 8509, 11414, 1607, 7313, 1067, 7188, 9888, 11847, 3833, 8511, 773, 11899, 4861, 11935, 6591, 9377, 5012, 9808, 9430, 1045, 27, 9223, 3763, 1440, 5084, 1632, 11272, 4885, 11744, 7270, 9611, 3704, 242, 10752, 4143, 4714, 2865, 2370, 8779, 5332, 8311, 9320, 2686, 9042, 2249, 4048, 9405, 1153, 10659, 2126, 5407, 3186, 2399, 3400, 7098, 9153, 671, 3000, 12046, 3016, 10745, 10111, 5559, 11869, 8758, 11813, 4905, 8304, 2645, 8236, 7247, 9984, 7394, 1484, 2780, 5195, 4414, 9442, 4372, 10115, 8232, 3271, 1689, 8925, 113, 4919, 3915, 10123, 4437, 3, 12129, 3149, 3636, 4938, 6998, 9585, 4654, 10863, 10512, 10626, 11848, 922, 4079, 1058, 11177, 10211, 4322, 10331, 709, 8243, 10970, 9139, 4240, 8719, 6065, 835, 10723, 5782, 2948, 2503, 64, 3656, 9830, 11606, 7032, 8455, 7856, 6370, 10542, 3123, 5486, 9235, 6992, 6170, 10929, 8333, 2555, 6167, 11089, 5184, 2692, 168, 3329, 4298, 10327, 1594, 5106, 5961, 8527, 9370, 8212, 8273, 295, 6099, 6523, 11637, 6299, 11130, 8561, 8240, 11341, 1146, 325, 10885, 6347, 1583, 9789, 10800, 1263, 12240, 10806, 5915, 2057, 5369, 4493, 3202, 1815, 6906, 350, 10777, 5735, 9634, 6421, 2738, 723, 12115, 9280, 1693, 10314, 8532, 11942, 9364, 426, 8974, 4754, 10431, 8326, 11713, 6142, 9842, 10238, 10335, 1805, 9407, 3529, 3434, 9381, 12071, 8174, 3030, 10446, 9928, 4737, 10996, 7515, 6860, 8517, 11871, 5908, 11836, 9522, 156, 3969, 3991, 6956, 10258, 10008, 6413, 11099, 2683, 8471, 6171, 11239, 4536, 3860, 5445, 4449, 6833, 147, 3789, 7540, 6752, 4467, 4789, 1041, 8775, 11271, 6364, 10316, 5574, 9945, 1278, 9027, 7210, 522, 2169, 7965, 4916, 4075, 6974, 8724, 654, 1987, 10587, 5529, 7083, 3199, 12233, 6874, 8646, 5862, 6136, 1728, 400, 7341, 6137, 382, 316, 11821, 3988, 6843, 5339, 6093, 8579, 6854, 1359, 1254, 973, 3879, 1922, 3998, 10256, 2302, 11684, 11785, 8076, 9260, 6695, 7507, 6403, 3600, 9026, 6077, 7665, 6068, 8687, 11868, 8209, 11184, 12147, 3477, 6608, 11314, 4212, 8851, 9445, 5009, 1956, 6281, 885, 8757, 1003, 12048, 58, 1010, 5468, 11502, 8807, 8120, 9162, 2920, 7048, 7377, 2049, 1321, 192, 7232, 7591, 4780, 8844, 11612, 5874, 6234, 8953, 9523, 10966, 9115, 12237, 6383, 9784, 10710, 431, 12138, 2127, 9450, 8332, 5808, 12268, 1120, 2535, 9462, 2873, 2434, 791, 4289, 9982, 150, 11641, 170, 6639, 2301, 874, 3821, 1681, 466, 11259, 6263, 2929, 7640, 6320, 10716, 3846, 3793, 6226, 5118, 502, 1901, 2602, 11410, 9696, 11307, 2276, 7899, 4218, 8531, 3454, 12281, 11832, 7988, 7766, 5776, 10440, 8494, 9021, 139, 3332, 2532, 3317, 10243, 2940, 2957, 1481, 11759, 9663, 778, 4504, 1701, 3466, 3578, 4697, 1095, 2643, 6508, 9244, 8195, 8838, 7911, 11048, 7937, 9461, 7455, 9577, 8449, 1842, 72, 4113, 1882, 6125, 1040, 10254, 5275, 1790, 11038, 6879, 6616, 9269, 5406, 4665, 3669, 5287, 4770, 11345, 1783, 5078, 7724, 4974, 3019, 8095, 2478, 9449, 4518, 3094, 11129, 7469, 6878, 2730, 1868, 2253, 10595, 10759, 7866, 3869, 6457, 10939, 10555, 8474, 10526, 2209, 9173, 189, 7119, 2672, 865, 11010, 2213, 8136, 8484, 11522, 12073, 12239, 6763, 769, 845, 3723, 10353, 7, 4360, 3285, 9135, 7235, 8360, 10583, 9060, 7559, 10268, 2832, 8717, 11007, 3753, 3941, 6919, 3536, 6203, 5646, 6105, 3120, 3480, 2171, 3007, 1265, 6685, 5530, 4099, 8345, 4855, 8520, 293, 9057, 9344, 5349, 9656, 10883, 9348, 11722, 5662, 7000, 9694, 3837, 4273, 9068, 5202, 11445, 4050, 7082, 4590, 7207, 682, 11309, 614, 1280, 1371, 12265, 11385, 9804, 5547, 5039, 11274, 1927, 11924, 11408, 7779, 9652, 5461, 9343, 9955, 11066, 7878, 10699, 1555, 10487, 1891, 5103, 3418, 7846, 3469, 6151, 2293, 417, 2338, 7596, 910, 5900, 751, 7570, 6586, 4483, 10783, 3065, 1658, 5618, 3502, 6500, 7246, 11463, 3090, 1398, 4987, 9916, 3670, 3808, 63, 5135, 4684, 3360, 5386, 9667, 4661, 510, 6921, 578, 1944, 450, 7073, 9261, 9929, 364, 5518, 11063, 8038, 7550, 1057, 9689, 7584, 3121, 11053, 9272, 5246, 7814, 10821, 8308, 3407, 11826, 3042, 10945, 10235, 2483, 5509, 12085, 10880, 7070, 4138, 12109, 9600, 7684, 6680, 636, 2947, 3982, 6617, 7790, 10552, 622, 3528, 4913, 4235, 3825, 8896, 4335, 2291, 3375, 146, 5268, 1687, 11883, 5189, 6094, 10886, 10485, 239, 2900, 994, 4554, 11777, 7619, 7383, 5464, 8665, 1892, 5598, 3344, 11260, 10344, 1325, 6565, 2148, 5959, 5797, 3959, 9847, 11041, 5115, 4939, 5690, 2455, 8342, 338, 8635, 9395, 10975, 1744, 7126, 4608, 20, 7287, 4119, 3343, 10138, 10767, 193, 9489, 10058, 6197, 8122, 6204, 923, 11251, 10669, 11914, 7711, 11912, 2185, 392, 11864, 1836, 9714, 11124, 8881, 1942, 3511, 5478, 2776, 11111, 3276, 8951, 10077, 2674, 6505, 1392, 11783, 11034, 7187, 412, 6701, 6444, 9233, 9761, 3744, 4963, 8314, 4883, 5835, 9202, 6613, 1417, 2257, 4505, 12229, 2717, 10754, 9089, 6453, 4566, 2260, 68, 3942, 7057, 8682, 1327, 4924, 4781, 11275, 448, 1445, 1131, 1125, 7429, 1275, 6781, 11113, 6555, 9520, 3114, 5966, 12077, 8400, 579, 5987, 5596, 6636, 4267, 10014, 9828, 1518, 3765, 8113, 7226, 3961, 3534, 8144, 10533, 3495, 4564, 6463, 2065, 11873, 814, 9839, 10584, 5416, 2164, 11573, 2110, 5211, 10423, 1208, 7562, 10381, 7751, 343, 8841, 9307, 10916, 3589, 717, 2429, 8186, 1721, 10753, 4209, 5412, 6296, 3278, 8774, 438, 1218, 5061, 4227, 3368, 612, 4238, 8067, 1526, 540, 125, 6162, 4840, 4032, 9126, 11943, 7885, 1389, 10221, 464, 1928, 3678, 4265, 9084, 8930, 11197, 5209, 8840, 1136, 9051, 8581, 7800, 3171, 2926, 10463];

    //stateful initialisation
    function setUp() public {
        bytes32 salt = keccak256(abi.encodePacked("ZKnox"));

        falcon = new ZKNOX_falcon_compact();

        //non compact contract
        address a_psirev; //address of the precomputations bytecode contract
        address a_psiInvrev; //address of the precomputations bytecode contract

        (a_psirev, a_psiInvrev) = Deploy(salt);

        falcon.update(a_psirev, a_psiInvrev);
    }

    function testVector0() public view {
        // public key
        // forgefmt: disable-next-line
        uint256[32] memory tmp_pkc = [9807818718891730533966615164509575764017151053524099258423976834772553965140, 18340098138125467691447337077959785268149994316939452976998993957504853156265, 5198133703327284157071422809205815024336408019642137871855761911766001193757, 885309680723773951581445950479448442138188963959751701993810286786334563851, 19751655564167833205324936936214418086799632798155386652828683172706408935156, 13449342659324330278443856651216754520591114337785977560380735844903743330507, 21412685081650650572110719760616900735599281269400856811705495088893808813464, 7182455876228287393000419492025555097227813236263190704105821148459893329094, 10346702731445215087289400465904665036614373649415073766421551882524955579599, 2602661461191686318241399797978336432747493635009153906211421228123447493354, 17460152192629988224191839342813524149690975760517934797656766276578763941977, 8030501380784039896959436505501001505082538439109709855711095179607370313313, 1869334252111587522914549075648788783845949858255579782083590402809098144636, 17244605423862552671483849252199675991941590481856488840270787535924580718702, 11336265795525104660827282529254071061160673084427642199020414766362588092858, 7834392541464967164445071157396824232455621343468123833119795953667476294495, 19320749074383776626289869794062002119037822327089474229301777373758894647631, 15804769950401279065265498737970159234892108086909038079651927057616326110849, 5524941774629792613265643604106102575196474389604272009945361978094039402215, 7912189081096546922096985544357356245951107957167270713824777693799477413938, 9251517013408700470756725384748473476160720415021619476382719063671064631329, 980629886819687668154444089811786886341348988887074213615781934824155389444, 5940413397816454703448409408340853562548545866597888595192275835122337254858, 3477241430632946704913201778186656752154449432278581298631128816987460934160, 19684655324690250642900619926419342622662744597902662173890575167707890264962, 21136817025198787960771334147393601715672137869525072998232149469960570804861, 715695489957163697708304262996430301414652155424663974257962371003055997411, 779487062625276624243092988713096201766390140956957709636694708471170673149, 18108615907818392958604720912508457986590141052566906373861374637494342583430, 4888923900533397196030088094647918125568719406578813186855259309838660932599, 20133355404703468652353168553951350193203296046835794955257435485399706185274, 6958150576137026963644397829477422234280792505821200919066265083919800276574];
        uint256[] memory pkc = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            pkc[i] = tmp_pkc[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory s2 = [21649177790571192151286347015496942774998047093443469911824293759971769921428, 268561837228003295750097962055377173144230591962156166013405983500166901722, 373131625068829243878329325423678131041649088938736656507320119997555081235, 21486956906798985719744375447418457093904022330284178432016463274856548335792, 21046685012579207363779083391328077072214150550607548013536002123977240477986, 21624441549379106406854913087313490894795813631028932379313967382686196510643, 21269307451108998178385520109334456835115990194191195737525785771781959909565, 21502531263687643325340175878774636041406187334634592429142727315400727670519, 21645644447053892427347704348572035349652711108703358737702992269605067960232, 21642434488002171509128269223391903377510003992725863045650229316731768864833, 143119470082566254482735508500984469699860060818744295831990820277956915152, 21329707513272854740751761229950211571450422559001525308753079369050633482098, 21274936790822894191602613586986915689519661452929637034834680332795904471016, 323334360936185288001981502514033468909440677622868552612107777952939454224, 123679299536821298309830082798375208376610949331800767508152351976155721432, 21491932279213207751766589616948004610084312966776105784769653908907333255233, 21555542660741624619295241800731825770453854520453475890665283178064948298017, 21221927933047296480928267470961179332618989116613413084747202280410795475009, 21640345869013883370330016229125346816596850570010888955143002957579576672404, 447342652619835196009820811808904031226531727490450346028265756926131110099, 48035216006736122407389636281329469805748676305369281203171327493607718987, 21518434450972238337302563984051994092825336572101022453461300155810011086937, 333938521709614508411251346141738162769014840087489168548614530158677590118, 21322638943617910190789463252175561671279485636811843560369873363276365299985, 67147494647851671533097211665243328708469268023218856658099323225006878424, 116612876865130439291083919507652316067243925780313881626436539371081498829, 21676008001193555476662926248472147257885449589381323941811680418544747741313, 127542681867544440369323810542605531185295482507825078859650437370710524036, 21474589727324966696397422730377349856660942504908738086594141842221836664953, 204955823209712158529229531556743920712069026834325166406926177293848227824, 55101682679218165125147635923326063419450638759116465378302788679604895838, 198216003314064520968126849996156841255555215727010889276036638293899030319];
        ZKNOX_falcon_compact.CompactSignature memory sig;
        sig.s2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            sig.s2[i] = s2[i];
        }
        // message
        bytes memory message = "My name is Renaud";
        sig.salt =
            "\xab\x0b\xae\x31\x63\x39\x89\x43\x04\xe3\x58\x77\xb0\xc2\x8a\x9b\x1f\xd1\x66\xc7\x96\xb9\xcc\x25\x8a\x06\x4a\x8f\x57\xe2\x7f\x2a\x5b\x8d\x54\x8a\x72\x8c\x94\x44";
        bool result = falcon.verifyNIST(message, sig.salt, sig.s2, pkc);
        assertEq(true, result);
    }

    function testVector1() public view {
        // public key
        // forgefmt: disable-next-line
        uint256[32] memory tmp_pkc = [9807818718891730533966615164509575764017151053524099258423976834772553965140, 18340098138125467691447337077959785268149994316939452976998993957504853156265, 5198133703327284157071422809205815024336408019642137871855761911766001193757, 885309680723773951581445950479448442138188963959751701993810286786334563851, 19751655564167833205324936936214418086799632798155386652828683172706408935156, 13449342659324330278443856651216754520591114337785977560380735844903743330507, 21412685081650650572110719760616900735599281269400856811705495088893808813464, 7182455876228287393000419492025555097227813236263190704105821148459893329094, 10346702731445215087289400465904665036614373649415073766421551882524955579599, 2602661461191686318241399797978336432747493635009153906211421228123447493354, 17460152192629988224191839342813524149690975760517934797656766276578763941977, 8030501380784039896959436505501001505082538439109709855711095179607370313313, 1869334252111587522914549075648788783845949858255579782083590402809098144636, 17244605423862552671483849252199675991941590481856488840270787535924580718702, 11336265795525104660827282529254071061160673084427642199020414766362588092858, 7834392541464967164445071157396824232455621343468123833119795953667476294495, 19320749074383776626289869794062002119037822327089474229301777373758894647631, 15804769950401279065265498737970159234892108086909038079651927057616326110849, 5524941774629792613265643604106102575196474389604272009945361978094039402215, 7912189081096546922096985544357356245951107957167270713824777693799477413938, 9251517013408700470756725384748473476160720415021619476382719063671064631329, 980629886819687668154444089811786886341348988887074213615781934824155389444, 5940413397816454703448409408340853562548545866597888595192275835122337254858, 3477241430632946704913201778186656752154449432278581298631128816987460934160, 19684655324690250642900619926419342622662744597902662173890575167707890264962, 21136817025198787960771334147393601715672137869525072998232149469960570804861, 715695489957163697708304262996430301414652155424663974257962371003055997411, 779487062625276624243092988713096201766390140956957709636694708471170673149, 18108615907818392958604720912508457986590141052566906373861374637494342583430, 4888923900533397196030088094647918125568719406578813186855259309838660932599, 20133355404703468652353168553951350193203296046835794955257435485399706185274, 6958150576137026963644397829477422234280792505821200919066265083919800276574];
        uint256[] memory pkc = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            pkc[i] = tmp_pkc[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory s2 = [194682686577610227246794695790715774126944874938428808986542410689990230135, 21209578797232041709286278565353757389708021321244238293915949802285695044, 21546703545696180855681069975918364541250822957120857472490640683003863957701, 108107261259864131647640314879209136401220200481432262235088649804704657342, 21278466953220005277143488220296682264666514238642259014027042528002340892575, 21356210062360815728479234982603977588355313360474497173479485111652984881228, 28600167887805239548180466269769444397148101494273412969588445637293899880, 21373553283207204848640764270744320634713030558788244955341093174867868844108, 187286759473542881013576550970547849203367076170543633199274462815663238984, 60401549871109243896928853540737834993354618518134892921660777037918580606, 95732160517032057921925508485491761636601354631527318630385656666669920224, 21207469605214262683320661946857337645668320236778396279280173490279165734874, 21460455414142077064495604464593687296831794405111486628929870506891858673755, 5631668306887557050738494558619849146545757022917648253048896176919490406, 63930472044930065098192495828103724454479173831074445973909762468460625926, 7395981111584989711043970861311579896839398611611897377580501422996074344, 14458188131905473014631970539328817583903503039603445810250206317962199091, 47708110970044448321413739320727634051394143775801958882647561653199372524, 21695119179420030207088390014818971321051832965749095039316269331789351104509, 21596496221609714947242360606041609205955645180558924037830182175085078523726, 21103550603542902924851553372701121327442172391783259240989921079025583063193, 21700415654645830251846677077602552557948858800574869254354992268239749054624, 362531723894909670115203445621122542563648112070875341719204299042632302813, 512397349459355985850600546641917543052807609594473422614121390394526859303, 222950675969320959868148959667226049295692074114584663424378885879099371392, 104245864054057079326974862843064049808915620551997214427772035469701033736, 21550557362206209354206290369581073342571981668216140867660132300165473513435, 21623004206828566858889248265475832231414896189265833848347282522444344524844, 174920398624128739911197446561742917144717286645578866601687611454642651271, 408469186433220486059854700233846396289332066861950535963850596883314114568, 433206415358416069256686675196271782522173307238240827950474013955889049588, 256517211524099221464913041288946341925530632579246662806331665088535658538];
        ZKNOX_falcon_compact.CompactSignature memory sig;
        sig.s2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            sig.s2[i] = s2[i];
        }
        // message
        bytes memory message = "My name is Simon";
        sig.salt =
            "\x91\x89\x90\xff\x93\xe0\x65\x6b\x5f\x75\xb0\x87\x29\xc6\x0e\x6a\x9d\x73\x52\xb9\xef\xd2\xe3\x3e\x3d\x1b\xa6\xe6\xd8\x9e\xdf\xa6\x71\x26\x6e\xce\x6b\xe7\xbb\x5a";
        bool result = falcon.verifyNIST(message, sig.salt, sig.s2, pkc);
        assertEq(true, result);
    }

    function testVector2() public view {
        // public key
        // forgefmt: disable-next-line
        uint256[32] memory tmp_pkc = [9807818718891730533966615164509575764017151053524099258423976834772553965140, 18340098138125467691447337077959785268149994316939452976998993957504853156265, 5198133703327284157071422809205815024336408019642137871855761911766001193757, 885309680723773951581445950479448442138188963959751701993810286786334563851, 19751655564167833205324936936214418086799632798155386652828683172706408935156, 13449342659324330278443856651216754520591114337785977560380735844903743330507, 21412685081650650572110719760616900735599281269400856811705495088893808813464, 7182455876228287393000419492025555097227813236263190704105821148459893329094, 10346702731445215087289400465904665036614373649415073766421551882524955579599, 2602661461191686318241399797978336432747493635009153906211421228123447493354, 17460152192629988224191839342813524149690975760517934797656766276578763941977, 8030501380784039896959436505501001505082538439109709855711095179607370313313, 1869334252111587522914549075648788783845949858255579782083590402809098144636, 17244605423862552671483849252199675991941590481856488840270787535924580718702, 11336265795525104660827282529254071061160673084427642199020414766362588092858, 7834392541464967164445071157396824232455621343468123833119795953667476294495, 19320749074383776626289869794062002119037822327089474229301777373758894647631, 15804769950401279065265498737970159234892108086909038079651927057616326110849, 5524941774629792613265643604106102575196474389604272009945361978094039402215, 7912189081096546922096985544357356245951107957167270713824777693799477413938, 9251517013408700470756725384748473476160720415021619476382719063671064631329, 980629886819687668154444089811786886341348988887074213615781934824155389444, 5940413397816454703448409408340853562548545866597888595192275835122337254858, 3477241430632946704913201778186656752154449432278581298631128816987460934160, 19684655324690250642900619926419342622662744597902662173890575167707890264962, 21136817025198787960771334147393601715672137869525072998232149469960570804861, 715695489957163697708304262996430301414652155424663974257962371003055997411, 779487062625276624243092988713096201766390140956957709636694708471170673149, 18108615907818392958604720912508457986590141052566906373861374637494342583430, 4888923900533397196030088094647918125568719406578813186855259309838660932599, 20133355404703468652353168553951350193203296046835794955257435485399706185274, 6958150576137026963644397829477422234280792505821200919066265083919800276574];
        uint256[] memory pkc = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            pkc[i] = tmp_pkc[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory s2 = [83368463789534418773637917004411568927501911403895260829890950549917085510, 433204964410165772229288582996469014456189653196716054825558692668499701689, 21688378788326145424938921071855435819016802944263471693535254173686258008162, 146653078386307804090039222208390332928510107395024111740198918716498051188, 192913359185061762802723790788884584228224807132989579462123563036071559185, 174923844694821791934365346412698913579997006764233948403642131135873679453, 177005206335748389376011005549313189090625290449510339466352320906119938093, 134282376976841906304938012574764364392167368186650194440790850273608019721, 295386229280433231287760567181087228975995579731381654901195811143075704672, 125451425776786298050543208073374739504665461692398687750671224607865831604, 21204348602132740190454090220489702379894369405497208055988054938560954422, 21057290839861310575833430112239923949020599492746791990902359662767911600223, 21484865920369066350256879276212371710827087624812849324775341498238497980441, 21543494557077558157767139946612620445400114578116864246357529792722748714980, 21228997365271203934918701785407403377043740508677831614375438979973128335250, 254431643828719943363168790691202159618291128031672447457003103177179594883, 21643879050837399616959950329030766017889155043775699632286442235493895372917, 21366811279551276117929169765191613701197955319974913266267441812636237037646, 21589104505247657328126595328170057135533112356673392641224703632147718221626, 21705720585392722922288119193182230817709356227197695933122955562258419363817, 210582256254245321230944899365900783046047268312358467224286161015892410553, 67467298468928378461709160894009562422323667429353836471288647257142526174, 401405545565146236768414759625815235079482201871887647902854199710089019426, 242058295543645364469603196285533617537305765945903478771539828377630277659, 242387179954915486414898552751845909136723666599166526775187251675298475847, 21508158208971909325311841028614649671720264483265842805765096044974779478011, 272424195205399826356002498265657484966970152204117152351437673127721185027, 44171850718503119557848757064326318010157160096131887405350875276358201213, 21532895383888841644640511827815131680228562870491659771784274985001802608363, 21559395291054650916613143018010240154905698005554200926602924124594631749617, 305666056903143792691495556729812265352071316857396745224349351784979890241, 53006576207760733614742769062179569974763497460833291287471961013096885895];
        ZKNOX_falcon_compact.CompactSignature memory sig;
        sig.s2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            sig.s2[i] = s2[i];
        }
        // message
        bytes memory message = "My name is Nicolas";
        sig.salt =
            "\x13\x57\x9b\x4e\xf5\xf6\xb6\x42\x65\x63\xd7\x19\x5b\x8c\x5b\x84\x73\x6b\x14\x26\x61\x60\x34\x2c\x40\x93\xf8\xab\xea\x48\x37\x1b\xa9\x4c\xc0\x6d\xcb\x6b\x8a\x8e";
        bool result = falcon.verifyNIST(message, sig.salt, sig.s2, pkc);
        assertEq(true, result);
    }

    function testVector3() public view {
        // public key
        // forgefmt: disable-next-line
        uint256[32] memory tmp_pkc = [9807818718891730533966615164509575764017151053524099258423976834772553965140, 18340098138125467691447337077959785268149994316939452976998993957504853156265, 5198133703327284157071422809205815024336408019642137871855761911766001193757, 885309680723773951581445950479448442138188963959751701993810286786334563851, 19751655564167833205324936936214418086799632798155386652828683172706408935156, 13449342659324330278443856651216754520591114337785977560380735844903743330507, 21412685081650650572110719760616900735599281269400856811705495088893808813464, 7182455876228287393000419492025555097227813236263190704105821148459893329094, 10346702731445215087289400465904665036614373649415073766421551882524955579599, 2602661461191686318241399797978336432747493635009153906211421228123447493354, 17460152192629988224191839342813524149690975760517934797656766276578763941977, 8030501380784039896959436505501001505082538439109709855711095179607370313313, 1869334252111587522914549075648788783845949858255579782083590402809098144636, 17244605423862552671483849252199675991941590481856488840270787535924580718702, 11336265795525104660827282529254071061160673084427642199020414766362588092858, 7834392541464967164445071157396824232455621343468123833119795953667476294495, 19320749074383776626289869794062002119037822327089474229301777373758894647631, 15804769950401279065265498737970159234892108086909038079651927057616326110849, 5524941774629792613265643604106102575196474389604272009945361978094039402215, 7912189081096546922096985544357356245951107957167270713824777693799477413938, 9251517013408700470756725384748473476160720415021619476382719063671064631329, 980629886819687668154444089811786886341348988887074213615781934824155389444, 5940413397816454703448409408340853562548545866597888595192275835122337254858, 3477241430632946704913201778186656752154449432278581298631128816987460934160, 19684655324690250642900619926419342622662744597902662173890575167707890264962, 21136817025198787960771334147393601715672137869525072998232149469960570804861, 715695489957163697708304262996430301414652155424663974257962371003055997411, 779487062625276624243092988713096201766390140956957709636694708471170673149, 18108615907818392958604720912508457986590141052566906373861374637494342583430, 4888923900533397196030088094647918125568719406578813186855259309838660932599, 20133355404703468652353168553951350193203296046835794955257435485399706185274, 6958150576137026963644397829477422234280792505821200919066265083919800276574];
        uint256[] memory pkc = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            pkc[i] = tmp_pkc[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory s2 = [222625215438031505579127074507852610564115689196496035210990191719705542738, 21676009079545422737713381060865179658839324459056031138701582900638377848741, 21700417110429881450355131003541671711179952764759253699004054421120697184193, 21543492562032043865556988121198738235882828821803141968153958109212761665386, 23299114424939793132040474886892366131501081418156330672410285025780707217, 125449080304696710954464720017230561119373994471678725889429678650124730405, 173152715719887884357233622899815337343513243853139905732911055915259461928, 21665079818564169437946849963212636168925651899610389893095113945195807899737, 21661548631868031173248617985665868846158924689859421817693929401876334325619, 21301439389021424916890219958724695162966167577527441422907326559101383540766, 309523162629360155094452927665364563602435265325015482861712315609432326284, 21601801098430467982221900867025858581149879524255805862571029829560022728801, 21670384506750038980053149935043926703834968309824011082764396306675766263826, 360763129391914414202176950632587338980831084812165678366320101041099571400, 21423347878365599531170235829174662691402110115816083024823055044286034030514, 21691583791813774388230199832002826365587893281688523377579582392926308729009, 418743185802538904212863652769337549090626410509663041026136534813908140123, 540982738239750295558347474552866423303719052512744685576196353100484259588, 199983820935202336583988510684659154281129697934677317429007977439445266073, 21491929529267791472688880803433246610199023008666486485969759322461364563921, 21538194253629759725804966535908579520128679626031365743577844565209948434382, 21697209685630014533396161982713806985264672891271207063851374154973236494410, 21660105083479219995264081016400316403735747205765836724563452342300452401034, 369275786542229138989075067259474722326889523203701806460946655893072260835, 268888505929953483372429122951880212817244027402066263419225789947243725135, 118381130843297671896321559177544654731744460290114377778579872451487793299, 415212457204585777723576537964859334224149108214525235330682225296636194787, 268891665256743650946589438675670257090726853990418597179111573867867942862, 422284428630847944775947050893371389737242366636072767769666921466003718352, 127540767705983051037607894464943101323558745436592134443382603104652898165, 180220724165554076907922847002820785242812837304081566553492921347865641110, 150502662188002183449048192742920861700750734053403302429511675122307235891];
        ZKNOX_falcon_compact.CompactSignature memory sig;
        sig.s2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            sig.s2[i] = s2[i];
        }
        // message
        bytes memory message = "We are ZKNox";
        sig.salt =
            "\x5a\x54\x83\x5f\x8b\x04\xd4\xc0\xb2\x96\x67\xba\xeb\x0c\x32\x58\x80\x9e\xe6\x98\xdb\xc0\x35\x36\xa1\xc9\x36\xc8\x11\xf6\xe6\xf6\x92\x10\xf5\x63\x20\x80\x06\x49";
        bool result = falcon.verifyNIST(message, sig.salt, sig.s2, pkc);
        assertEq(true, result);
    }

    function testVector4() public view {
        // public key
        // forgefmt: disable-next-line
        uint256[32] memory tmp_pkc = [9807818718891730533966615164509575764017151053524099258423976834772553965140, 18340098138125467691447337077959785268149994316939452976998993957504853156265, 5198133703327284157071422809205815024336408019642137871855761911766001193757, 885309680723773951581445950479448442138188963959751701993810286786334563851, 19751655564167833205324936936214418086799632798155386652828683172706408935156, 13449342659324330278443856651216754520591114337785977560380735844903743330507, 21412685081650650572110719760616900735599281269400856811705495088893808813464, 7182455876228287393000419492025555097227813236263190704105821148459893329094, 10346702731445215087289400465904665036614373649415073766421551882524955579599, 2602661461191686318241399797978336432747493635009153906211421228123447493354, 17460152192629988224191839342813524149690975760517934797656766276578763941977, 8030501380784039896959436505501001505082538439109709855711095179607370313313, 1869334252111587522914549075648788783845949858255579782083590402809098144636, 17244605423862552671483849252199675991941590481856488840270787535924580718702, 11336265795525104660827282529254071061160673084427642199020414766362588092858, 7834392541464967164445071157396824232455621343468123833119795953667476294495, 19320749074383776626289869794062002119037822327089474229301777373758894647631, 15804769950401279065265498737970159234892108086909038079651927057616326110849, 5524941774629792613265643604106102575196474389604272009945361978094039402215, 7912189081096546922096985544357356245951107957167270713824777693799477413938, 9251517013408700470756725384748473476160720415021619476382719063671064631329, 980629886819687668154444089811786886341348988887074213615781934824155389444, 5940413397816454703448409408340853562548545866597888595192275835122337254858, 3477241430632946704913201778186656752154449432278581298631128816987460934160, 19684655324690250642900619926419342622662744597902662173890575167707890264962, 21136817025198787960771334147393601715672137869525072998232149469960570804861, 715695489957163697708304262996430301414652155424663974257962371003055997411, 779487062625276624243092988713096201766390140956957709636694708471170673149, 18108615907818392958604720912508457986590141052566906373861374637494342583430, 4888923900533397196030088094647918125568719406578813186855259309838660932599, 20133355404703468652353168553951350193203296046835794955257435485399706185274, 6958150576137026963644397829477422234280792505821200919066265083919800276574];
        uint256[] memory pkc = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            pkc[i] = tmp_pkc[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory s2 = [21412424242127082749610191839594829392609335319990662478876364133294951759985, 938197166425361380710370353796599425511229962339559620164675044002097409939, 21647411321071212380761415897307069808958400586121678825154806791311314649193, 21462219969556675763555611051663129394279025351199249323826899476414370939245, 21532570112142586367213716456156282998882970169651536503256279162900785278707, 21601473486094596278097689415768313475766014769988104499793352491966770261860, 150193458487198855960172412486860950466445743917494382397285067450316226641, 63936079761480428901679655785343220182344262444313383981477033448091168724, 21391218793246810542894263058024234198425450067853564400670791803242390892366, 21494022974037990514034492875641587719272379241657474320245997058192701194336, 226157044397558708313848400855036171451956097324768575903477268262834876262, 21566138777573877099557493308809750273628886950442867571793324261757020483552, 773883953089600364097561083085227543243017227910536201641816112224598491361, 21557304056970610111204775034836942486808579572748898192758264058277730004744, 21223371934745051167914669435621300396040813795764848505121538289868127272995, 21557301285044470254816923161326995105145083344818767855254692732795701833612, 358670471364258104760714939225456754161095942466404070493513978650688159835, 328210437288473321774710936334930011045884507386554434481927591059194021, 21157996108003185944232451222500907214109530742953072012336327589114699513996, 21355880957270181049275784779783162902793112397695029577916382944137202905051, 408143289567265176959499044317175596826929427503599671510878281598475436203, 21168594930748873226772498811875707934017541796377192364540189468144969646241, 19435322766729971344933822343177832892069531222182584839246203044511100500, 150511019766944497768812530943806559859096445227616250146176978210900684798, 44499656755767137370694155539619425792158039142667017406186993499424227698, 21359420528678883772827468699927033449515682905127077855108096608968277110567, 21444223072869933784225684209838546304984593361719441611816857423601015521389, 21592968965942438078516618456421132386728252108832191235632804038799762784572, 127214067098599146044102912383538310785919339012842875166013412905288794426, 201747729362989241789380364419493806857510840486777789744138313435815936003, 521222342516545346869170296352098282898180697487366395837698420813812150132, 21384480877498030869454209405815772458304077720102573529957815727485943754618];
        ZKNOX_falcon_compact.CompactSignature memory sig;
        sig.s2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            sig.s2[i] = s2[i];
        }
        // message
        bytes memory message = "Practical security on the chain.";
        sig.salt =
            "\xc3\xff\x24\xbc\x6b\x6d\x7a\x3d\x30\x7c\xe7\xb1\x73\x1e\x7d\xf5\x96\x90\xd0\x53\x0d\x7f\x2f\x5b\xb9\xed\x37\xd1\x80\x16\x9a\x6c\x1b\xb0\x22\x25\x2a\xb8\xcc\x68";
        bool result = falcon.verifyNIST(message, sig.salt, sig.s2, pkc);
        assertEq(true, result);
    }
}
