// code generated using pythonref/generate_epervier_test_vectors.py.
pragma solidity ^0.8.25;

import {Test, console} from "forge-std/Test.sol";
import "../../src/ZKNOX_NTT.sol";
import "../../src/ZKNOX_epervier.sol";
import "../../src/ZKNOX_falcon_utils.sol";

contract ZKNOX_epervierTest is Test {
    ZKNOX_epervier epervier;

    //exemple of stateless initialisation, no external contract provided
    ZKNOX_NTT ntt = new ZKNOX_NTT(address(0), address(0), 12289, 12265);
    // forgefmt: disable-next-line
    uint256[1024] psi_rev = [uint256(1), 10810, 7143, 4043, 10984, 722, 5736, 8155, 3542, 8785, 9744, 3621, 10643, 1212, 3195, 5860, 7468, 2639, 9664, 11340, 11726, 9314, 9283, 9545, 5728, 7698, 5023, 5828, 8961, 6512, 7311, 1351, 2319, 11119, 11334, 11499, 9088, 3014, 5086, 10963, 4846, 9542, 9154, 3712, 4805, 8736, 11227, 9995, 3091, 12208, 7969, 11289, 9326, 7393, 9238, 2366, 11112, 8034, 10654, 9521, 12149, 10436, 7678, 11563, 1260, 4388, 4632, 6534, 2426, 334, 1428, 1696, 2013, 9000, 729, 3241, 2881, 3284, 7197, 10200, 8595, 7110, 10530, 8582, 3382, 11934, 9741, 8058, 3637, 3459, 145, 6747, 9558, 8357, 7399, 6378, 9447, 480, 1022, 9, 9821, 339, 5791, 544, 10616, 4278, 6958, 7300, 8112, 8705, 1381, 9764, 11336, 8541, 827, 5767, 2476, 118, 2197, 7222, 3949, 8993, 4452, 2396, 7935, 130, 2837, 6915, 2401, 442, 7188, 11222, 390, 773, 8456, 3778, 354, 4861, 9377, 5698, 5012, 9808, 2859, 11244, 1017, 7404, 1632, 7205, 27, 9223, 8526, 10849, 1537, 242, 4714, 8146, 9611, 3704, 5019, 11744, 1002, 5011, 5088, 8005, 7313, 10682, 8509, 11414, 9852, 3646, 6022, 2987, 9723, 10102, 6250, 9867, 11224, 2143, 11885, 7644, 1168, 5277, 11082, 3248, 493, 8193, 6845, 2381, 7952, 11854, 1378, 1912, 2166, 3915, 12176, 7370, 12129, 3149, 12286, 4437, 3636, 4938, 5291, 2704, 10863, 7635, 1663, 10512, 3364, 1689, 4057, 9018, 9442, 7875, 2174, 4372, 7247, 9984, 4053, 2645, 5195, 9509, 7394, 1484, 9042, 9603, 8311, 9320, 9919, 2865, 5332, 3510, 1630, 10163, 5407, 3186, 11136, 9405, 10040, 8241, 9890, 8889, 7098, 9153, 9289, 671, 3016, 243, 6730, 420, 10111, 1544, 3985, 4905, 3531, 476, 49, 1263, 5915, 1483, 9789, 10800, 10706, 6347, 1512, 350, 10474, 5383, 5369, 10232, 9087, 4493, 9551, 6421, 6554, 2655, 9280, 1693, 174, 723, 10314, 8532, 347, 2925, 8974, 11863, 1858, 4754, 3030, 4115, 2361, 10446, 2908, 218, 3434, 8760, 3963, 576, 6142, 9842, 1954, 10238, 9407, 10484, 3991, 8320, 9522, 156, 2281, 5876, 10258, 5333, 3772, 418, 5908, 11836, 5429, 7515, 7552, 1293, 295, 6099, 5766, 652, 8273, 4077, 8527, 9370, 325, 10885, 11143, 11341, 5990, 1159, 8561, 8240, 3329, 4298, 12121, 2692, 5961, 7183, 10327, 1594, 6167, 9734, 7105, 11089, 1360, 3956, 6170, 5297, 8210, 11231, 922, 441, 1958, 4322, 1112, 2078, 4046, 709, 9139, 1319, 4240, 8719, 6224, 11454, 2459, 683, 3656, 12225, 10723, 5782, 9341, 9786, 9166, 10542, 9235, 6803, 7856, 6370, 3834, 7032, 7048, 9369, 8120, 9162, 6821, 1010, 8807, 787, 5057, 4698, 4780, 8844, 12097, 1321, 4912, 10240, 677, 6415, 6234, 8953, 1323, 9523, 12237, 3174, 1579, 11858, 9784, 5906, 3957, 9450, 151, 10162, 12231, 12048, 3532, 11286, 1956, 7280, 11404, 6281, 3477, 6608, 142, 11184, 9445, 3438, 11314, 4212, 9260, 6695, 4782, 5886, 8076, 504, 2302, 11684, 11868, 8209, 3602, 6068, 8689, 3263, 6077, 7665, 7822, 7500, 6752, 4749, 4449, 6833, 12142, 8500, 6118, 8471, 1190, 9606, 3860, 5445, 7753, 11239, 5079, 9027, 2169, 11767, 7965, 4916, 8214, 5315, 11011, 9945, 1973, 6715, 8775, 11248, 5925, 11271, 654, 3565, 1702, 1987, 6760, 5206, 3199, 12233, 6136, 6427, 6874, 8646, 4948, 6152, 400, 10561, 5339, 5446, 3710, 6093, 468, 8301, 316, 11907, 10256, 8291, 3879, 1922, 10930, 6854, 973, 11035, 7, 1936, 845, 3723, 3154, 5054, 3285, 7929, 216, 50, 6763, 769, 767, 8484, 10076, 4153, 3120, 6184, 6203, 5646, 8348, 3753, 3536, 5370, 3229, 4730, 10583, 3929, 1282, 8717, 2021, 9457, 3944, 4099, 5604, 6759, 2171, 8809, 11024, 3007, 9344, 5349, 2633, 1406, 9057, 11996, 4855, 8520, 9348, 11722, 6627, 5289, 3837, 2595, 3221, 4273, 4050, 7082, 844, 5202, 11309, 11607, 4590, 7207, 8820, 6138, 7846, 8871, 4693, 2338, 9996, 11872, 1802, 1555, 5103, 10398, 7878, 10699, 1223, 9955, 11009, 614, 12265, 10918, 11385, 9804, 6742, 7250, 881, 11924, 1015, 10362, 5461, 9343, 2637, 7779, 4684, 3360, 7154, 63, 7302, 2373, 3670, 3808, 578, 5368, 11839, 1944, 7628, 11779, 9667, 6903, 5618, 10631, 5789, 3502, 5043, 826, 3090, 1398, 3065, 1506, 6586, 4483, 6389, 910, 7570, 11538, 4518, 3094, 1160, 4820, 2730, 5411, 10036, 1868, 2478, 9449, 4194, 3019, 10506, 7211, 7724, 4974, 7119, 2672, 11424, 1279, 189, 3116, 10526, 2209, 10759, 1694, 8420, 7866, 5832, 1350, 10555, 8474, 7014, 10499, 11038, 6879, 2035, 1040, 10407, 6164, 7519, 944, 5287, 8620, 6616, 9269, 6883, 7624, 4834, 2712, 9461, 4352, 8176, 72, 3840, 10447, 3451, 8195, 11048, 4378, 6508, 9244, 9646, 1095, 2873, 2827, 11498, 2434, 11169, 9754, 12268, 6481, 874, 9988, 170, 6639, 2307, 4289, 11641, 12139, 11259, 11823, 3821, 1681, 4649, 5969, 2929, 6026, 1573, 8443, 3793, 6226, 11787, 5118, 2602, 10388, 1849, 5776, 9021, 3795, 7988, 7766, 457, 12281, 11410, 9696, 982, 10013, 4218, 4390, 8835, 8531, 7785, 778, 530, 2626, 3578, 4697, 8823, 1701, 10243, 2940, 9332, 10808, 3317, 9757, 139, 3332, 343, 8841, 4538, 10381, 7078, 1866, 1208, 7562, 10584, 2450, 11873, 814, 716, 10179, 2164, 6873, 5412, 8080, 9011, 6296, 3515, 11851, 1218, 5061, 10753, 10568, 2429, 8186, 1373, 9307, 717, 8700, 8921, 4227, 4238, 11677, 8067, 1526, 11749, 12164, 3163, 4032, 6127, 7449, 1389, 10221, 4404, 11943, 3359, 9084, 5209, 1092, 3678, 4265, 10361, 464, 1826, 2926, 4489, 9118, 1136, 3449, 3708, 9051, 2065, 5826, 3495, 4564, 8755, 3961, 10533, 4145, 2275, 2461, 4267, 5653, 5063, 8113, 10771, 8524, 11014, 5508, 11113, 6555, 4860, 1125, 10844, 11158, 6302, 6693, 579, 3889, 9520, 3114, 6323, 212, 8314, 4883, 6454, 3087, 1417, 5676, 7784, 2257, 3744, 4963, 2528, 9233, 5102, 11877, 6701, 6444, 4924, 4781, 1014, 11841, 1327, 3607, 3942, 7057, 2717, 60, 3200, 10754, 5836, 7723, 2260, 68, 180, 4138, 7684, 2689, 10880, 7070, 204, 5509, 10821, 8308, 8882, 463, 10945, 9247, 9806, 10235, 4739, 8038, 6771, 1226, 9261, 5216, 11925, 9929, 11053, 9272, 7043, 4475, 3121, 4705, 1057, 9689, 11883, 10602, 146, 5268, 1403, 1804, 6094, 7100, 12050, 9389, 994, 4554, 4670, 11777, 5464, 4906, 3375, 9998, 8896, 4335, 7376, 3528, 3825, 8054, 9342, 8307, 636, 5609, 11667, 10552, 5672, 4499, 5598, 3344, 10397, 8665, 6565, 10964, 11260, 10344, 5959, 10141, 8330, 5797, 2442, 1248, 5115, 4939, 10975, 1744, 2894, 8635, 6599, 9834, 8342, 338, 3343, 8170, 1522, 10138, 12269, 5002, 4608, 5163, 4578, 377, 11914, 1620, 10453, 11864, 10104, 11897, 6085, 8122, 11251, 11366, 10058, 6197, 2800, 193, 506, 1255, 1392, 5784, 3276, 8951, 2212, 9615, 10347, 8881, 2575, 1165, 2776, 11111, 6811, 3511];

    // forgefmt: disable-next-line
    uint256[1024] psi_inv_rev = [uint256(1), 1479, 8246, 5146, 4134, 6553, 11567, 1305, 6429, 9094, 11077, 1646, 8668, 2545, 3504, 8747, 10938, 4978, 5777, 3328, 6461, 7266, 4591, 6561, 2744, 3006, 2975, 563, 949, 2625, 9650, 4821, 726, 4611, 1853, 140, 2768, 1635, 4255, 1177, 9923, 3051, 4896, 2963, 1000, 4320, 81, 9198, 2294, 1062, 3553, 7484, 8577, 3135, 2747, 7443, 1326, 7203, 9275, 3201, 790, 955, 1170, 9970, 5374, 9452, 12159, 4354, 9893, 7837, 3296, 8340, 5067, 10092, 12171, 9813, 6522, 11462, 3748, 953, 2525, 10908, 3584, 4177, 4989, 5331, 8011, 1673, 11745, 6498, 11950, 2468, 12280, 11267, 11809, 2842, 5911, 4890, 3932, 2731, 5542, 12144, 8830, 8652, 4231, 2548, 355, 8907, 3707, 1759, 5179, 3694, 2089, 5092, 9005, 9408, 9048, 11560, 3289, 10276, 10593, 10861, 11955, 9863, 5755, 7657, 7901, 11029, 11813, 8758, 7384, 8304, 10745, 2178, 11869, 5559, 12046, 9273, 11618, 3000, 3136, 5191, 3400, 2399, 4048, 2249, 2884, 1153, 9103, 6882, 2126, 10659, 8779, 6957, 9424, 2370, 2969, 3978, 2686, 3247, 10805, 4895, 2780, 7094, 9644, 8236, 2305, 5042, 7917, 10115, 4414, 2847, 3271, 8232, 10600, 8925, 1777, 10626, 4654, 1426, 9585, 6998, 7351, 8653, 7852, 3, 9140, 160, 4919, 113, 8374, 10123, 10377, 10911, 435, 4337, 9908, 5444, 4096, 11796, 9041, 1207, 7012, 11121, 4645, 404, 10146, 1065, 2422, 6039, 2187, 2566, 9302, 6267, 8643, 2437, 875, 3780, 1607, 4976, 4284, 7201, 7278, 11287, 545, 7270, 8585, 2678, 4143, 7575, 12047, 10752, 1440, 3763, 3066, 12262, 5084, 10657, 4885, 11272, 1045, 9430, 2481, 7277, 6591, 2912, 7428, 11935, 8511, 3833, 11516, 11899, 1067, 5101, 11847, 9888, 1254, 11316, 5435, 1359, 10367, 8410, 3998, 2033, 382, 11973, 3988, 11821, 6196, 8579, 6843, 6950, 1728, 11889, 6137, 7341, 3643, 5415, 5862, 6153, 56, 9090, 7083, 5529, 10302, 10587, 8724, 11635, 1018, 6364, 1041, 3514, 5574, 10316, 2344, 1278, 6974, 4075, 7373, 4324, 522, 10120, 3262, 7210, 1050, 4536, 6844, 8429, 2683, 11099, 3818, 6171, 3789, 147, 5456, 7840, 7540, 5537, 4789, 4467, 4624, 6212, 9026, 3600, 6221, 8687, 4080, 421, 605, 9987, 11785, 4213, 6403, 7507, 5594, 3029, 8077, 975, 8851, 2844, 1105, 12147, 5681, 8812, 6008, 885, 5009, 10333, 1003, 8757, 241, 58, 2127, 12138, 2839, 8332, 6383, 2505, 431, 10710, 9115, 52, 2766, 10966, 3336, 6055, 5874, 11612, 2049, 7377, 10968, 192, 3445, 7509, 7591, 7232, 11502, 3482, 11279, 5468, 3127, 4169, 2920, 5241, 5257, 8455, 5919, 4433, 5486, 3054, 1747, 3123, 2503, 2948, 6507, 1566, 64, 8633, 11606, 9830, 835, 6065, 3570, 8049, 10970, 3150, 11580, 8243, 10211, 11177, 7967, 10331, 11848, 11367, 1058, 4079, 6992, 6119, 8333, 10929, 1200, 5184, 2555, 6122, 10695, 1962, 5106, 6328, 9597, 168, 7991, 8960, 4049, 3728, 11130, 6299, 948, 1146, 1404, 11964, 2919, 3762, 8212, 4016, 11637, 6523, 6190, 11994, 10996, 4737, 4774, 6860, 453, 6381, 11871, 8517, 6956, 2031, 6413, 10008, 12133, 2767, 3969, 8298, 1805, 2882, 2051, 10335, 2447, 6147, 11713, 8326, 3529, 8855, 12071, 9381, 1843, 9928, 8174, 9259, 7535, 10431, 426, 3315, 9364, 11942, 3757, 1975, 11566, 12115, 10596, 3009, 9634, 5735, 5868, 2738, 7796, 3202, 2057, 6920, 6906, 1815, 11939, 10777, 5942, 1583, 1489, 2500, 10806, 6374, 11026, 12240, 8778, 5478, 1178, 9513, 11124, 9714, 3408, 1942, 2674, 10077, 3338, 9013, 6505, 10897, 11034, 11783, 12096, 9489, 6092, 2231, 923, 1038, 4167, 6204, 392, 2185, 425, 1836, 10669, 375, 11912, 7711, 7126, 7681, 7287, 20, 2151, 10767, 4119, 8946, 11951, 3947, 2455, 5690, 3654, 9395, 10545, 1314, 7350, 7174, 11041, 9847, 6492, 3959, 2148, 6330, 1945, 1029, 1325, 5724, 3624, 1892, 8945, 6691, 7790, 6617, 1737, 622, 6680, 11653, 3982, 2947, 4235, 8464, 8761, 4913, 7954, 3393, 2291, 8914, 7383, 6825, 512, 7619, 7735, 11295, 2900, 239, 5189, 6195, 10485, 10886, 7021, 12143, 1687, 406, 2600, 11232, 7584, 9168, 7814, 5246, 3017, 1236, 2360, 364, 7073, 3028, 11063, 5518, 4251, 7550, 2054, 2483, 3042, 1344, 11826, 3407, 3981, 1468, 6780, 12085, 5219, 1409, 9600, 4605, 8151, 12109, 12221, 10029, 4566, 6453, 1535, 9089, 12229, 9572, 5232, 8347, 8682, 10962, 448, 11275, 7508, 7365, 5845, 5588, 412, 7187, 3056, 9761, 7326, 8545, 10032, 4505, 6613, 10872, 9202, 5835, 7406, 3975, 12077, 5966, 9175, 2769, 8400, 11710, 5596, 5987, 1131, 1445, 11164, 7429, 5734, 1176, 6781, 1275, 3765, 1518, 4176, 7226, 6636, 8022, 9828, 10014, 8144, 1756, 8328, 3534, 7725, 8794, 6463, 10224, 3238, 8581, 8840, 11153, 3171, 7800, 9363, 10463, 11825, 1928, 8024, 8611, 11197, 7080, 3205, 8930, 346, 7885, 2068, 10900, 4840, 6162, 8257, 9126, 125, 540, 10763, 4222, 612, 8051, 8062, 3368, 3589, 11572, 2982, 10916, 4103, 9860, 1721, 1536, 7228, 11071, 438, 8774, 5993, 3278, 4209, 6877, 5416, 10125, 2110, 11573, 11475, 416, 9839, 1705, 4727, 11081, 10423, 5211, 1908, 7751, 3448, 11946, 8957, 12150, 2532, 8972, 1481, 2957, 9349, 2046, 10588, 3466, 7592, 8711, 9663, 11759, 11511, 4504, 3758, 3454, 7899, 8071, 2276, 11307, 2593, 879, 8, 11832, 4523, 4301, 8494, 3268, 6513, 10440, 1901, 9687, 7171, 502, 6063, 8496, 3846, 10716, 6263, 9360, 6320, 7640, 10608, 8468, 466, 1030, 150, 648, 8000, 9982, 5650, 12119, 2301, 11415, 5808, 21, 2535, 1120, 9855, 791, 9462, 9416, 11194, 2643, 3045, 5781, 7911, 1241, 4094, 8838, 1842, 8449, 12217, 4113, 7937, 2828, 9577, 7455, 4665, 5406, 3020, 5673, 3669, 7002, 11345, 4770, 6125, 1882, 11249, 10254, 5410, 1251, 1790, 5275, 3815, 1734, 10939, 6457, 4423, 3869, 10595, 1530, 10080, 1763, 9173, 12100, 11010, 865, 9617, 5170, 7315, 4565, 5078, 1783, 9270, 8095, 2840, 9811, 10421, 2253, 6878, 9559, 7469, 11129, 9195, 7771, 751, 4719, 11379, 5900, 7806, 5703, 10783, 9224, 10891, 9199, 11463, 7246, 8787, 6500, 1658, 6671, 5386, 2622, 510, 4661, 10345, 450, 6921, 11711, 8481, 8619, 9916, 4987, 12226, 5135, 8929, 7605, 4510, 9652, 2946, 6828, 1927, 11274, 365, 11408, 5039, 5547, 2485, 904, 1371, 24, 11675, 1280, 2334, 11066, 1590, 4411, 1891, 7186, 10734, 10487, 417, 2293, 9951, 7596, 3418, 4443, 6151, 3469, 5082, 7699, 682, 980, 7087, 11445, 5207, 8239, 8016, 9068, 9694, 8452, 7000, 5662, 567, 2941, 3769, 7434, 293, 3232, 10883, 9656, 6940, 2945, 9282, 1265, 3480, 10118, 5530, 6685, 8190, 8345, 2832, 10268, 3572, 11007, 8360, 1706, 7559, 9060, 6919, 8753, 8536, 3941, 6643, 6086, 6105, 9169, 8136, 2213, 3805, 11522, 11520, 5526, 12239, 12073, 4360, 9004, 7235, 9135, 8566, 11444, 10353, 12282];

    //stateful initialisation
    function setUp() public {
        epervier = new ZKNOX_epervier();
    }

    function testVector0() public view {
        // public key
        // forgefmt: disable-next-line
        address pk = address(728199263750570446964354330903202655824594974439);

        // signature s1
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s1 = [21544940953273490874116839341662344855747654854772012975826019174380458880819, 231784129455508330772361979767669360784427813618530459991738626430471045162, 21335009434295910438528491248600970624012369471739409586034760092949455646361, 53332063708458931930578531084023066812802620439023420712727728268150964252, 21647411585697963570730441462564813451011758260697618100914955931821397978819, 21361183309727741314610335338443603876245526148606104802748148167288093618091, 21196869417477294649098452101445525974838460126931894130611066342452739715037, 10601325029090013602589206610487046786901946291050742247637247715437314204, 429348689569805894430439425524343675048900451610453867999051013871522873437, 113079133801969836943465146574427632021304363888029509851159086784200585173, 860784245727251438180653710610439255087793830753701045209494022116829441914, 408472308775650052639227008385107557761571774560514053653739111729353272986, 21071748143233388049925108450340827016724360576924010143945905840720814800953, 24738474072811397771502973517874844394835002346920845740988645524566716374, 21278469891833548699225244761665617628279213878005759713851940177177244676014, 187290452942704730778257425467528446935765528961549941069675994586028114000, 21571761840527991617373326125855204003299610102186271813983311898986329604116, 21426882569926459223606773989540496615283917943795818008960619862344582901718, 21531128622750254789755058171879955291105386016818713027987960710926696906760, 20918033683835978280527460407135989113572293471162447425455799698366497751386, 252987906893546406027828567524125918589188177195442857322303096276897235060, 813792095829826454256747231029013878429851716257361925784276061519970, 21527265639799941591587516671609471372719896101039088533965336547314061225632, 21388014954083238628703297322089516829034717654698601192977655402776699940697, 459709930089898984385557033684476458958274288152063581410562079872397684685, 247364196751943873805500965266528712861274680834044561697383508594517618434, 21398610159214977753521104725081193731566303249285864782529487818000952864417, 190823122606218921986815988308410067245151708820158163427192628809676959690, 21471052641226698010316734785199593003326298942096354301541355442814862897121, 282698792524670650492917742389091797457164535648392400535971459037494182155, 240292365119108767540819293200566330222727580125350039024834487377300303584, 238530473753837412762227007227474460947652525677227033311121923498327813952];
        uint256[] memory cs1 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            cs1[i] = tmp_s1[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [21649177790571192151286347015496942774998047093443469911824293759971769921428, 268561837228003295750097962055377173144230591962156166013405983500166901722, 373131625068829243878329325423678131041649088938736656507320119997555081235, 21486956906798985719744375447418457093904022330284178432016463274856548335792, 21046685012579207363779083391328077072214150550607548013536002123977240477986, 21624441549379106406854913087313490894795813631028932379313967382686196510643, 21269307451108998178385520109334456835115990194191195737525785771781959909565, 21502531263687643325340175878774636041406187334634592429142727315400727670519, 21645644447053892427347704348572035349652711108703358737702992269605067960232, 21642434488002171509128269223391903377510003992725863045650229316731768864833, 143119470082566254482735508500984469699860060818744295831990820277956915152, 21329707513272854740751761229950211571450422559001525308753079369050633482098, 21274936790822894191602613586986915689519661452929637034834680332795904471016, 323334360936185288001981502514033468909440677622868552612107777952939454224, 123679299536821298309830082798375208376610949331800767508152351976155721432, 21491932279213207751766589616948004610084312966776105784769653908907333255233, 21555542660741624619295241800731825770453854520453475890665283178064948298017, 21221927933047296480928267470961179332618989116613413084747202280410795475009, 21640345869013883370330016229125346816596850570010888955143002957579576672404, 447342652619835196009820811808904031226531727490450346028265756926131110099, 48035216006736122407389636281329469805748676305369281203171327493607718987, 21518434450972238337302563984051994092825336572101022453461300155810011086937, 333938521709614508411251346141738162769014840087489168548614530158677590118, 21322638943617910190789463252175561671279485636811843560369873363276365299985, 67147494647851671533097211665243328708469268023218856658099323225006878424, 116612876865130439291083919507652316067243925780313881626436539371081498829, 21676008001193555476662926248472147257885449589381323941811680418544747741313, 127542681867544440369323810542605531185295482507825078859650437370710524036, 21474589727324966696397422730377349856660942504908738086594141842221836664953, 204955823209712158529229531556743920712069026834325166406926177293848227824, 55101682679218165125147635923326063419450638759116465378302788679604895838, 198216003314064520968126849996156841255555215727010889276036638293899030319];
        uint256[] memory cs2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            cs2[i] = tmp_s2[i];
        }
        // hint
        uint256 hint = 4353;
        // message
        bytes memory message = "My name is Renaud";
        bytes memory salt =
            "\xab\x0b\xae\x31\x63\x39\x89\x43\x04\xe3\x58\x77\xb0\xc2\x8a\x9b\x1f\xd1\x66\xc7\x96\xb9\xcc\x25\x8a\x06\x4a\x8f\x57\xe2\x7f\x2a\x5b\x8d\x54\x8a\x72\x8c\x94\x44";
        address recovered_pk;
        recovered_pk = epervier.recover(message, salt, cs1, cs2, hint);
        assertEq(pk, recovered_pk);
    }

    function testVector1() public view {
        // public key
        // forgefmt: disable-next-line
        address pk = address(728199263750570446964354330903202655824594974439);

        // signature s1
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s1 = [21711342192639636520778229565472483954324631902924737580031872015464891428708, 21628299172242640718685509644258311649770336034210976896144206795206509461620, 55092893738585834032597803325529841290535603063307546731475768247469277306, 252662850768036635877648676984193688551202023338814368225540932641315303185, 413446823350982482530280181189032679763781596698435158577099732663261462602, 21670382457746297609082094386366511560744105381576661331421221126808288952392, 53335406713050146041936790014924710747728126302222532086617778609657622357, 21154462090401988833314675721168715559253180137153842764997030447639212339138, 198211334263993202400222570600188761460912292136136470207043954124687671333, 21541727651238573153158672944479464045582782980437269021044260023791604924510, 21677446637773402191780484034782974237260443725515284622236324785814342676391, 192911655759156336460271639443319558292077395207442142746154653468404744264, 21493698861564019204937344331883765866015568976023016497632031267016801267654, 21518758450644327523817015718736601209473245722436773382965806400606414503988, 21195106587413716648070198685271595645404534698421112919562928220188988407987, 296836399897023923050444019399789631765086621224057728409549147652447350717, 56539785095302871421942457152682578118172730982190892524903228894697619935, 335702618816225716040693763452461845919126425271019937193015164383507787728, 42732598799832071866204922020587066478905638948218938145820284061155733495, 130747550554618947680061974254665760716152394764960585356651309693045964950, 20972803893852372790336400963267561266412233237891304166043047465773609332551, 556887165706575097198935000920440395575136612892904857347556307640177274757, 21585901146325822781300296348902053405998885600284947591758616000657040158541, 21617382092277946799731310756694845046963361635137351258984701844727965745225, 21612075350336192134735769391100958051218488251209254352326775229651902082941, 316266681030723995549415434240527130669345966351305721912873560023078154144, 335701082097696062645061414977261428501621012253924483034864320147851641015, 554791142555456557022079573276550545314879975549648489511484512841787768958, 122234866490279433361618769114814504099445678724179803028185097166294298521, 21620911958154313685145670673002380064095389228196696601531421419326304485478, 173160394434817353933421013865007390311847611032759909217624473078076485437, 131074736395379955304925918920422332762391273135940439731438529383704231940];
        uint256[] memory cs1 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            cs1[i] = tmp_s1[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [194682686577610227246794695790715774126944874938428808986542410689990230135, 21209578797232041709286278565353757389708021321244238293915949802285695044, 21546703545696180855681069975918364541250822957120857472490640683003863957701, 108107261259864131647640314879209136401220200481432262235088649804704657342, 21278466953220005277143488220296682264666514238642259014027042528002340892575, 21356210062360815728479234982603977588355313360474497173479485111652984881228, 28600167887805239548180466269769444397148101494273412969588445637293899880, 21373553283207204848640764270744320634713030558788244955341093174867868844108, 187286759473542881013576550970547849203367076170543633199274462815663238984, 60401549871109243896928853540737834993354618518134892921660777037918580606, 95732160517032057921925508485491761636601354631527318630385656666669920224, 21207469605214262683320661946857337645668320236778396279280173490279165734874, 21460455414142077064495604464593687296831794405111486628929870506891858673755, 5631668306887557050738494558619849146545757022917648253048896176919490406, 63930472044930065098192495828103724454479173831074445973909762468460625926, 7395981111584989711043970861311579896839398611611897377580501422996074344, 14458188131905473014631970539328817583903503039603445810250206317962199091, 47708110970044448321413739320727634051394143775801958882647561653199372524, 21695119179420030207088390014818971321051832965749095039316269331789351104509, 21596496221609714947242360606041609205955645180558924037830182175085078523726, 21103550603542902924851553372701121327442172391783259240989921079025583063193, 21700415654645830251846677077602552557948858800574869254354992268239749054624, 362531723894909670115203445621122542563648112070875341719204299042632302813, 512397349459355985850600546641917543052807609594473422614121390394526859303, 222950675969320959868148959667226049295692074114584663424378885879099371392, 104245864054057079326974862843064049808915620551997214427772035469701033736, 21550557362206209354206290369581073342571981668216140867660132300165473513435, 21623004206828566858889248265475832231414896189265833848347282522444344524844, 174920398624128739911197446561742917144717286645578866601687611454642651271, 408469186433220486059854700233846396289332066861950535963850596883314114568, 433206415358416069256686675196271782522173307238240827950474013955889049588, 256517211524099221464913041288946341925530632579246662806331665088535658538];
        uint256[] memory cs2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            cs2[i] = tmp_s2[i];
        }
        // hint
        uint256 hint = 4385;
        // message
        bytes memory message = "My name is Simon";
        bytes memory salt =
            "\x91\x89\x90\xff\x93\xe0\x65\x6b\x5f\x75\xb0\x87\x29\xc6\x0e\x6a\x9d\x73\x52\xb9\xef\xd2\xe3\x3e\x3d\x1b\xa6\xe6\xd8\x9e\xdf\xa6\x71\x26\x6e\xce\x6b\xe7\xbb\x5a";
        address recovered_pk;
        recovered_pk = epervier.recover(message, salt, cs1, cs2, hint);
        assertEq(pk, recovered_pk);
    }

    function testVector2() public view {
        // public key
        // forgefmt: disable-next-line
        address pk = address(728199263750570446964354330903202655824594974439);

        // signature s1
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s1 = [21402144872809142578285302282570290958580873966656733294829267058315409162337, 538889352312533333947826043756433574593443068211500518507454109921655926563, 14459864521348329087002334461181179655244734933800959804971021235062779815, 21703952934461456909206795498983457946709001380877704096012976530380929183729, 21548467449130273251229258121323063243743877983065093198881332659637911421068, 21547031216883447764843222880407872160497719883054956178995547906425385594794, 42735155185369065148999388661051794578244770247237769337850534175420001966, 21462221636116363154417920366416060142859796456496114911270382068011468259528, 265352848734851627140890339627899537121388069503792538488698189823717748716, 243826404757726222199540169247725172818278288578228641905814304963570040923, 185847394873600736777754531520587177392538961489906615637880256298118676555, 21605333179943268619246625305250109066231906577521194913120686779088986713832, 21495789600594798858958958324465552585991925112575441673609227089542197805096, 21476351618758525179558918125531634371772583442355580195528810657829373685756, 21419817985526817389084856291942938273387894383554976116347334748740841385980, 21361185089085532113254341359333513396684111190778859996561153827557551374486, 21656250732611406083889457361262606054837811450698552069060046562813042753764, 53329583373207892155890522663442752741243253422380167580430721279994626194, 21244570212281979807711344999435092685261533604839523185629407368481524428670, 21523732781378619519468615139994266468636864039483211289008072424776283139977, 21566144439173036333571746306438572068796778619406978161067691336474868396003, 21515220852292827477258000373726327184953629112891464787562110072834253324395, 121914231766481201099331390523308953902754808171850552238494226679898505568, 21366808772232630266078421059963966414140148293504058827836862460364130693087, 21315246445405617732043071890577192038680473927429742911761229436956141301514, 21465427421373334937905743060404471403484716788693781912801977310153666461925, 21175666196359328747199455150082238254572428592468796216459303524825503629455, 21285208670257350113818305408808827673914536325692463760001760772011259473520, 132843411826271151942760596262322587889641518412701968311378255163978612812, 151948987390773590148865840328157470184847061460518523840276051091090321322, 153716800164665696948182967665782744315735596810637826367222994453871472498, 21518757776630926974498735514282895099112611019489822467886527026892884357118];
        uint256[] memory cs1 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            cs1[i] = tmp_s1[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [83368463789534418773637917004411568927501911403895260829890950549917085510, 433204964410165772229288582996469014456189653196716054825558692668499701689, 21688378788326145424938921071855435819016802944263471693535254173686258008162, 146653078386307804090039222208390332928510107395024111740198918716498051188, 192913359185061762802723790788884584228224807132989579462123563036071559185, 174923844694821791934365346412698913579997006764233948403642131135873679453, 177005206335748389376011005549313189090625290449510339466352320906119938093, 134282376976841906304938012574764364392167368186650194440790850273608019721, 295386229280433231287760567181087228975995579731381654901195811143075704672, 125451425776786298050543208073374739504665461692398687750671224607865831604, 21204348602132740190454090220489702379894369405497208055988054938560954422, 21057290839861310575833430112239923949020599492746791990902359662767911600223, 21484865920369066350256879276212371710827087624812849324775341498238497980441, 21543494557077558157767139946612620445400114578116864246357529792722748714980, 21228997365271203934918701785407403377043740508677831614375438979973128335250, 254431643828719943363168790691202159618291128031672447457003103177179594883, 21643879050837399616959950329030766017889155043775699632286442235493895372917, 21366811279551276117929169765191613701197955319974913266267441812636237037646, 21589104505247657328126595328170057135533112356673392641224703632147718221626, 21705720585392722922288119193182230817709356227197695933122955562258419363817, 210582256254245321230944899365900783046047268312358467224286161015892410553, 67467298468928378461709160894009562422323667429353836471288647257142526174, 401405545565146236768414759625815235079482201871887647902854199710089019426, 242058295543645364469603196285533617537305765945903478771539828377630277659, 242387179954915486414898552751845909136723666599166526775187251675298475847, 21508158208971909325311841028614649671720264483265842805765096044974779478011, 272424195205399826356002498265657484966970152204117152351437673127721185027, 44171850718503119557848757064326318010157160096131887405350875276358201213, 21532895383888841644640511827815131680228562870491659771784274985001802608363, 21559395291054650916613143018010240154905698005554200926602924124594631749617, 305666056903143792691495556729812265352071316857396745224349351784979890241, 53006576207760733614742769062179569974763497460833291287471961013096885895];
        uint256[] memory cs2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            cs2[i] = tmp_s2[i];
        }
        // hint
        uint256 hint = 2489;
        // message
        bytes memory message = "My name is Nicolas";
        bytes memory salt =
            "\x13\x57\x9b\x4e\xf5\xf6\xb6\x42\x65\x63\xd7\x19\x5b\x8c\x5b\x84\x73\x6b\x14\x26\x61\x60\x34\x2c\x40\x93\xf8\xab\xea\x48\x37\x1b\xa9\x4c\xc0\x6d\xcb\x6b\x8a\x8e";
        address recovered_pk;
        recovered_pk = epervier.recover(message, salt, cs1, cs2, hint);
        assertEq(pk, recovered_pk);
    }

    function testVector3() public view {
        // public key
        // forgefmt: disable-next-line
        address pk = address(728199263750570446964354330903202655824594974439);

        // signature s1
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s1 = [409910136641428994778772300169314559681087298489041296626679633811699728413, 203517725749401890981570489921914474792466447436328784398924856554273583091, 21197192824040019705954046159623074784260819816010138641690894423011849797751, 70676497852412789590623799845739277667473591805861391663375302916830396550, 240617879449347756957303388695648634952265314295996389215929752294140096206, 137817791680854923090133841992980523405451469805459289237137576539579625107, 21605334657701800973164390587881476754937030256486783097432316569482997072006, 21460448480461012117065922740624479605535694608137325291778586403488550563773, 21661873499215909333798586794783254732964190158971378520760703217927374254030, 21527595732452478284100169933371333135408009108586675371234274247464978743366, 191149796293896632709107319054438016350024810047211772434364159780452433976, 3536017661051797431754980434812961809111286953106716212701255721880989692, 21438934712561341371501693371496526558436884653215480606923995579667110178497, 134607379169703761046526495129455161989192416269153891647745272878955704159, 32132594927918364558149840884577074970121091994573311891547103388222161016, 190825225484938210941549729478940729399963904665293639639608535836763303842, 21592643483512361701643044293329206694861023886785649274889034010151076179662, 21403587634322125304725369273925019869614911569848527756821979335683536191649, 21511693601534576715066242684060198236875350519175582134127656341428460519597, 86578692395059984014365970395614656438582579759045496779894168929563127764, 427577960244323471173618714168047125017635780088131079666345912687541485703, 590453862926978769524010514563451730152390614972737106716702058940306620528, 90438467175891296772156931629268167039316108897222357659759445215331483871, 21686283115733317762756845240613487527649218313480060014535806317021158846209, 167853819123512247451318100760560605550993576078505118932749871194517090102, 78069966544362778562858506504090006693072485756934778849263371495019917275, 92201373065554207100177249636551937585857612220506265744601571972894818351, 21577053431036077285888444150354928060406001861360174647721450078909368107047, 376667287219291732369267012867995166802605307056860593984995296245833793570, 21561164995883237386493892992406859979325368868793652943568819735048744611690, 336028079347103569348177322997343607089096766890220388756615388102590541639, 21331469696117454617094184001017609986389280402552193573404918357434572615592];
        uint256[] memory cs1 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            cs1[i] = tmp_s1[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [222625215438031505579127074507852610564115689196496035210990191719705542738, 21676009079545422737713381060865179658839324459056031138701582900638377848741, 21700417110429881450355131003541671711179952764759253699004054421120697184193, 21543492562032043865556988121198738235882828821803141968153958109212761665386, 23299114424939793132040474886892366131501081418156330672410285025780707217, 125449080304696710954464720017230561119373994471678725889429678650124730405, 173152715719887884357233622899815337343513243853139905732911055915259461928, 21665079818564169437946849963212636168925651899610389893095113945195807899737, 21661548631868031173248617985665868846158924689859421817693929401876334325619, 21301439389021424916890219958724695162966167577527441422907326559101383540766, 309523162629360155094452927665364563602435265325015482861712315609432326284, 21601801098430467982221900867025858581149879524255805862571029829560022728801, 21670384506750038980053149935043926703834968309824011082764396306675766263826, 360763129391914414202176950632587338980831084812165678366320101041099571400, 21423347878365599531170235829174662691402110115816083024823055044286034030514, 21691583791813774388230199832002826365587893281688523377579582392926308729009, 418743185802538904212863652769337549090626410509663041026136534813908140123, 540982738239750295558347474552866423303719052512744685576196353100484259588, 199983820935202336583988510684659154281129697934677317429007977439445266073, 21491929529267791472688880803433246610199023008666486485969759322461364563921, 21538194253629759725804966535908579520128679626031365743577844565209948434382, 21697209685630014533396161982713806985264672891271207063851374154973236494410, 21660105083479219995264081016400316403735747205765836724563452342300452401034, 369275786542229138989075067259474722326889523203701806460946655893072260835, 268888505929953483372429122951880212817244027402066263419225789947243725135, 118381130843297671896321559177544654731744460290114377778579872451487793299, 415212457204585777723576537964859334224149108214525235330682225296636194787, 268891665256743650946589438675670257090726853990418597179111573867867942862, 422284428630847944775947050893371389737242366636072767769666921466003718352, 127540767705983051037607894464943101323558745436592134443382603104652898165, 180220724165554076907922847002820785242812837304081566553492921347865641110, 150502662188002183449048192742920861700750734053403302429511675122307235891];
        uint256[] memory cs2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            cs2[i] = tmp_s2[i];
        }
        // hint
        uint256 hint = 3757;
        // message
        bytes memory message = "We are ZKNox";
        bytes memory salt =
            "\x5a\x54\x83\x5f\x8b\x04\xd4\xc0\xb2\x96\x67\xba\xeb\x0c\x32\x58\x80\x9e\xe6\x98\xdb\xc0\x35\x36\xa1\xc9\x36\xc8\x11\xf6\xe6\xf6\x92\x10\xf5\x63\x20\x80\x06\x49";
        address recovered_pk;
        recovered_pk = epervier.recover(message, salt, cs1, cs2, hint);
        assertEq(pk, recovered_pk);
    }

    function testVector4() public view {
        // public key
        // forgefmt: disable-next-line
        address pk = address(728199263750570446964354330903202655824594974439);

        // signature s1
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s1 = [268561751424889969542890327137592230658201287897935250076451149508292587440, 21684518721947506849789300265391631429719917551767232106737084184873794350566, 238853777391412392484731436393715587414735735186494034429086093083808039025, 21522290262529428993950876603932393241676163172190214993870015982342116016271, 153715748641255539554858449253948927749031813145868218786453447816308272936, 438505020371946495570398091974437352256560074338337004462061815671915151392, 40967121809635654652948036126662105157979884353488019045564199537338560303, 21562925259675987640978410446786997753835954142938567903356028017385854337033, 21518430676544326519187047927840170029829793972685131499818126340569101512674, 21571766774195688294513649458220486897250551858902493948242312212908957696510, 21375317056832379783168757415305264874290783873042126052357659492120841289756, 668197101852099871853794464629564758466160126888050759474659371597741567900, 83372448840795269817972009918156227424829921559950366138525794137065455701, 406704733931768693737058994351414845424578609655549706563566041586785464185, 21378854148000371505047583732581697067122290547972332412224602122116779814872, 134608754125339114865595831803043893477771730821521625217826084924082564950, 95734393261365127530000852925256113637061425013978511832621266703680483224, 257959887245821980432829003305007637132034660595050926252336905641972805530, 21520199540619301235507144426783356056405674169340757054424672922171610759215, 21545263610012698933041571239255666831152616354737951982416526710185547935483, 21596500130687954420145142655918742552411690846702455718611789192794250358592, 21590879548093437015026684849489503523013584038264453942301962550246903120156, 44493460767485280189695841733415183949874708815981914874384900856361582779, 74210736047147036859169917355511067167912599398505530271668783457449160493, 245595386594393720255100524430339544545427447234362401132145582661047812339, 21347051763512339494847866286954496469517202176153754380637700061686971576141, 341002620786943978404534789098413988806709076074043297941229080375715770302, 21292275190845612767485049092816137325363470503145145987548552884475050328186, 680240703167710285213674774480043142857959349728841440541482551166593139078, 275628977866318112440117638447835495336777979591693173248677998491702734541, 21695442456100612336590792643338347627272937252333571692273610279620395139216, 887285549790340972099859120290532020682133982417123317310046368320326009018];
        uint256[] memory cs1 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            cs1[i] = tmp_s1[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [21412424242127082749610191839594829392609335319990662478876364133294951759985, 938197166425361380710370353796599425511229962339559620164675044002097409939, 21647411321071212380761415897307069808958400586121678825154806791311314649193, 21462219969556675763555611051663129394279025351199249323826899476414370939245, 21532570112142586367213716456156282998882970169651536503256279162900785278707, 21601473486094596278097689415768313475766014769988104499793352491966770261860, 150193458487198855960172412486860950466445743917494382397285067450316226641, 63936079761480428901679655785343220182344262444313383981477033448091168724, 21391218793246810542894263058024234198425450067853564400670791803242390892366, 21494022974037990514034492875641587719272379241657474320245997058192701194336, 226157044397558708313848400855036171451956097324768575903477268262834876262, 21566138777573877099557493308809750273628886950442867571793324261757020483552, 773883953089600364097561083085227543243017227910536201641816112224598491361, 21557304056970610111204775034836942486808579572748898192758264058277730004744, 21223371934745051167914669435621300396040813795764848505121538289868127272995, 21557301285044470254816923161326995105145083344818767855254692732795701833612, 358670471364258104760714939225456754161095942466404070493513978650688159835, 328210437288473321774710936334930011045884507386554434481927591059194021, 21157996108003185944232451222500907214109530742953072012336327589114699513996, 21355880957270181049275784779783162902793112397695029577916382944137202905051, 408143289567265176959499044317175596826929427503599671510878281598475436203, 21168594930748873226772498811875707934017541796377192364540189468144969646241, 19435322766729971344933822343177832892069531222182584839246203044511100500, 150511019766944497768812530943806559859096445227616250146176978210900684798, 44499656755767137370694155539619425792158039142667017406186993499424227698, 21359420528678883772827468699927033449515682905127077855108096608968277110567, 21444223072869933784225684209838546304984593361719441611816857423601015521389, 21592968965942438078516618456421132386728252108832191235632804038799762784572, 127214067098599146044102912383538310785919339012842875166013412905288794426, 201747729362989241789380364419493806857510840486777789744138313435815936003, 521222342516545346869170296352098282898180697487366395837698420813812150132, 21384480877498030869454209405815772458304077720102573529957815727485943754618];
        uint256[] memory cs2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            cs2[i] = tmp_s2[i];
        }
        // hint
        uint256 hint = 5753;
        // message
        bytes memory message = "Practical security on the chain.";
        bytes memory salt =
            "\xc3\xff\x24\xbc\x6b\x6d\x7a\x3d\x30\x7c\xe7\xb1\x73\x1e\x7d\xf5\x96\x90\xd0\x53\x0d\x7f\x2f\x5b\xb9\xed\x37\xd1\x80\x16\x9a\x6c\x1b\xb0\x22\x25\x2a\xb8\xcc\x68";
        address recovered_pk;
        recovered_pk = epervier.recover(message, salt, cs1, cs2, hint);
        assertEq(pk, recovered_pk);
    }
}
