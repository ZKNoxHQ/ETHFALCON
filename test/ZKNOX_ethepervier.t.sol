// code generated using pythonref/generate_epervier_test_vectors.py.
pragma solidity ^0.8.25;

import {Test, console} from "forge-std/Test.sol";
import "../../src/ZKNOX_NTT.sol";
import "../../src/ZKNOX_ethepervier.sol";
import "../../src/ZKNOX_falcon_utils.sol";

contract ZKNOX_epervierTest is Test {
    ZKNOX_ethepervier epervier;

    //exemple of stateless initialisation, no external contract provided
    ZKNOX_NTT ntt = new ZKNOX_NTT(address(0), address(0), 12289, 12265);
    // forgefmt: disable-next-line
    uint256[512] psi_rev = [uint256(1), 10810, 7143, 4043, 10984, 722, 5736, 8155, 3542, 8785, 9744, 3621, 10643, 1212, 3195, 5860, 7468, 2639, 9664, 11340, 11726, 9314, 9283, 9545, 5728, 7698, 5023, 5828, 8961, 6512, 7311, 1351, 2319, 11119, 11334, 11499, 9088, 3014, 5086, 10963, 4846, 9542, 9154, 3712, 4805, 8736, 11227, 9995, 3091, 12208, 7969, 11289, 9326, 7393, 9238, 2366, 11112, 8034, 10654, 9521, 12149, 10436, 7678, 11563, 1260, 4388, 4632, 6534, 2426, 334, 1428, 1696, 2013, 9000, 729, 3241, 2881, 3284, 7197, 10200, 8595, 7110, 10530, 8582, 3382, 11934, 9741, 8058, 3637, 3459, 145, 6747, 9558, 8357, 7399, 6378, 9447, 480, 1022, 9, 9821, 339, 5791, 544, 10616, 4278, 6958, 7300, 8112, 8705, 1381, 9764, 11336, 8541, 827, 5767, 2476, 118, 2197, 7222, 3949, 8993, 4452, 2396, 7935, 130, 2837, 6915, 2401, 442, 7188, 11222, 390, 773, 8456, 3778, 354, 4861, 9377, 5698, 5012, 9808, 2859, 11244, 1017, 7404, 1632, 7205, 27, 9223, 8526, 10849, 1537, 242, 4714, 8146, 9611, 3704, 5019, 11744, 1002, 5011, 5088, 8005, 7313, 10682, 8509, 11414, 9852, 3646, 6022, 2987, 9723, 10102, 6250, 9867, 11224, 2143, 11885, 7644, 1168, 5277, 11082, 3248, 493, 8193, 6845, 2381, 7952, 11854, 1378, 1912, 2166, 3915, 12176, 7370, 12129, 3149, 12286, 4437, 3636, 4938, 5291, 2704, 10863, 7635, 1663, 10512, 3364, 1689, 4057, 9018, 9442, 7875, 2174, 4372, 7247, 9984, 4053, 2645, 5195, 9509, 7394, 1484, 9042, 9603, 8311, 9320, 9919, 2865, 5332, 3510, 1630, 10163, 5407, 3186, 11136, 9405, 10040, 8241, 9890, 8889, 7098, 9153, 9289, 671, 3016, 243, 6730, 420, 10111, 1544, 3985, 4905, 3531, 476, 49, 1263, 5915, 1483, 9789, 10800, 10706, 6347, 1512, 350, 10474, 5383, 5369, 10232, 9087, 4493, 9551, 6421, 6554, 2655, 9280, 1693, 174, 723, 10314, 8532, 347, 2925, 8974, 11863, 1858, 4754, 3030, 4115, 2361, 10446, 2908, 218, 3434, 8760, 3963, 576, 6142, 9842, 1954, 10238, 9407, 10484, 3991, 8320, 9522, 156, 2281, 5876, 10258, 5333, 3772, 418, 5908, 11836, 5429, 7515, 7552, 1293, 295, 6099, 5766, 652, 8273, 4077, 8527, 9370, 325, 10885, 11143, 11341, 5990, 1159, 8561, 8240, 3329, 4298, 12121, 2692, 5961, 7183, 10327, 1594, 6167, 9734, 7105, 11089, 1360, 3956, 6170, 5297, 8210, 11231, 922, 441, 1958, 4322, 1112, 2078, 4046, 709, 9139, 1319, 4240, 8719, 6224, 11454, 2459, 683, 3656, 12225, 10723, 5782, 9341, 9786, 9166, 10542, 9235, 6803, 7856, 6370, 3834, 7032, 7048, 9369, 8120, 9162, 6821, 1010, 8807, 787, 5057, 4698, 4780, 8844, 12097, 1321, 4912, 10240, 677, 6415, 6234, 8953, 1323, 9523, 12237, 3174, 1579, 11858, 9784, 5906, 3957, 9450, 151, 10162, 12231, 12048, 3532, 11286, 1956, 7280, 11404, 6281, 3477, 6608, 142, 11184, 9445, 3438, 11314, 4212, 9260, 6695, 4782, 5886, 8076, 504, 2302, 11684, 11868, 8209, 3602, 6068, 8689, 3263, 6077, 7665, 7822, 7500, 6752, 4749, 4449, 6833, 12142, 8500, 6118, 8471, 1190, 9606, 3860, 5445, 7753, 11239, 5079, 9027, 2169, 11767, 7965, 4916, 8214, 5315, 11011, 9945, 1973, 6715, 8775, 11248, 5925, 11271, 654, 3565, 1702, 1987, 6760, 5206, 3199, 12233, 6136, 6427, 6874, 8646, 4948, 6152, 400, 10561, 5339, 5446, 3710, 6093, 468, 8301, 316, 11907, 10256, 8291, 3879, 1922, 10930, 6854, 973, 11035];

    // forgefmt: disable-next-line
    uint256[512] psi_inv_rev = [uint256(1), 1479, 8246, 5146, 4134, 6553, 11567, 1305, 6429, 9094, 11077, 1646, 8668, 2545, 3504, 8747, 10938, 4978, 5777, 3328, 6461, 7266, 4591, 6561, 2744, 3006, 2975, 563, 949, 2625, 9650, 4821, 726, 4611, 1853, 140, 2768, 1635, 4255, 1177, 9923, 3051, 4896, 2963, 1000, 4320, 81, 9198, 2294, 1062, 3553, 7484, 8577, 3135, 2747, 7443, 1326, 7203, 9275, 3201, 790, 955, 1170, 9970, 5374, 9452, 12159, 4354, 9893, 7837, 3296, 8340, 5067, 10092, 12171, 9813, 6522, 11462, 3748, 953, 2525, 10908, 3584, 4177, 4989, 5331, 8011, 1673, 11745, 6498, 11950, 2468, 12280, 11267, 11809, 2842, 5911, 4890, 3932, 2731, 5542, 12144, 8830, 8652, 4231, 2548, 355, 8907, 3707, 1759, 5179, 3694, 2089, 5092, 9005, 9408, 9048, 11560, 3289, 10276, 10593, 10861, 11955, 9863, 5755, 7657, 7901, 11029, 11813, 8758, 7384, 8304, 10745, 2178, 11869, 5559, 12046, 9273, 11618, 3000, 3136, 5191, 3400, 2399, 4048, 2249, 2884, 1153, 9103, 6882, 2126, 10659, 8779, 6957, 9424, 2370, 2969, 3978, 2686, 3247, 10805, 4895, 2780, 7094, 9644, 8236, 2305, 5042, 7917, 10115, 4414, 2847, 3271, 8232, 10600, 8925, 1777, 10626, 4654, 1426, 9585, 6998, 7351, 8653, 7852, 3, 9140, 160, 4919, 113, 8374, 10123, 10377, 10911, 435, 4337, 9908, 5444, 4096, 11796, 9041, 1207, 7012, 11121, 4645, 404, 10146, 1065, 2422, 6039, 2187, 2566, 9302, 6267, 8643, 2437, 875, 3780, 1607, 4976, 4284, 7201, 7278, 11287, 545, 7270, 8585, 2678, 4143, 7575, 12047, 10752, 1440, 3763, 3066, 12262, 5084, 10657, 4885, 11272, 1045, 9430, 2481, 7277, 6591, 2912, 7428, 11935, 8511, 3833, 11516, 11899, 1067, 5101, 11847, 9888, 1254, 11316, 5435, 1359, 10367, 8410, 3998, 2033, 382, 11973, 3988, 11821, 6196, 8579, 6843, 6950, 1728, 11889, 6137, 7341, 3643, 5415, 5862, 6153, 56, 9090, 7083, 5529, 10302, 10587, 8724, 11635, 1018, 6364, 1041, 3514, 5574, 10316, 2344, 1278, 6974, 4075, 7373, 4324, 522, 10120, 3262, 7210, 1050, 4536, 6844, 8429, 2683, 11099, 3818, 6171, 3789, 147, 5456, 7840, 7540, 5537, 4789, 4467, 4624, 6212, 9026, 3600, 6221, 8687, 4080, 421, 605, 9987, 11785, 4213, 6403, 7507, 5594, 3029, 8077, 975, 8851, 2844, 1105, 12147, 5681, 8812, 6008, 885, 5009, 10333, 1003, 8757, 241, 58, 2127, 12138, 2839, 8332, 6383, 2505, 431, 10710, 9115, 52, 2766, 10966, 3336, 6055, 5874, 11612, 2049, 7377, 10968, 192, 3445, 7509, 7591, 7232, 11502, 3482, 11279, 5468, 3127, 4169, 2920, 5241, 5257, 8455, 5919, 4433, 5486, 3054, 1747, 3123, 2503, 2948, 6507, 1566, 64, 8633, 11606, 9830, 835, 6065, 3570, 8049, 10970, 3150, 11580, 8243, 10211, 11177, 7967, 10331, 11848, 11367, 1058, 4079, 6992, 6119, 8333, 10929, 1200, 5184, 2555, 6122, 10695, 1962, 5106, 6328, 9597, 168, 7991, 8960, 4049, 3728, 11130, 6299, 948, 1146, 1404, 11964, 2919, 3762, 8212, 4016, 11637, 6523, 6190, 11994, 10996, 4737, 4774, 6860, 453, 6381, 11871, 8517, 6956, 2031, 6413, 10008, 12133, 2767, 3969, 8298, 1805, 2882, 2051, 10335, 2447, 6147, 11713, 8326, 3529, 8855, 12071, 9381, 1843, 9928, 8174, 9259, 7535, 10431, 426, 3315, 9364, 11942, 3757, 1975, 11566, 12115, 10596, 3009, 9634, 5735, 5868, 2738, 7796, 3202, 2057, 6920, 6906, 1815, 11939, 10777, 5942, 1583, 1489, 2500, 10806, 6374, 11026, 12240];

    //stateful initialisation
    function setUp() public {
        epervier = new ZKNOX_ethepervier();
    }

    function testVector0() public view {
        // public key
        // forgefmt: disable-next-line
        address pk = address(728199263750570446964354330903202655824594974439);

        // signature s1
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s1 = [503880545520722058592989806203781779891305894595406043692543945918257508315, 21309944820798253419267415768265780474380519665514545130764386118069976641386, 360765955278520717911785105482696791078356431797689643235370759370281189387, 21479888898592740808338491465160654644490863928778238092199292622109630595246, 21705716303607213528122919704463823196463677037685215788118698407124516536368, 21702510302760272062552310572277810426884753725074590250394883957035794051037, 21290516647475672709503867809959843747026770798850139147388613633995914489553, 486210398436600364755759153360899845920593160977288742333307181329441697722, 106340899453553912112352452655076015494526138867665847069697488824936116183, 21704276453674264996175852052490452678170303462423812380337258113077013708844, 392248384014060315193294707573450209748459901926285937110551294673003020467, 21709255200922479599411944226468014629941205624950679983256014862004125892620, 280933940574107561172728886172296799517708214057300266894417346972760158173, 21698978738401504906590844224771280196602686833983787317460730847430654111671, 309525368421636679816410539854295458512617560036137600880651317376668020562, 21479888844603324750707238563211918620323918056565917305077021097643275059254, 175244834633352196118480925307779745899673165726942763683647226855901036767, 21544934353095136654901939500506246930461727526749287239120405598659347623871, 194364154871913347593812269852130609234040254318613534556672439901335388224, 406381435077263375553538218596046417611533779248080690048059043151405514979, 21216626793758614728380800107421547949686663981414271548183364348509214212197, 21680983275479493831141915811526822723230060092659206729413688913520525127503, 307759982096347910961297983369905256972495112564729898244271064698042068936, 355143301587046733102627083532809048945911460064881041148459242116197986192, 189058086880358791744431428504861774643678195925170817408888500721152503628, 21711019540824114526066511347592106652165047839423835051792745442983845298367, 21472823230835344182909537588723027332862651297628165911465586556681750970391, 21529361020767812166546778465063074991328728256074473783392032735035625242641, 21278147105439351838462139117557198633108486866634687506871233470725645152127, 56540027708082196430745834402944785753328216302498734974540491478999826478, 21492248869827013728766137743265412176389198794104148136544526307484530651121, 21343515459229151303912940015852757348134260273136064477494347834813143199604];
        uint256[] memory cs1 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            cs1[i] = tmp_s1[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [189061025430138993865854805011532069333293715869299695949354293295109767338, 309200829492683618362801840838735315073239679824516877254610688296907178015, 17669203565873415420439226729611576544749443656481276334890396524208467774, 21567902685951065342220093337212015325627859479836552266578154972738260959272, 21629742710641854202617034886213873892640485268970955124070672848858167127875, 21518761173595649991077541634911872372568563460460287375282464679909027151878, 88668843202050080354162430362465493400899326659627631899251092744825352121, 21589115041612929508944530253353887521990674352656231997732268725231305949408, 77748037816609010048821043986758852741763365848433569238103440621543948394, 196125604980477431416529085554673976708993318735365421874476849166068940885, 21444227575187532861933165945345576589177205410775875437029272647414716641113, 21571766779137214249890997998635625679180679668367453624699784252197002280960, 132842791722068690864021037096966919030178447937701691660884444009250095184, 252660618073406522895016361327352646221166102604901000414436689373735890818, 21661875898514585455300483231269254543688174841797784277884596070553710964571, 408469887372575727764354863939787898486221033046251585808276641395393310697, 21483098798806565528090561173471573130149923357778077129069435100923827138387, 21365040707017283224032169374693579384647805515287338499452209675962376454353, 139582082355163817792446396090827957258977980096747497728717346717617488024, 21698977390374140751926738932285965733024723476130692021975378126228657012810, 21582043479534721231928031949222680268801040592884446810862621247728671654012, 106016188978695213660006561000087639649638405319762547008619378770056380540, 21396523669988578255532519494435324598773577619532813394543061212841669504837, 567487142710691728457912662951684626851937150493245889102477722465050636084, 185844569086061214504135130584456987157183142589951887136070171885834153901, 350162015184944149647336545709148596957881292049384682934039156939714199637, 56868125263755762880306655715105756108612883350558868787549471782918631255, 113409366200701537080466339400905201724440194357091543728319651397816025091, 598968924407998825190710488524458442266573561012338161932509137359297720206, 21524058349737765174490280399545977619713148567855354072883708688105677467568, 21592968836075103278633512472085925061228035841536899495353847705011755429638, 224400819594214410949880090102269951771459564115310187818733077437072605190];
        uint256[] memory cs2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            cs2[i] = tmp_s2[i];
        }
        // hint
        uint256 hint = 11177;
        // message
        bytes memory message = "My name is Renaud";
        bytes memory salt =
            "\x46\xb9\xdd\x2b\x0b\xa8\x8d\x13\x23\x3b\x3f\xeb\x74\x3e\xeb\x24\x3f\xcd\x52\xea\x62\xb8\x1b\x82\xb5\x0c\x27\x64\x6e\xd5\x76\x2f\xd7\x5d\xc4\xdd\xd8\xc0\xf2\x00";
        address recovered_pk;
        recovered_pk = epervier.recover(message, salt, cs1, cs2, hint);
        assertEq(pk, recovered_pk);
    }

    function testVector1() public view {
        // public key
        // forgefmt: disable-next-line
        address pk = address(728199263750570446964354330903202655824594974439);

        // signature s1
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s1 = [477374680218070165462962528299179998570564100384919472303217678990424289189, 21423022013457399642464279289024224375989033714414319282338991858434134835421, 197888493862204294482761189476750239042135355027176856371987608888940494928, 20958344120085537080091312859412244470933309703062205567080453315217779142528, 56865919595301164934940610162938991337928104653916953678063749174127820948, 21476347192441357360018727769811029316430377972507985946118909198393794179061, 618724009088429378242728301573190887554214961044102578235405026833867341876, 21483097423849620261230549454697171188864785516286277466050164151801786925144, 176686998140435611551702225118889558682504971349801527818652232343039913865, 270333860547417527262678202900630279624984930838694452701283658608323473310, 21370016299947699943337248442190653868502234849444274613874824053296766582818, 532148934338843593535157388258372368661675549034024494888939843760944644193, 2096081957338197309471192357271408402937577961225219159962917184816480446, 21594409543782838394376904629777490285727394174537417849150325659354835136280, 374898089708810269778371508792420429406929063233754647258177434417147096977, 203191429505016231616367816068285379345345393569175669223677212139985907207, 21391218195205456160045618396547125375534089318872427682584132839232249212641, 21640346116540141106158372050061634353137452900949410351040909239572518469712, 21561160817091503282549596423531323658191935751221761895280153104538110668605, 337793443581980738116505300688536194617332676586496377101809521871076536177, 280934457764830238501422932232051772387097641918524184731993928404984410040, 16229753204216371316909954925396840609851567618152390713939208082678558633, 86576670447189436972894351612112516981665958070948515552349194258927386734, 46265775803591945203224849240705878144842522823580352565256107247796170615, 88662372839458041069589278679876866196840495362988668215836594004384821141, 21431860023032648723836672959436799808593842769479516516964817754820761157885, 88672644542936222400140146705824352474775555378325347580784427176004562683, 234991980748016069056626983794922451255783470116531206763847232075154718792, 21557304784860784968634909061396068276240671004225733929609887967378125631458, 21468960198848249940208866454912544040492038294800372437586284335263233212661, 21552329650189812471252018430894619394179131710423582332361500343673528594115, 21491929911710688509868542325452394849671015807566718424701915436518640725850];
        uint256[] memory cs1 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            cs1[i] = tmp_s1[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [21389779235009502201415165388746255644806892009849907291296782704405420453841, 286231785753283125087165732204630875303174395032629853291564152839691251707, 332167253148658464931892866119162250749481723589252256811541324801983262547, 21331147287106564815154771559739610854777572529827134032693081522727985098749, 390803789185700534422664623113098797438358549533391876953264459802635481031, 21437157432018521557300654492734731837469269454708526135539847111485524881268, 212352473303306617178005169687275167862272245415408780262489065209963425727, 160786080417103479597398726898564919367592921725238371463359061334690443213, 183755356939528164237166444739620027708760402614217082842194601394376224748, 443480419583206998324575234800502651888597160387945815889414713855595577544, 30364934045051351224339035424002151875464837331694250019715006620526587790, 21587655839439298281873340802225135733069571719225545857267033283560952508382, 21596173457156935737215552062946709497266589574164543125867313261728045543376, 204954803694169105334756321910335731867542077551244595806771417786214514810, 21569996508248813623418686077061390038430331196338787038020544784285313466532, 21704275995491673251592576794285996174400088524993326206178893108443371470962, 102477183811224295097924048455714563029308181834196063566739250135981162619, 21539637365585511906106736977123446346808991235780246601987378902571693310232, 448780965679986847335436220061629018054869059841247396137619973937795432816, 122243655450170358270086289456520894929583883624488973887325127821286375635, 21660106193819209596094672258887579936954676111742240365874063960176141533319, 21698653417719665677454090054196501073641284466281047596240524734197967487027, 410237327521213803882721629363884331799761118203603320144501266873773719795, 55102087036794253709851738127517526658228991585835984322690549363151679411, 254755940183635284094629628251276060586021284081723019220411086535687077983, 226483798924088018395144638755116856102039888951488409756324836504531382079, 454410008914611017345956522395726266705039679130597014282491153409291583795, 21564696959569012654486252742655996148338027174049096304074523451403302481610, 21658012749001852508610486044878271513248470827713510347640848654353220894765, 330724513676723763687802969890834086273114257896926143478088551482478702285, 20861169364767011447189625560664371597112065363288028553556967462944971227345, 21483422318080593641041318043957332206291503508643413574548833598637165379664];
        uint256[] memory cs2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            cs2[i] = tmp_s2[i];
        }
        // hint
        uint256 hint = 6177;
        // message
        bytes memory message = "My name is Simon";
        bytes memory salt =
            "\x34\x9e\xc7\x55\x46\xf5\x8f\xb7\xc2\x77\x5c\x38\x46\x2c\x50\x10\xd8\x46\xc1\x85\xc1\x51\x11\xe5\x95\x52\x2a\x6b\xcd\x16\xcf\x86\xf3\xd1\x22\x10\x9e\x3b\x1f\xdd";
        address recovered_pk;
        recovered_pk = epervier.recover(message, salt, cs1, cs2, hint);
        assertEq(pk, recovered_pk);
    }

    function testVector2() public view {
        // public key
        // forgefmt: disable-next-line
        address pk = address(728199263750570446964354330903202655824594974439);

        // signature s1
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s1 = [54780648509113670587582856707736493274575706884547360110189378879343165664, 21709579497290225287000794169615655231272587250051886476690547971835403501666, 282697395458056655790583670483666948950513078283792043222918473149474287599, 20997214211366164382248959590218125927315363505951533058304976398093920710183, 21497228565657670725893525038232116562861121679117310426173029938665952587623, 21286979718129889559955948348500107519206492408417695787210233449748905209708, 1772859144068187169598496737667305322540436097997492563087451143752658819, 371040746317360058654807756107117034718367506555202495749640715968220245807, 445247832859597038467040900542637520592643577174021248419702600382197399612, 134285261678793215181002881380895558679231809318474218982304111193674559300, 21522290666954545847487323631046870732478526591041004205088966886098973032617, 21592643209060300940726884964231308440312681290820752704350174990911454916406, 21513458264880213258505556839346687883577734161285209447045838165075701006637, 7398321639496735430312846087869916389350876972316658319650176305038962579, 76301291226449157527041685243973287131411397441742495412131769942754590789, 21626216085038012408831633143017299905352097477650982160619611052290995924974, 70677657084942209234677751018485083609434735254512469831597972572866490124, 24738824546693582568506653369849681779172058191476597276207528505076428598, 21472814846208011120468762955454069175738764915096842654116820566048839303373, 254755864189710098638305879318072077984010005746349253983519981062334775437, 21700415708543507838323690262495121177054292489870767400188552738484693839775, 138142011913084823785136173891349203731282404611219931261060560268386500781, 231785046114673295034016389543451032596475547741316535274693520140746424352, 20947741959308461706752382248899168122758388533959518920564451795405414137869, 21633279321467807179312460024404984294467121550270873454051855624103756890262, 21382713005961038674376915556909430363560164552444489310462207491375902884097, 298600092645572931931962385551862089335488620730380887564158600859977789303, 79837411745110747012987594729679792974943495227433501966588798591640023022, 819824888327544504495097414247475160210625021187194813267429212561106993314, 22974867085414242962010767860959155624721088018527723012937335457341910954, 21631516028105426102034730944581399710625858447757547012400693565197753135102, 21534332349080756746067472436887261955503513489143743275439954111453642895160];
        uint256[] memory cs1 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            cs1[i] = tmp_s1[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [21599706531185505609410513998108918748904008536425729236043465372750438072370, 21209560241239748747471565087029600766729518619669131275147528799098646561017, 185522311891326455523192513667021172871260528086173547122273599036657696869, 21375640252696885200264299526365055270070218984736147164299680400577608548600, 445251310663509784184940323291387367265849379978258690464208256115540820293, 21690144853529433140726147242397528058498208037474915038651850092316463738824, 494721842277832609947993253572329657173040959062980163499251133870481735684, 116612769056608249402585346490778207556837579315061897461745727667993784098, 51238947270460226827795384123417670069959237385428995530639806997424898146, 290090428086286431535881904324899605303965848194391668478065387436054294397, 21389455127489882405152044858571009061684501781622685324169821638304058441887, 21508150956758261414028862658810032935622703000793048453374383639031652220991, 21228668615636218633457624434310376918909679102750988799227151817161279406239, 21380947075538149522780505087375563564283179899680646232301679085462563860298, 366064420510887972131904548482152816036266255734279147735913767019738050522, 233553322025773257914246221850322214029421111062025209215384656026317107154, 7634703106926160185169278169317723676982967886702476662502778795393087, 21437480681823150046614956328634075908037664125551197028860963595420688920467, 21677454833609941980904713722748620143125969078344959337387694762026007867034, 351931692996403517564426488813246673890107591343313943840465644417471152306, 21504295787228818393598747939873516274866078809260913742346137372637521915647, 194684385106982187017932338565560383680223457640897900421197411745105719116, 21663312777962884971570060557998787257781553492375354945324836990195957563620, 203514490527082057563130781703034101480280542698876673210241303466598150118, 102481906712076840093342164703398157882382223204396950662922302485407400236, 22970629466071551629815075776229122248211413144055819834503770545188569296, 21531128487912261720585779717625742970846153871091609829930354014366253985663, 74538164608805971287564112909349701527716668991480316610677787927274586157, 19438611841142925498497491503826172457174036566403076698428091301657784316, 21274606886905952896262138670400864550463623721953997681851513487849882988408, 12380007549048631015726945294294936201025772238357094738183685604361449336, 12371676934654911488680767416737611665499464490916565056368528375633477721];
        uint256[] memory cs2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            cs2[i] = tmp_s2[i];
        }
        // hint
        uint256 hint = 6225;
        // message
        bytes memory message = "My name is Nicolas";
        bytes memory salt =
            "\xaa\xae\x31\x4e\xd9\x08\x3d\xab\x4b\x09\x9f\x8e\x30\x0f\x01\xb8\x65\x0f\x1f\x4b\x1d\x8f\xcf\x3f\x3c\xb5\x3f\xb8\xe9\xeb\x2e\xa2\x03\xbd\xc9\x70\xf5\x0a\xe5\x54";
        address recovered_pk;
        recovered_pk = epervier.recover(message, salt, cs1, cs2, hint);
        assertEq(pk, recovered_pk);
    }

    function testVector3() public view {
        // public key
        // forgefmt: disable-next-line
        address pk = address(728199263750570446964354330903202655824594974439);

        // signature s1
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s1 = [21677776034504291047975664185910275674957056201546143057504200713188573839401, 21596501856171027858103634501293183642642892768497182970201985322509829341202, 12691669492970201568851730549639007310148557708279150490305959210104062058, 21504621733037915484601331242284198350448391561197516908137556829499113078849, 33573334405406516079045887407368417364336531797305939739482346166295199865, 21214855606099975690605776542893569659194963626129034382957672364062519722177, 83048606003389916706225392326088056535790296975035971811405654699909513396, 21665404950721860410941261516917960464070782054852254909403440154581996994801, 136374005615851559274657027125369173409745361352783381104236229132570799804, 335703158026267376066681573141117000036371855555615504550602020560451076252, 21502857694621587872565517510990796824592876376552855493096948620710191509437, 21564698878729952015979820794696445421306532412621865248375144370594103373558, 21612076967862572253129501968348996836518174865347659229713012349042361041038, 21601479039809129408111416097406860792258893934318998981967601114356145794999, 21198959756852040716685303858080455695874068518549587076369804020354351771406, 21640345868962462055946554396066955992721944611154701869307465902773187510374, 21248429232208501607754856182820010343061585542509085815668586102937691881643, 21306737697472512147956950383508942754948030079286449801234946103930518384338, 21495464140061862914613119855514347476604561385895108255291645060300190461822, 21543495689473891008148752287907326697784349923000828704345838043926848995449, 20948067662375680533248171015881702366414831058212352872615795457022530683104, 21469284041732552883675582184871155118410476588939590983073365690727234666958, 21560843606347162665172121559390412923917934446305143602139703721839920873543, 21332916259036060227584039736954242030813360036997131980087945150164481212444, 141676870273392986898492277515644671904743823058276461005778211141365072093, 355463634774677097842365771228610174400538344622676588530635505018336260016, 21511691520656999461229412175039246939866341103233980467956760513332601696256, 342771107487999383972933706748941763154261540472237519046718036248762515593, 351928161230561174884710623576163877212274699523178403735767618551677005772, 21679538438084763391161052377631639353085873327299880687996171946921197318076, 21640349319943491558363418367864774064724065240313865465105265494027487162222, 477376221939831086380694224210680968769138743994026571660473856810359062930];
        uint256[] memory cs1 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            cs1[i] = tmp_s1[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [21437161238232716896150200736746617675471862936119553296490011870485362978604, 21623000841747474996953320312341348286936995184742291016294225390926111506603, 289771928282808109819187554796900215510487939754850961173419629126940700648, 88350845640295432606238672873564465556957191664536019737331370685462949740, 33892400488223981856697783995535718769383973513217836752013204468220637174, 21290833701389516274082246754026634827975170263779088677870831157031055589437, 21642117600777041026646139658891334102554515713034656681001058845491623768056, 35666639499269557465178965201798420102513223862633097525393683138429059124, 159019767672337180994621271994082432107703918220710733493636458361611890539, 21704280605589896936297976345605606486402768640808117856428307186085870579583, 221183990687184500217905484846263637380405338581945339251196736220779511963, 21525503074433871802898942541117583510904681545937162567749306378017714798621, 231782053493128482303634261703105030047277544095542708426736230317919699228, 314498885387617273752517583466998732727711622766205889821111394678283567174, 26504004979048403478693108204387293520186664862636077365404759711729516690, 161112695229114899755462843483084246857326342308578177931226130024667545985, 21585898962598191556920272557207490123958052501470771119697266744667803942917, 21361509794642464396350490249528339155763232023776012199100998716828518973757, 21495787389827826622834969785303707326270270775559850568026283505461748313716, 72769074863316522232318394140968978434498621200732032217499417420314128303, 196121323276010097064931824897707913968746835526373094644998380482406133569, 399314095788365961141409581714161245794821039503313717264217971773904977972, 21569670077179263453917162693301319277714915187930485959650694507114235691198, 139911581892238257944992288078325245922103536623310741357979970209411301574, 388709104194602563682369550543205741536243383935660953995527925729815560301, 21567905651640638571761871983959685618141473438068871701431447299342655357217, 21612081168689668274826118727621803928202380057317255876227827578208937979898, 21350586050828112391104646753674514712646492940651190836177575230918401130669, 21532893474589746109216256386465537267187393598110779952903117096625768574963, 21184822953514839730566586102125008021613612359936949761240571193570363715435, 291855959135757256073681324306461455761306669795357442766033865519525527889, 523315431855963262944221335960794652384226339812637670717474153692737318773];
        uint256[] memory cs2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            cs2[i] = tmp_s2[i];
        }
        // hint
        uint256 hint = 5609;
        // message
        bytes memory message = "We are ZKNox";
        bytes memory salt =
            "\xf9\xa6\x6d\x13\x68\xb2\x08\xe2\x1f\x7c\x10\xd0\x4a\x3d\xbd\x4e\x36\x06\x33\xe5\xdb\x4b\x60\x26\x01\xc1\x4c\xea\x73\x7d\xb3\xdc\xf7\x22\x63\x2c\xc7\x78\x51\xcb";
        address recovered_pk;
        recovered_pk = epervier.recover(message, salt, cs1, cs2, hint);
        assertEq(pk, recovered_pk);
    }

    function testVector4() public view {
        // public key
        // forgefmt: disable-next-line
        address pk = address(728199263750570446964354330903202655824594974439);

        // signature s1
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s1 = [21695115167320452829484789821252597010645937871822608529698126739461961363372, 21421257053573591163904133333571386942219684141578392837038110413995669454887, 123683909602546187547200308047482503539674839203259403828974626153024127056, 145208672232658535282129630872055543521483050832709078647285294417704452106, 21665078713357742428714638385738275669985746309675570323735009874447957557404, 71003904322912955393518317319037281539402461602173502274156574333534285776, 307756504229905853975198079011614187747876523696745724740358591001455374162, 21553769720640116533714768510007470547830348280647748855724333758967808733138, 21605333983757100427418912026092849275604161877579671651039789573818640564581, 21157997941330646915298171549136884425878607573234459751301451464212988112832, 21610306535165613142176582004117477682340918123508133099416476691978286280612, 300374089079218146853773252305771548808497188389470053891538482633692545108, 3535559338181115760025292554863328085270373292686721737060575071892209744, 51243040364316288739929646538808893723140242694874668396920460914758528931, 272101543440962235128391662494353662326532902271523428954603302799727538084, 182313188484413334692265934724673740159075595428937823751260570083818417885, 238527157584471963879326225264987359156589897017150132220584462514170232876, 537126279675180990264863001731113308734013198171352412833790978796818465015, 300366567203422875375938840573525383354370627719337147973829141288362836049, 58309592770876489421063335724916851422475705063141452185838386829428535288, 21582365947447010241342043325705335055989311493862891931154712763415876730981, 132516468553449802830877935958312250263028813671033863740449707804399906673, 102477269600351534476546077533346397006573398581997696169398339087729504176, 542751202900917313958730415005527005330689373761003020974480423875378610202, 614864778573449289107973493575328770455530592503266822476965616322866130812, 364298651832121766323244707845846318388043688949946281327612607703984451486, 167852579060094137720511792265684296970115826322543790464286699383417024272, 21392992456178229002749417949462542125191626475289741437099407105650963394531, 473522081909283923230788536118738308754036782953776622930979347883126763480, 21543171199526596643460055435576878946644218180235282550553427553067839652033, 102807227392757697993364814007622764481554254071639814418123181075478884212, 21659783127791669313574454330974287429264233661411646091076330637244116303977];
        uint256[] memory cs1 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            cs1[i] = tmp_s1[i];
        }
        // signature s2
        // forgefmt: disable-next-line
        uint256[32] memory tmp_s2 = [21144185475908384251291848127658451840118668397120687346685347800276108181618, 178454524157596204083198831737579244400720412848618379921769757194428219458, 86578471827589046202171357245160750480897959197291238936653154487434030789, 784480743821377177934339092951575843300033553278216791444403021043486961575, 353699434701364706443627805959334892166508764041347923784496399286200041538, 72451869138847781661426646120114564018595725986978280352449638557032579498, 21435393038376763921101062668192245393782476009562964970873611640580267519800, 705986116237663506800642617894538221512608370891034550795081818517362, 65376285084408461502234689381573972459125513396366082569016217541041663584, 21679541053220905904510927288790386269175132850042252274547753174760158670843, 21324400663297068481399047979935312225696838775103987934813424263511810834699, 289763376971620586415263245947844816210046230546701258788327344957764939717, 40967283582068681957600723598741436509851332224180615120829315268242768168, 21461893295895327037059181441182965013902520383783813647355113579862887247793, 21325848039999466570360550438977118240390570864280934984247172328693515354234, 21294043552704368897087468350576426571962272752582902692954825892179403079794, 21677450012801568230193684183601572885002230860212020797824047436198366949365, 21638907129448153283707022089913338473147322115786649879543261589555176746777, 196122100186924282937302047441332183757025956565304475294897769263487856406, 392569234357523206882608241763500232207840004647588738054276481672500686712, 252668027134643210375492535292333694292614581387624982648349668379704819991, 21544941470533809535997047481859823358278023483462962355682885339669404069871, 21191892152908081918989650988263359404184056429060781812756326363070358368229, 21423024542688818504918374823577453817908203518144309997034914444964200120362, 21391541288105394766038619046271188994221001023418561644664913323972632838222, 21442460107973636616796391997122174347769757548224653885574465252287531200421, 21191894121096905079400801662571023638728816084051531488502262713233335451705, 611658535085829530731475531678956174590070939351233092540783592313493270321, 21654807243255145882064710151321498018289106530071115115589225714940500181133, 236758832697884990590162108098319256018384768742313014172961613048701059086, 17679232676729902387956827993227407334162514609488906570077505897914248999, 21617380151202513115664190491258036018727194956731358697115782406707217760395];
        uint256[] memory cs2 = new uint256[](32);
        for (uint256 i = 0; i < 32; i++) {
            cs2[i] = tmp_s2[i];
        }
        // hint
        uint256 hint = 3915;
        // message
        bytes memory message = "Practical security on the chain.";
        bytes memory salt =
            "\x14\x30\x45\xd7\x91\xcc\x85\xef\xf5\xb2\x19\x32\xf2\x38\x61\xbc\xf2\x3a\x52\xb5\xda\x67\xea\xf7\xba\xae\x0f\x5f\xb1\x36\x9d\xb7\x8f\x3a\xc4\x5f\x8c\x4a\xc5\x67";
        address recovered_pk;
        recovered_pk = epervier.recover(message, salt, cs1, cs2, hint);
        assertEq(pk, recovered_pk);
    }
}
