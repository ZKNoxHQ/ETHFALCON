// SPDX-License-Identifier: MIT
pragma solidity ^0.8.25;

import "../src/ZKNOX_IVerifier.sol";
import "../src/ZKNOX_delegate.sol";

import "../src/ZKNOX_falcon_compact.sol";
import "../src/ZKNOX_falcon_deploy.sol";

import {console, Test} from "forge-std/Test.sol";

import "forge-std/Vm.sol";

//simple ERC20 for the demonstration
contract ERC20 {
    address public minter;
    mapping(address => uint256) private _balances;

    constructor(address _minter) {
        minter = _minter;
    }

    function mint(uint256 amount, address to) public {
        _mint(to, amount);
    }

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    function _mint(address account, uint256 amount) internal {
        //require(msg.sender == minter, "ERC20: msg.sender is not minter");
        require(account != address(0), "ERC20: mint to the zero address");
        unchecked {
            _balances[account] += amount;
        }
    }

    function _acknowledge(bytes memory data) public pure returns (string memory res) {
        return string(abi.encodePacked(data, "\n was successfully signed!"));
    }
}

contract SignDelegationTest is Test {
    // Alice's address and private key (EOA with no initial contract code).
    address payable ALICE_ADDRESS = payable(0x70997970C51812dc3A010C7d01b50e0d17dc79C8);
    uint256 constant ALICE_PK = 0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d;

    // Bob's address and private key (Bob will execute transactions on Alice's behalf).
    address constant BOB_ADDRESS = 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC;
    uint256 constant BOB_PK = 0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a;
    // Deployer's address and private key (used to deploy contracts).
    address private constant DEPLOYER_ADDRESS = 0xa0Ee7A142d267C1f36714E4a8F75612F20a79720;
    uint256 private constant DEPLOYER_PK = 0x2a871d0798f97d79848a013d4936a73bf4cc922c825d33c1cf7073dff6d409c6;

    // The contract that Alice will delegate execution to.
    ZKNOX_Verifier public implementation;
    ZKNOX_falcon_compact public falcon;
    ZKNOX_Verifier Verifier;

    // ERC-20 token contract for minting test tokens.
    ERC20 public token;

    function setUp() public {
        // Deploy the delegation contract (Alice will delegate calls to this contract).
        implementation = new ZKNOX_Verifier();
        falcon = new ZKNOX_falcon_compact();
        // public key in ntt form
        // forgefmt: disable-next-line
        uint256[32] memory tmp_pkc = [20377218425118340445148364134355217251962993606936992273331839780054216280849, 20121106827228450321124896615938334719918113760150351437528659189176262990636, 10067497595444039977213793634597611854404700659079271442444950951559432116521, 8117003418140413121709569530562717039471558017795389997976077490386494167285, 19719916617578783495479977733846345663822541355599584111604787561804371332299, 12011255695358364119082992510081379197681548345148896992583517862986064267371, 1413712800155248155901989741415704580119744515670156265477932184210522442954, 20205896941262413308936850117551422118594142119900192427257346204109575433582, 3486279541225130755598501027003998051985801747561740177288468626060198090459, 15477599456049069393051346514952035991054078301113692636739851820730251809819, 21156392022423827010876847021244058034030321298933336763476969617428294271271, 2908341131797448574919302622375649436059983246466303686691800726354050296280, 4014285105619800009931504325676093765338451832744274077688243007139640906463, 17525386234073442601006363277175078033276096227970594283065994928074709206070, 9399682681199319758356271164177409471029167726563817053939019373865509324066, 14497266053893643950060558685941531408969726991430751449270004178102628913394, 20001018922134128765022849593872125843127919031255693298563962888117505231302, 20223399471737868067964408671262891234552388541376818065834177454291358723391, 11076429199706617732593752467897544427206591530047673604493842949459150906661, 10003914827585439734433133640025401879385317162577084551224105445404031001782, 20818841785974240140489196577114322827962289517719106191109136290716168037702, 9930008312479770233251082269305959959461466299666759427058224003186584853639, 13961923764749961571138036653552925829425897028586292322709756121414948556716, 1865847632959804051511238296007895164923970314748517688837335778369740540589, 9619029050213147645610307806665071441731316717663787766260527940528214317525, 14242850992292404983847270889619711734347852346434510691917062411771622728876, 14741088360075140317883502213566092308263093099494020005957065598182206670698, 450741599221347172965973222014483009289616792068532398266398440365899262013, 18781682460599299134542238039348179607304289110944838378016618837639364477280, 9945663145577743462232497392336568635199398547866845488457561121052707133988, 4434915596203863112439022225522412087141907977885194617923870370615952742502, 9078099396363096043342272050200561246179429816170715912419583083116430298211];
        uint256[] memory pkc = ZKNOX_memcpy32(tmp_pkc);
        uint256 iAlgoID = FALCONSHAKE_ID;

        address a_psirev;
        address a_psiInvrev;
        bytes32 salty = keccak256(abi.encodePacked("ZKNOX_v0.14"));
        (a_psirev, a_psiInvrev) = Deploy(salty);
        falcon.update(a_psirev, a_psiInvrev); //update falcon with precomputed tables

        ZKNOX_Verifier Verifier_logic = new ZKNOX_Verifier{salt: salty}();

        address iVerifier_algo = address(falcon);
        address iPublicKey = DeployPolynomial(salty, pkc);

        bytes memory initData =
            abi.encodeWithSignature("initialize(uint256,address,address)", iAlgoID, iVerifier_algo, iPublicKey); //uint256 iAlgoID, address iVerifier_logic, address iPublicKey

        ZKNOX_Verifier_Proxy proxy = new ZKNOX_Verifier_Proxy(address(Verifier_logic), initData);

        Verifier = ZKNOX_Verifier(address(proxy));

        // Deploy an ERC-20 token contract where Alice is the minter.
        token = new ERC20(ALICE_ADDRESS);
    }

    function transactlocal(
        address to,
        bytes memory data,
        uint256 value,
        bytes memory salt, // compacted signature salt part
        uint256[] memory s2 // compacted signature s2 part)
    ) public view returns (bool res) {
        bytes32 digest = keccak256(abi.encode(Verifier.nonce(), to, data, 0));
        uint256[] memory nttpk;
        nttpk = Verifier.GetPublicKey();

        res = Verifier.verify(abi.encodePacked(digest), salt, s2);

        return res;
    }

    function test_SignDelegationScript() public {
        // Construct a single transaction call: Mint 100 tokens to Bob.
        //SimpleDelegateContract.Call[] memory calls = new SimpleDelegateContract.Call[](1);
        bytes memory data = abi.encodeCall(ERC20.mint, (100, BOB_ADDRESS));
        //0x94bf804d00000000000000000000000000000000000000000000000000000000000000640000000000000000000000003c44cdddb6a900fa2b585dd299e03d12fa4293bc
        console.log("payload");
        console.logBytes(data);
        // forgefmt: disable-next-line
        uint256[32] memory TMPS2  = [544189736715714307744208039532181974241397485577502174213464579455039975389, 21626210634119867707916593041475851823166592347233147522947985603303261733129, 49800607173024154572128965371666467616716828640002501969770529045604085526, 212021755668392949180247661299572644545221534942356445697836098797555941377, 21668613863311589913501164558507774988946184872143307748764034095762375192574, 21428650845896719202951400198290282045231377421337105006050778023766783885627, 196124418669188733353226769219292388620757678766814029118410500535963090969, 21619468975952767018983126148047489947424523377553746848573814188366820212823, 21653040423167591328763485790993812466243779932380996156344820642432749731862, 21580600632090274814336326394774653988827802625880219437337307275773569466436, 154043883073359869020008871125475305064681225904668631765026701384886124638, 21428323066824003456320528519500389484919989589318263269596199459396659380415, 463244756501014722174522449524820613740938227365500664262216718000104341701, 385498012803320242496919524844037420544729306721230997515631743194862125155, 131068288087075012972818646673192888433650362607975414498908573843356975269, 224714013249320055891278989694676110509773002913057990401276924248889819504, 166407062604713343181940287627952228918609542917087845661054437868214419504, 609890857140879329496422170694564479176446095217539438851751030339177087313, 21380618169211788949347240558502699976274279223065455991821072617218609250426, 434971698669025644146506914776225865324756388451541068363941970585551777540, 21614169113729066066836493598652099825697831041087729627228304720341651292275, 21255176314203652697187594622991496216383918666056997763733038700361605972232, 21516668407690363030905031289087598943577263709183904244522200960978819690432, 341005829013193221419823082351734605842026047032256390006495284295692332972, 645224746974948749883107793636460795246203490193262550211419237365102870698, 229692463975219594302087129216579243171369533021995401088031684372659699736, 21668613454012078068970054204721053957283900350604679028955785306421081604227, 68920763164582918934192983790727319032526841541938600477727066898196475840, 277402052697701637187997467511310195146611886108339300555784532203140808735, 21598267490068236729069075725213863849315871367311548642922647610904716324571, 394009407772395549254153016067526350101101525506057639415216112065425714836, 392567450086331815776413990178651367067489368753978667772744953494833463463];

        bytes memory SALT = hex"461378c4afd2d6a4939c731f3249ecfdbffa2c4f3bd64076cc08ca31f602067e68f829f52cf5b8a9";
        uint256[] memory S2 = ZKNOX_memcpy32(TMPS2);
        uint256 nonce = 0;
        //./sign_cli.py sign_tx --data=94bf804d00000000000000000000000000000000000000000000000000000000000000640000000000000000000000003c44cdddb6a900fa2b585dd299e03d12fa4293bc --privkey=private_key.pem --version='falcon' --nonce=0 --to=0xA4AD4f68d0b91CFD19687c881e50f3A00242828c --value=0 --pubkey=public_key.pem

        vm.broadcast(DEPLOYER_PK);

        console.log("address ERC20:", address(token));

        bytes32 digest = keccak256(abi.encode(nonce, 0xA4AD4f68d0b91CFD19687c881e50f3A00242828c, data, 0));

        uint256 TX_HASH_expected = 0x44a789cf15ff286e6fb0cbfbf8afe549809daaf3379fb7928127f0ba8b777e5a;

        assertEq(TX_HASH_expected, uint256(digest));

        //calls[0] = SimpleDelegateContract.Call({to: address(token), data: data, value: 0});

        // Alice signs a delegation allowing `implementation` to execute transactions on her behalf.
        Vm.SignedDelegation memory signedDelegation = vm.signDelegation(address(Verifier), ALICE_PK);

        // Verify that Alice's account now temporarily behaves as a smart contract.

        // As Bob, execute the transaction via Alice's temporarily assigned contract.
        vm.stopBroadcast();

        vm.broadcast(BOB_PK);
        vm.attachDelegation(signedDelegation);
        bytes memory code = address(ALICE_ADDRESS).code;

        console.log("Verifier address:%x", uint256(uint160(address(Verifier))));

        console.log("code written at eoa Alice:");
        console.logBytes(code);

        require(code.length > 0, "no code written to Alice");

        //ZKNOX_Verifier(ALICE_ADDRESS).transact(address(token), data, 0, SALT, S2 );//this is the delegation we want, failing now
        Verifier.transact(address(token), data, 0, SALT, S2); //this will fail at msgsender=minter

        // Verify Bob successfully received 100 tokens.
        vm.assertEq(token.balanceOf(BOB_ADDRESS), 100);
    }
}
